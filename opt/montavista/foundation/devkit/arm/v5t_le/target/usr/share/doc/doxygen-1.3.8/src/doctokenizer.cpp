#define yy_create_buffer doctokenizerYY_create_buffer
#define yy_delete_buffer doctokenizerYY_delete_buffer
#define yy_scan_buffer doctokenizerYY_scan_buffer
#define yy_scan_string doctokenizerYY_scan_string
#define yy_scan_bytes doctokenizerYY_scan_bytes
#define yy_flex_debug doctokenizerYY_flex_debug
#define yy_init_buffer doctokenizerYY_init_buffer
#define yy_flush_buffer doctokenizerYY_flush_buffer
#define yy_load_buffer_state doctokenizerYY_load_buffer_state
#define yy_switch_to_buffer doctokenizerYY_switch_to_buffer
#define yyin doctokenizerYYin
#define yyleng doctokenizerYYleng
#define yylex doctokenizerYYlex
#define yyout doctokenizerYYout
#define yyrestart doctokenizerYYrestart
#define yytext doctokenizerYYtext
#define yylineno doctokenizerYYlineno

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 142
#define YY_END_OF_BUFFER 143
static yyconst short int yy_acclist[925] =
    {   0,
      143,  141,  142,  139,  142,  140,  141,  142,   23,  141,
      142,   25,  141,  142,   26,  139,  142,    1,   25,  141,
      142,   23,  141,  142,  140,  141,  142,  140,  141,  142,
       23,  140,  141,  142,  140,  141,  142,   24,  141,  142,
       23,  141,  142,   24,  141,  142,   24,  141,  142,  140,
      141,  142,  140,  141,  142,   19,   23,  141,  142,16401,
       19,   23,  141,  142,16401,   19,   23,  141,  142,16401,
       19,   23,  141,  142,16401,   19,   23,  141,  142,16401,
       23,  141,  142,   23,  141,  142,   23,  140,  141,  142,
       25,  141,  142,    1,   25,  141,  142,   23,  141,  142,

       23,  141,  142,   24,  141,  142,   23,  141,  142,  108,
      109,  141,  142,  108,  109,  140,  141,  142,  109,  141,
      142,   59,  141,  142,   58,   59,  141,  142,   60,  139,
      142,   57,   59,  141,  142,   59,  140,  141,  142,   59,
      140,  141,  142,   65,  141,  142,   67,  141,  142,   68,
      139,  142,   65,  141,  142,   65,  140,  141,  142,  140,
      141,  142,   66,  141,  142,  140,  141,  142,  140,  141,
      142,   65,  141,  142,   72,  141,  142,   74,  141,  142,
       76,  139,  142,   75,  141,  142,   72,  140,  141,  142,
      140,  141,  142,   73,  141,  142,  140,  141,  142,   79,

      141,  142,   79,  141,  142,   80,  139,  142,   79,  140,
      141,  142,   79,  141,  142,   78,   79,  141,  142,   78,
       79,  140,  141,  142,   30,   32,  141,  142,   30,   32,
      141,  142,   31,  139,  142,   30,   32,  140,  141,  142,
       32,  140,  141,  142,   34,   36,  141,  142,   35,  139,
      142,   34,   36,  140,  141,  142,   36,  140,  141,  142,
       36,  140,  141,  142,   38,   40,  141,  142,   39,  139,
      142,   38,   40,  140,  141,  142,   40,  140,  141,  142,
       40,  140,  141,  142,   42,   44,  141,  142,   43,  139,
      142,   42,   44,  140,  141,  142,   44,  140,  141,  142,

       46,   48,  141,  142,   47,  139,  142,   46,   48,  140,
      141,  142,   48,  140,  141,  142,   50,   52,  141,  142,
       51,  139,  142,   50,   52,  140,  141,  142,   52,  140,
      141,  142,   54,   56,  141,  142,   55,  139,  142,   54,
       56,  140,  141,  142,   56,  140,  141,  142,  100,  141,
      142,  102,  141,  142,  102,  139,  142,  100,  102,  141,
      142,  100,  141,  142,  100,  140,  141,  142,  101,  141,
      142,   96,  141,  142,   95,  141,  142,  141,  142,  141,
      142,  103,  141,  142,  141,  142,  140,  141,  142,  105,
      141,  142,  105,  140,  141,  142,  106,  141,  142,  106,

      140,  141,  142,   85,  141,  142,   82,   85,  141,  142,
       84,  139,  142,   85,  140,  141,  142,   85,  140,  141,
      142,   85,  141,  142,   81,   85,  141,  142,   91,  141,
      142,   93,  141,  142,   94,  139,  142,   94,  141,  142,
       91,  140,  141,  142,  140,  141,  142,   92,  141,  142,
      140,  141,  142,  140,  141,  142,  141,  142,   86,  140,
      141,  142,   86,  141,  142,   25,  141,  142,   26,  139,
      142,   27,  140,  141,  142,   23,   27,  140,  141,  142,
       27,  140,  141,  142,  110,  141,  142,  111,  139,  142,
      110,  140,  141,  142,  112,  131,  141,  142,  132,  139,

      142,  112,  131,  140,  141,  142,  112,  131,  140,  141,
      142,  131,  140,  141,  142,  131,  140,  141,  142,  138,
      141,  142,  138,  140,  141,  142,  133,  138,  141,  142,
      135,  138,  141,  142,  136,  138,  141,  142,  137,  139,
      142,  136,  138,  140,  141,  142,  128,  129,  141,  142,
      128,  130,  139,  142,  128,  129,  140,  141,  142,  129,
      141,  142,  129,  141,  142,  129,  140,  141,  142,   23,
       25,   26,   26,   28,   23,   19,   23,    9,    8,    8,
        8,   19,   23,16401,   19,   19,   23,16401,   19,   23,
    16401,   19,   23,16401,   19,   23,16401,   19,   23,16401,

       19,   23,   25,   23,   23,    2,    4,   23,  108,   58,
       65,   67,   65,   64,   63,   72,   74,   71,   70,   77,
       78,   30,   30,   34,   38,   42,   46,   50,   54,  100,
      101,  100,  100,  101,   95,   97,  103,  105,  106,  106,
      106,  106,   82,   83,   81,   81,   91,   93,   90,   89,
       87,   86,   25,   26,   26,  112,  112,  113,  133,  134,
      135,  136,  137,  128,  126,    3,    5,   23,   19,   19,
       19,   16,   15,    8,    8,   19,   19,   20,   19,   19,
       19,   19,   23,16401,   19,   23,16401,   19,   23,16401,
       19,   23,16401,   19,   23,16401,   19,   23,  107,   65,

       61,   62,   69,   77,   99,  100,   99,  104,  103,  106,
      106,  106,  106,  106,  106,  106,   88,  112,  127,  126,
       19,   19,   19,   14,   98,    8,    8,   19,   19,   19,
       19,   19, 8209,   19,   19,   23,16401,   19,   19,   23,
    16401,   19,   23,16401,   19,   23,16401,   19,  106,  106,
      106,  106,  106,  112,  125,   19,   13,    8,    8,   19,
       19, 8209,   18,   19,   11,   11,   11,   19,   23,16401,
       19,   23,16401,  106,  106,  106,  106,  120,   18,   19,
       12,    8,   19,   19,   18,   11,   19,   11,   19,   11,
       11,   11,   11,   19,   19,   23,16401,    6,   18,   19,

      106,  106,  106,  124,    7,   18,   19,   19,   19,   11,
       11,   19,   11,   11,   19,   11,   19,   11,   11,   11,
       11,   19,   23,16401,   53,  106,  106,  106,   19,   19,
       11,   20,   11,   19,   11,   19,   11,   11,   20,   11,
       19,   23,16401,   29,  106,  106,  106,  114,   19,   22,
       19,   11,   19,   11,   20,   11,   11,   11,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,  106,  115,
      123,   10,   19,   19,   11,   19,   11,   11,   20,   23,
      121,  119,   11,   19,   11,   11,   21,   37,   45,  122,
      118,   11,   19,   11,   11,   21,   21,   33,   49,  116,

       11,   19,   11,   11,   41,   11,   11,   11,   11,   11,
       11,   11,   11,   22,   11,   22,   22,   11,   11,   20,
       11,  117,   11,   21
    } ;

static yyconst short int yy_accept[1002] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    4,    6,    9,   12,   15,   18,
       22,   25,   28,   31,   35,   38,   41,   44,   47,   50,
       53,   56,   61,   66,   71,   76,   81,   84,   87,   91,
       94,   98,  101,  104,  107,  110,  114,  119,  122,  125,

      129,  132,  136,  140,  144,  147,  150,  153,  156,  160,
      163,  166,  169,  172,  175,  178,  181,  184,  187,  191,
      194,  197,  200,  203,  206,  209,  213,  216,  220,  225,
      229,  233,  236,  241,  245,  249,  252,  257,  261,  265,
      269,  272,  277,  281,  285,  289,  292,  297,  301,  305,
      308,  313,  317,  321,  324,  329,  333,  337,  340,  345,
      349,  352,  355,  358,  362,  365,  369,  372,  375,  378,
      380,  382,  385,  387,  390,  393,  397,  400,  404,  407,
      411,  414,  418,  422,  425,  429,  432,  435,  438,  441,
      445,  448,  451,  454,  457,  459,  463,  466,  469,  472,

      476,  481,  485,  488,  491,  495,  499,  502,  507,  512,
      516,  520,  523,  527,  531,  535,  539,  542,  547,  551,
      555,  560,  563,  566,  570,  571,  572,  573,  574,  575,
      575,  575,  575,  575,  576,  576,  577,  577,  577,  577,
      577,  578,  578,  578,  578,  578,  578,  578,  579,  580,
      581,  582,  582,  582,  582,  585,  586,  586,  589,  592,
      595,  598,  601,  601,  601,  603,  604,  604,  604,  604,
      604,  604,  605,  606,  607,  607,  607,  608,  609,  610,
      610,  611,  612,  613,  614,  614,  614,  614,  614,  615,
      616,  617,  618,  618,  619,  620,  620,  620,  620,  620,

      621,  622,  623,  624,  624,  624,  624,  625,  625,  626,
      626,  627,  627,  628,  628,  629,  629,  630,  630,  631,
      631,  632,  633,  634,  634,  635,  636,  637,  637,  637,
      638,  638,  638,  639,  640,  640,  641,  642,  643,  644,
      645,  646,  646,  646,  647,  647,  648,  649,  649,  650,
      651,  651,  652,  653,  654,  655,  656,  657,  658,  659,
      659,  659,  659,  659,  659,  659,  659,  659,  659,  660,
      661,  662,  663,  664,  665,  665,  666,  666,  666,  667,
      667,  667,  668,  668,  669,  669,  670,  671,  671,  672,
      672,  672,  672,  672,  673,  673,  673,  673,  673,  674,

      675,  676,  677,  678,  678,  679,  680,  681,  681,  681,
      681,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  685,  688,  691,  694,  697,  697,  699,  699,
      699,  699,  700,  701,  701,  702,  702,  702,  703,  703,
      704,  705,  705,  705,  705,  705,  705,  705,  705,  707,
      708,  709,  710,  710,  710,  710,  711,  711,  711,  712,
      713,  714,  715,  716,  717,  717,  718,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  720,  721,

      721,  722,  722,  723,  723,  724,  725,  725,  725,  725,
      726,  726,  727,  728,  729,  729,  729,  730,  730,  730,
      730,  731,  732,  732,  732,  733,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  738,  739,  742,  745,  748,  748,  748,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  750,  750,  750,  751,  752,  753,  754,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  757,
      757,  757,  758,  758,  758,  758,  758,  759,  760,  760,

      761,  761,  761,  762,  762,  762,  762,  762,  762,  762,
      762,  765,  765,  765,  765,  765,  765,  765,  766,  767,
      768,  771,  774,  774,  774,  774,  774,  774,  774,  774,
      774,  774,  774,  774,  774,  774,  774,  774,  774,  775,
      776,  777,  778,  778,  778,  779,  779,  779,  779,  779,
      779,  779,  779,  781,  782,  782,  782,  782,  782,  782,
      783,  783,  784,  784,  784,  785,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  788,  790,
      791,  791,  792,  792,  793,  795,  798,  799,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,

      801,  801,  801,  801,  802,  803,  804,  804,  805,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      806,  806,  806,  808,  809,  809,  809,  810,  810,  810,
      810,  810,  810,  810,  810,  811,  811,  813,  814,  816,
      818,  819,  820,  821,  821,  821,  822,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  826,  827,  827,
      827,  827,  828,  829,  829,  829,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  830,  830,  830,  831,
      831,  831,  831,  833,  835,  837,  837,  838,  840,  841,
      844,  845,  845,  845,  845,  845,  845,  845,  846,  846,

      847,  848,  849,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  850,  851,  851,  852,  854,  855,  856,
      856,  857,  858,  859,  859,  860,  861,  861,  861,  862,
      863,  863,  864,  865,  865,  866,  866,  866,  867,  868,
      869,  869,  869,  869,  869,  869,  869,  869,  870,  870,
      870,  870,  871,  871,  871,  871,  872,  872,  872,  873,
      873,  874,  874,  875,  877,  878,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  879,  879,  879,
      879,  879,  879,  879,  879,  879,  879,  880,  881,  881,
      881,  881,  881,  881,  881,  881,  881,  881,  882,  882,

      882,  882,  882,  883,  883,  883,  883,  883,  883,  883,
      883,  883,  883,  883,  883,  883,  883,  883,  883,  883,
      885,  886,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  887,  888,  888,  889,  889,  890,  890,  891,  892,
      892,  892,  892,  892,  892,  892,  894,  895,  896,  896,
      897,  897,  898,  898,  898,  899,  899,  900,  901,  901,
      901,  903,  904,  905,  905,  905,  905,  905,  906,  906,
      906,  907,  908,  909,  909,  910,  911,  912,  913,  914,
      915,  917,  918,  919,  919,  919,  919,  919,  921,  922,
      922,  923,  923,  925,  925,  925,  925,  925,  925,  925,

      925
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       38,   45,   46,   47,   48,   49,   38,   38,   38,   38,
       50,   51,   52,   53,   38,    1,   54,   55,   56,   57,

       58,   59,   60,   61,   62,   38,   63,   64,   65,   66,
       67,   68,   38,   69,   70,   71,   72,   73,   74,   75,
       76,   38,   77,   78,   79,   80,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[81] =
    {   0,
        1,    2,    3,    4,    2,    5,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   29,
       30,   29,    1,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   31,    1,   32,   33
    } ;

static yyconst short int yy_base[1233] =
    {   0,
        0,    9,   89,   25,  167,  178,  257,  336,  415,  494,
      573,  652,  732,    0,  811,  890,  969, 1048,  189,  200,
      222,  246,  268,  279,  301,  325,  347,  380,  461,  528,
     1127, 1206, 1286,    0,  540,  607, 1366,    0,  822,  855,
     1445, 1524, 1604,    0, 1683, 1762, 1842, 1922, 2001, 2080,
      846,  879,  901,  912, 2160,    0, 2240,    0,  934,  958,
     2320,    0, 3587,13229,13229,13229,    0,    2,   44,   11,
     2399, 3504, 3569,    0,    0,13229, 2478, 3553, 3558,   16,
      980, 2558, 2638,    3,    8,    5,   50,13229, 2718,  392,
      443,   67, 2798,  217, 3558,    0,    0, 3559,13229,   29,

    13229,13229,13229, 3570,    0,   36,13229, 2877,    0,    0,
    13229, 3555,  991,13229,    0,   37,13229,13229,    0,    0,
    13229, 1017,13229,   79,13229,13229,  169,    0,    0,    0,
      233,  312,    0, 3516,    0,13229,    0, 3560, 3514,    0,
    13229,    0,13229, 3513,    0,13229,    0, 3512,    0,13229,
        0, 3511,    0,13229,    0, 3510,    0,13229,    0, 3509,
        0,  296,  363,  397,   51,    0,  239,13229,    0,   29,
        0,  430,  435,  455,    0,    0,  380,  617,13229,  316,
    13229,    0,13229, 3544,  460,    0,  177,13229,13229,    0,
        0,13229, 3559, 1053,  486,    0,    0,  521,  525,13229,

        0,    0,13229,13229,13229,    0,13229,    0, 3558,  644,
     1032,13229,13229,    0,  530, 3560,13229, 3558,    0,    0,
        0, 3542,13229,    0,    0,  555,  691, 1106,  600, 1141,
      634,  609, 3539, 2955, 3551,  621,    0,    0, 3534, 3532,
     3034, 3526,    0, 3473, 3534,    0,  644,13229,    0, 3484,
     3496,    8, 3535, 1099, 3114,  192, 3193, 3269,  116,  119,
       13,  143,  565, 3484, 3349, 1165, 1171,  680,  718, 3527,
      929, 1220,  722,13229,  838,  873,13229, 1240,    0, 3520,
      367,    0,  372, 3428, 3538, 3521,    0, 1008,13229,    0,
        0,  428, 3520,13229,    0,  687,  951, 1019, 1065,  711,

        0,    0, 1137, 1190, 3484, 3475,    0, 3474,    0, 3473,
        0, 3472,    0, 3471,    0, 3470,    0, 3469,    0, 1145,
     1194, 1244, 1030, 3526, 1198,    0,13229,  231, 3525,  543,
      271, 1065,    0, 1457, 1463, 3506, 1482, 1486, 1224,13229,
     1232,    0,    0, 1244, 3509,    0,  454, 3506,13229,    0,
     1263,13229,    0, 1269, 1090, 1159,    0, 3510,13229, 3461,
     3459, 3458, 3453, 3469, 3468,  181, 3463, 3453,    0, 1273,
     1277, 3513,13229,    0, 3488,    0, 1472, 1496,13229, 1476,
     1500,13229, 1539,13229, 3433, 1499,  585,  269,  199, 3498,
     3487,    0, 3483,13229, 3485, 3485, 1558, 1562,13229, 3433,

     3432, 1561, 1700, 3486, 1721, 1574, 1723, 3444, 3476, 3471,
     1708, 3470,  316,  818, 1712,  474,  395,  514,   31,  249,
      352,  483, 1065, 1770,  493,  447, 3469,  237,  949, 1752,
      305,  484,  418,  360,  606,  387,  516, 1505, 1767,  562,
      791, 3585, 3665,  629,  801,  310, 3432, 3745,  673, 1699,
     1856,13229,13229, 3470,13229, 1874, 1878,13229, 3469,13229,
     1504, 3434, 3433, 3432, 3431, 3430, 3429, 3428,    0,13229,
    13229, 1438, 1736, 3417, 3416, 3824, 1882, 3468, 3902, 1886,
     3980, 4058, 1904, 1974, 3458,13229, 3459, 3420, 3418, 3403,
     3408, 3401, 3402, 3414, 3414, 3399, 3403,13229,    0, 1939,

     1894, 3440, 1943,  638,  805,13229, 3451, 3455,    0,13229,
     1991, 3398, 3408, 2013, 3439,  798, 2037, 1910, 3393, 3392,
     2047, 2097, 3389, 3435,  814, 2104,  808,  842,  377,  843,
      651,  854,  834,  615,  887,  920,  454, 1010, 3427,  521,
      601,  882,  891,  546,  939,  870,  968,  961, 1151,  928,
     1054, 4137, 4212, 4292, 3379, 1044, 3382, 3420, 1005, 1195,
     2427, 3388, 3382, 3375, 3374, 3359, 3358, 3371, 3360, 3361,
     1984, 1087, 1105, 4371, 4449, 2431, 2435,    0, 3363, 3365,
        0, 3358, 3363, 3366, 3348, 3348, 3362, 3349, 2114, 3393,
     3388,13229, 3394, 2455, 2469, 1828, 3404, 3346, 1207, 2492,

     3344, 3345, 2510, 3382, 1007, 1056,  972, 1131, 1148, 1243,
     2121, 1156, 1426,  893, 1014, 1186, 1179, 1207, 4523, 4603,
     3337, 1524, 3343, 3379, 2517, 2587, 2144, 3336, 3330, 3346,
     3345, 3332, 3337, 3319, 3302, 3312, 1138, 1173, 4682, 4760,
     2531, 2544, 3296,    0,13229, 3290, 3276, 3288, 3278, 1479,
     3271, 3254, 2586, 3295, 2616, 2463, 3304, 3293, 3278, 2029,
     3246, 2651, 3176, 3189, 2661,13229, 1446, 1459, 1546, 1440,
     1484, 1096, 1513, 1514, 1490, 1521, 1675, 4834, 4909, 4984,
     5064, 5143, 5222, 5301, 5381, 5461,13229, 1576, 2691, 2548,
     3213, 3204, 3144, 3132, 3121, 3115, 3121, 3114, 3111, 3107,

     3103, 1450, 1726, 5540, 5618, 2628, 3099,13229, 3094, 3091,
     3077, 3078, 3075, 3062, 3045, 3039, 3089, 2709, 3082, 3057,
     2068, 2415, 2718, 2736, 3002, 3000, 2748, 1468, 1020, 1694,
     1686, 1723, 1722, 1729,13229, 5696, 2995, 1785, 1523, 5771,
     5851, 5930, 1724, 6009, 1748,    0, 6089, 3054, 2743, 3039,
     2989, 2981, 2966, 2969, 2959, 2968,13229,13229, 2954, 1897,
     1926, 6168, 2773, 1959, 2938, 2934, 2944, 2921, 2915, 2915,
     2918, 2895, 2505, 2904, 2877, 2760,    0, 2881, 2820, 1673,
     1731, 6246, 2718, 1736, 6321, 6401, 6481, 2853, 2871, 6560,
    13229, 2855, 2855, 2838, 2827, 2838, 2825, 2853, 1760, 6639,

     2807, 1980, 2784, 2790, 2785, 2037, 2785, 2782, 2751,    0,
     2620, 2726, 2837,13229, 2726, 2923, 1766, 6718, 2860, 2948,
     2716, 2714, 2706, 6797, 1438, 1770, 2033, 2713, 1860, 6877,
     2697, 6957, 1876, 7036, 1885, 2023, 2656, 1956, 2061, 2684,
     2622, 2622, 2615, 2617, 2600, 2610, 1736, 7111,    0, 2591,
     2588, 2096, 2564, 2573,    0,13229, 2866, 2535,13229, 2906,
     7189, 2551, 7268, 1627, 2540, 2521, 2107, 7347, 2430, 2571,
     2921, 2549, 2630, 2737, 2971, 2818, 2986, 3005, 3011, 2411,
     3025, 2648, 2776, 3035, 2137, 2533, 3062, 1801,    8, 1967,
     1994, 2481, 2465, 2464, 2451, 2455, 1222,13229,    0, 2593,

     2436, 2428,13229, 2989, 2414, 3053, 2790, 2051, 2389, 2429,
     2499, 2889, 2500, 2988, 2556, 2601, 2674, 3052, 3056, 1796,
     2375, 2384, 2397, 2395, 2391, 3075, 3072, 3082, 2931, 3087,
     2144,13229, 2066,13229, 2071,13229, 2031,13229, 2783, 2870,
     2030, 2006, 2893, 2002, 2679, 1884, 1996, 1972, 1977, 1958,
     1889,13229, 3089, 3106,13229, 1796,13229, 2915, 1661, 3139,
     7426, 7506, 1537, 3136, 3146, 3150, 3153,13229, 1531, 3160,
     2738, 2899, 3006, 7585, 3112, 3277, 2995, 3168, 1977, 1985,
        0, 7665, 1481, 3186, 1441, 3167, 7743, 3302, 1227, 3171,
     3175, 7822,13229, 3296, 3269, 3279, 1208, 2479, 1243,13229,

     7902, 7935, 7968, 8001, 8034, 8067, 8100, 8133, 8166, 8199,
     8232, 8265, 8298, 8331, 8364, 8397, 8430, 8463, 8496, 8529,
     8562, 8595, 8628, 8661, 1540, 2125, 1153, 8694, 8713, 2588,
     8735, 8768, 8801, 8834, 8867, 8900, 1047, 1994, 8927, 8960,
     1045, 8987, 2599, 9019, 9047, 9080, 9113, 9146, 9179, 9212,
     9245, 9278, 9311, 9344,  808, 9377, 9396, 9426, 9459,  921,
     9486, 9514,  896, 9541, 9568, 9596,  690, 9629, 2804, 9661,
     9689, 9722,  653, 9755, 9788, 9815,  486,  407, 2441, 2737,
     9843, 9862, 3081, 2081,  326, 9889, 1790, 2413, 9916, 9930,
     9963, 3190, 9996,10029,10062,10095,10128, 2945,  199,10160,

     1809,10188, 3258, 1877, 2674,10220,10248,10281,10314,10347,
    10380,10413,10446,10479,10512,10545,10578, 2124,10611,10630,
    10646,10676,10709,10742,10769,  144,10797, 3288, 2436,10824,
    10852, 3189,10884,10912,10945, 2534, 2607,10972, 3300,10999,
     3306, 3304, 3315,11027, 3317, 3324,11059,11086, 2701,11108,
    11135,11157, 3350,11184,11212,11245,11277, 3357,11304,11331,
     3360,11359,11378,11408,11441,11474, 3361,11507, 2821,11534,
    11561, 3364, 3340,11589, 3310,11621, 2849,11643,11670,11692,
     3370, 2802,11720,11749,11781,11808,11836, 3376,11868,11896,
    11925,11954,11986,12014,12047,12080,12113,12142,12171,12200,

    12233,12266,12299,12332,12365,12398,12431,12464,12497,12529,
    12558,12587,12620,12653,12686,12719,12752,12785,12817,12845,
    12878,12911,12943,12971,13003,13020,13047,13074,13098,13130,
    13163,13195
    } ;

static yyconst short int yy_def[1233] =
    {   0,
     1001, 1001, 1000,    3, 1002, 1002, 1003, 1003, 1004, 1004,
     1005, 1005, 1000,   13, 1006, 1006, 1007, 1007, 1008, 1008,
     1009, 1009, 1010, 1010, 1011, 1011, 1012, 1012, 1013, 1013,
     1014, 1014, 1000,   33, 1001, 1001, 1000,   37, 1015, 1015,
     1016, 1016, 1000,   43, 1017, 1017, 1018, 1018, 1019, 1019,
     1020, 1020, 1021, 1021, 1000,   55, 1000,   57, 1022, 1022,
     1000,   61, 1000, 1000, 1000, 1000, 1023, 1000, 1000, 1000,
     1024, 1025, 1026, 1023, 1027, 1000, 1028, 1029, 1000, 1030,
     1031, 1032, 1032,   83,   83,   83, 1000, 1000, 1033, 1000,
     1000, 1023, 1028, 1029, 1023, 1034, 1034, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1035, 1000, 1000, 1036, 1035, 1037,
     1000, 1038, 1039, 1000, 1040, 1000, 1000, 1000, 1040, 1041,
     1000, 1042, 1000, 1043, 1000, 1000, 1044, 1045, 1045, 1046,
     1046, 1000, 1046, 1000, 1047, 1000, 1047, 1000, 1000, 1048,
     1000, 1048, 1000, 1000, 1049, 1000, 1049, 1000, 1050, 1000,
     1050, 1000, 1051, 1000, 1051, 1000, 1052, 1000, 1052, 1000,
     1053, 1000, 1000, 1053, 1054, 1053, 1000, 1000, 1055, 1000,
     1056, 1057, 1057, 1057, 1058, 1058, 1059, 1059, 1000, 1000,
     1000, 1060, 1000, 1000, 1061, 1062, 1000, 1000, 1000, 1062,
     1063, 1000, 1000, 1064, 1000, 1065, 1065, 1000, 1000, 1000,

     1066, 1067, 1000, 1000, 1000, 1068, 1000, 1068, 1068, 1000,
     1000, 1000, 1000, 1069, 1070, 1071, 1000, 1071, 1072, 1072,
     1072, 1000, 1000, 1073, 1066, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1083, 1084, 1000, 1085, 1086, 1000, 1087, 1087,
     1087, 1088, 1089, 1090, 1091, 1092, 1000, 1091,  258,  258,
      258,  258, 1000, 1000, 1093, 1000, 1000, 1000, 1000, 1000,
     1000, 1066, 1066, 1000, 1000, 1000, 1000, 1066, 1094, 1000,
     1000, 1095, 1000, 1096, 1097, 1098, 1099, 1100, 1000, 1101,
     1102, 1000, 1103, 1000, 1104, 1105, 1106, 1000, 1106, 1000,

     1107, 1108, 1108, 1000, 1000, 1000, 1109, 1000, 1110, 1000,
     1111, 1000, 1112, 1000, 1113, 1000, 1114, 1000, 1115, 1000,
     1000, 1115, 1116, 1117, 1000, 1118, 1000, 1000, 1119, 1120,
     1121, 1120, 1122, 1123, 1000, 1124, 1123, 1123, 1000, 1000,
     1125, 1126, 1126, 1125, 1000, 1127, 1000, 1128, 1000, 1129,
     1000, 1000, 1130, 1000, 1000, 1000, 1131, 1131, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1132, 1000,
     1133, 1134, 1000, 1135, 1000, 1136, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1137, 1138, 1139, 1140, 1141, 1142,
     1143, 1144, 1145, 1000, 1146, 1000, 1147, 1148, 1000, 1149,

     1149, 1150, 1150, 1151, 1000, 1152, 1152, 1000, 1153, 1154,
     1000, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
     1154, 1155, 1155,  443,  443,  443, 1000, 1156, 1157, 1000,
     1000, 1000, 1000, 1158, 1000, 1159, 1160, 1000, 1161, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1162, 1000,
     1000, 1163, 1163, 1000, 1000, 1164, 1165, 1165, 1164, 1166,
     1164, 1164, 1166, 1166, 1167, 1000, 1168, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1169, 1000,

     1170, 1171, 1000, 1171, 1172, 1000, 1173, 1174, 1175, 1000,
     1176, 1177, 1177, 1178, 1000, 1179, 1178, 1000, 1000, 1000,
     1180, 1180, 1000, 1181, 1182, 1000, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1183, 1184, 1183,  554,  554, 1000, 1185, 1000, 1185,
     1186, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1165, 1165, 1164, 1164, 1166, 1166, 1168, 1000, 1000,
     1187, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1170, 1000,
     1171, 1000, 1188, 1189, 1176, 1190, 1177, 1177, 1179, 1178,

     1000, 1000, 1180, 1000, 1179, 1179, 1179, 1179, 1179, 1179,
     1000, 1179, 1179, 1179, 1179, 1179, 1179, 1191, 1192, 1000,
      554,  554, 1000, 1185, 1193, 1186, 1194, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1165, 1165, 1164, 1164,
     1166, 1166, 1000, 1195, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1188, 1190, 1190, 1196, 1197, 1000, 1177,
     1179, 1178, 1000, 1000, 1180, 1000, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1198, 1199, 1199, 1200,
     1201, 1202, 1203, 1000, 1000, 1204, 1000, 1000, 1194, 1194,
     1205, 1206, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1207, 1207, 1208, 1208, 1209, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1196, 1000, 1197, 1000,
     1000, 1000, 1000, 1178, 1000, 1000, 1180, 1179, 1179, 1179,
     1179, 1179, 1179, 1198, 1000, 1210,  679, 1211,  679, 1212,
     1201, 1203,  741, 1213,  741,  684, 1204, 1205, 1000, 1206,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1207,
     1207, 1208, 1209, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1178, 1214, 1000, 1180, 1179,
     1179, 1210, 1000,  679, 1212, 1215, 1213,  741,  741,  747,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1207, 1207, 1208,

     1209, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1216,
     1000, 1000, 1178, 1000, 1000, 1180,  679, 1215,  741,  741,
      741,  741,  741, 1217, 1218, 1218, 1000, 1219, 1218, 1220,
     1000, 1220, 1218, 1000, 1218, 1000, 1000, 1218, 1218, 1218,
     1000, 1000, 1000, 1000, 1000, 1000, 1207, 1208, 1221, 1000,
     1000, 1000, 1000, 1000, 1222, 1000, 1000, 1000, 1000, 1000,
     1178, 1000, 1180,  679,  741,  741, 1217, 1217, 1217, 1217,
     1217, 1000, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1223, 1000,  832, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1207, 1000, 1224, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1225, 1000, 1000, 1000, 1226, 1226,  679,
      741,  741, 1227, 1227, 1228, 1217, 1217, 1217, 1217, 1217,
     1223, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1226,  679,  741,  741, 1227, 1000,
     1228, 1000, 1217, 1217, 1000, 1000, 1000, 1000, 1000, 1000,
      679,  741,  741, 1217, 1217, 1000, 1217, 1000, 1000, 1000,
     1229, 1229, 1229, 1230, 1229, 1229, 1229, 1229, 1229,  741,
      741, 1231,  741, 1217, 1000, 1000, 1232, 1000,  741, 1217,
     1000, 1232, 1000, 1217, 1000, 1217, 1000, 1217, 1000,    0,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000
    } ;

static yyconst short int yy_nxt[13310] =
    {   0,
     1000, 1000,   65,  226,  227,  226,  226,   66,   66,   66,
       66,   65,  226,  227,  226,  226,   66,   66,   66,   66,
      886,  245,  831,   66, 1000,   66,   90,   66,   91,   90,
      281,  327,   66,  281,   66,  246,   66,  283,  292,   92,
      283,  292,   93,   94,   95,  228,  229,  228,  228,  328,
       66,  263,  324,  263,  263,  324,  411,  319,  230,   66,
      532,  231,  232,  233,  255,  261,  255,  324,  271,  255,
      271,  271,  262,  260,  403,  255,  255,  264,  255,   66,
      296,  272,  296,  296,  273,  269,  445,  237,   66,   67,
       68,   69,   70,   68,   67,   71,   72,   73,   74,   75,

       67,   76,   76,   67,   77,   76,   77,   78,   67,   77,
       79,   76,   80,   67,   66,   76,   81,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   76,   81,
       76,   67,   82,   82,   82,   82,   82,   83,   82,   84,
       82,   82,   82,   82,   85,   86,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   87,   67,   88,   89,   65,
      298,  341,  298,  298,   97,   97,   97,   97,  347,  255,
       65,  347,  255,  443,   98,   97,   97,   97,   97,  444,
       97,  136,   97,  300,   97,   98,  137,  138,  137,  137,

      446,   97,  136,   97,  253,   97,  255,  137,  138,  137,
      137,  253,  137,  252,  137,  408,  139,   97,  276,  277,
      276,  276,  449,  137,  141,  137,  288,  139,   97,  142,
      143,  142,  142,  327,  303,  304,  303,  303,  494,  139,
      325,  325,  325,  325,  243,  142,   97,  142,  141,  144,
      139,  328,  495,  142,  143,  142,  142,   97,  100,  101,
      305,  100,  526,  102,  103,  103,  103,  103,  137,  142,
      146,  142,  144,  144,  411,  147,  147,  147,  147,  137,
      104,  146,  103,  305,  103,  412,  147,  147,  147,  147,
      473,  147,  473,  147,  503,  148,  144,  320,  320,  320,

      320,  142,  147,  150,  147,  539,  148,  103,  151,  151,
      151,  151,  321,  304,  304,  304,  304,  339,  148,  339,
      339,  473,  340,  504,  151,  142,  151,  150,  152,  148,
      411,  256,  151,  151,  151,  151,  103,  100,  101,  305,
      100,  526,  102,  103,  103,  103,  103,  147,  151,  154,
      151,  152,  152,  247,  155,  155,  155,  155,  147,  104,
      412,  103,  305,  103,  320,  320,  320,  320,  281,  427,
      155,  281,  155,  283,  156,  152,  283,  411,  556,  321,
      151,  335,  154,  335,  335,  411,  103,  155,  155,  155,
      155,  412,  336,  266,  227,  266,  266,  156,  320,  320,

      322,  320,  411,  155,  151,  155,  267,  156,  607,  268,
      269,  270,  411,  321,  545,  103,  106,  107,   64,  106,
      411,  108,   66,   66,  109,  110,  155,  111,  111,  292,
      156,  111,  292,  111,  390,  337,  111,  111,  112,  412,
       66,  111,  113,  526,  266,  227,  266,  266,  331,  332,
      427,  332,  338, 1000,  332,  347,  332,  267,  347,  155,
      268,  269,  270,  158,  111,  113,  111,  343,  159,  159,
      159,  159,  411, 1000,  332,  538,  332,  343,  343,  411,
      332,  345,  544,  610,  159,  332,  159,  351,  160,  351,
      351,  114,  352,  114,  109,  106,  107,   64,  106,  411,

      108,   66,   66,  109,  110,  332,  111,  111,  526,  411,
      111,  160,  111,  389,  412,  111,  111,  112,  411,   66,
      111,  113,  354,  355,  354,  354,  356,  533,  356,  356,
      158,  370,  412,  370,  370,  159,  159,  159,  159,  526,
      159,  526,   65,  111,  113,  111,  411,   66,   66,   66,
       66,  159,  427,  159,  531,  160,  226,  227,  226,  226,
      170,  331,  332,   66,  332,   66,  263,   66,  263,  263,
      114,  411,  114,  109,  116,  117,   64,  116,  160,  118,
       66,   66,  119,  120,  546,  121,  121,  411,  612,  121,
       66,  121,  264,  332,  121,  121,   66,  253,   66,  121,

      122,  377,  229,  377,  377,  427,  385,  159,  408,   65,
      381,  382,  381,  381,   66,   66,   66,   66,  335,   66,
      335,  335,  121,  122,  121,  427,  411,  170,  385,  336,
       66,  411,   66,  253,   66,  379,  379,  379,  379,  385,
      411,  380,  387,  608,  388,  397,  397,  397,  397,   64,
      256,   64,  119,  116,  117,   64,  116,   66,  118,   66,
       66,  119,  120,  503,  121,  121,  613,  427,  121,  399,
      121,  359,  337,  121,  121,   66,  411,   66,  121,  122,
      376,  274,  274,  274,  274,  412,   66,  275,  296,  338,
      296,  296,  228,  229,  228,  228,  554,  360,  559,  361,

      362,  121,  122,  121,  363,  230,  591,  364,  231,  232,
      233,  365,  461,  366,  461,  461,  367,  240,  368,  276,
      277,  276,  276,  274,  274,  274,  274,  560,   64,  275,
       64,  119,  123,  124,  125,  124,  124,  123,  123,  126,
      126,  126,  126,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  126,  123,  126,  123,  126,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  123,  126,  123,  123,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,

      127,  127,  127,  127,  127,  127,  127,  127,  123,  123,
      123,  126,  123,  125,  123,  123,  411,  253,  129,  129,
      129,  129,  256,  411,   65,   64,  253,  326,  449,  176,
      176,  176,  176,  411,  129,  326,  129,  408,  129,  274,
      274,  274,  274,  411,  551,  176,  527,  176,  204,  176,
      528,  605,  599,  205,  205,  205,  205,   65,   64,  411,
      529,  129,  176,  176,  176,  176,  412,  411,  411,  205,
      555,  205,  176,  205,  276,  277,  276,  276,  176,  411,
      176,  204,  176,  606,  412,  412,  205,  205,  205,  205,
      129,  123,  125,  123,  123,  411,  205,  129,  129,  129,

      129,  176,  205,  207,  205,  176,  205,  411,  208,  208,
      208,  208,  411,  129,  207,  129,  411,  129,  411,  208,
      208,  208,  208,  348,  209,  205,  208,  427,  210,  205,
      271,  609,  271,  271,  176,  209,  217,  208,  614,  210,
      129,  218,  218,  218,  218,  411,  268,  269,  341,  412,
      427,  211,  298,  411,  298,  298,  427,  218,  205,  218,
      217,  218,  211,  412,  411,  218,  218,  218,  218,  129,
      131,  132,  131,  131,  411,  300,  133,  133,  133,  133,
      208,  218,  617,  218,  218,  218,  411,  248,  248,  248,
      248,  208,  133,  411,  133,  427,  134,  411,  289,  289,

      289,  289,  540,  248,  412,  248,  541,  248,  218,  456,
      456,  456,  456,  218,  289,  542,  289,  253,  289,  134,
      298,  615,  298,  298,  294,  294,  294,  294,  408,  616,
      248,  324,  411,  458,  324,  411,  469,  218,  250,  411,
      294,  289,  294,  300,  294,  411,  324,  251,  133,  131,
      132,  131,  131,  667,  412,  133,  133,  133,  133,  248,
      349,  349,  349,  349,  412,  256,  298,  294,  298,  298,
      289,  133,  293,  133,  286,  134,  349,  674,  349,  411,
      349,  411,  359, 1000,  332,  360,  332,  361,  362,  300,
      411,  356,  363,  356,  356,  364,  294,  622,  134,  365,

      571,  366,  668,  349,  367,  534,  368,  228,  229,  228,
      228,  535,  536,  255,  242,  332,  242,  242,  571,  242,
      230,  411,  427,  231,  232,  233,  243,  133,  162,  163,
      164,  162,  349,  165,  166,  166,  166,  166,  303,  304,
      303,  303,  378,  167,  378,  378,  320,  320,  320,  320,
      166,  571,  166,  637,  166,  230,  411,  731,  231,  232,
      356,  321,  356,  356,  305,  407,  266,  227,  266,  266,
      669,  638,  271,  411,  271,  271,  411,  166,  237,  267,
      240,  411,  268,  269,  270,  267,  571,  305,  268,  269,
      670,  304,  304,  304,  304,  325,  325,  325,  325,  325,

      325,  325,  325,  702,  411,  427,  166,  162,  163,  164,
      162,  411,  165,  166,  166,  166,  166,  305,  427,  677,
      559,  271,  167,  271,  271,  339,  672,  339,  339,  166,
      340,  166,  411,  166,  272,  571,  703,  273,  269,  343,
      305,  451,  676,  451,  451,  320,  320,  322,  320,  343,
      343,  343,  675,  345,  272,  886,  166,  273,  269,  999,
      321,  343,  343,  624,  351,  345,  351,  351,  411,  352,
      354,  355,  354,  354,  370,  661,  370,  370,  370,  798,
      370,  370,  671,  677,  962,  166,   64,   64,   65,   64,
      168,   64,   64,   66,   66,   66,   66,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   66,
       64,   66,   64,   66,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,   64,   66,   64,   64,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,   64,   64,   64,   66,   64,   64,   65,   64,
       64,   64,  171,   66,   66,   66,   66,   64,   64,   64,
       64,  172,   64,  172,   64,  173,  172,  173,   64,   66,
       64,   66,   64,   66,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,   64,  174,   64,   64,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,   64,   64,   64,   66,   64,   65,   64,   64,
      886,  411,  178,   66,  178,   66,  331,  473,  335,  473,
      335,  335,  840,  571,  335,  411,  335,  335,   66,  336,
      178,  411,   66,  377,  229,  377,  377,  379,  379,  379,
      379,  730,  728,  335,  411,  335,  335,  335,  473,  335,
      335,  729,  831,  411,  336,   66,  673,  378,  336,  378,

      378,  381,  382,  381,  381,  461,  385,  461,  461,  411,
      780,  253,  337,  231,  232,  411,  412,  385,  474,  760,
      387,   64,  388,   64,  178,   64,   65,   64,   64,  338,
      411,  178,   66,  178,   66,  475,  713,  337,  411,  411,
      500,  337,  500,  500,  989,  256,  411,   66,  483,  178,
      714,   66,  484,  230,  338,  733,  231,  232,  338,  397,
      397,  397,  397,  397,  397,  397,  397,  236,  252,  547,
      732,  411,  236,  253,   66,  548,  549,  427,  427,  252,
      784,  252,  515,  399,  516,  412,  253,  399,  253,  242,
      737,  242,  254,  255,  686,  515,  986,  516,  983,  408,

       64,  243,   64,  178,  179,  180,  181,  180,  180,  179,
      179,  182,  183,  183,  183,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  184,  179,  183,  179,  183,
      179,  183,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  179,  183,  179,  179,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      179,  179,  179,  183,  187,  188,   64,  187,  735,  189,
       66,   66,  190,  191,  737,  192,  192,  920,  411,  192,

      451,  192,  451,  451,  192,  192,  193,  252,   66,  192,
      194,  411,  253,  267,  412,  252,  268,  269,  252,  411,
      253,  515,  518,  516,  518,  518,  252,  969,  412,  515,
      252,  408,  192,  194,  192,  253,  681,  411,  242,  571,
      242,  254,  735,  412,  515,  530,  516,  411,  411,  571,
      243,  412,  781,  735, 1000,  473,  411,  473,  412,   64,
      681,   64,  190,  187,  188,   64,  187,  517,  189,   66,
       66,  190,  191,  571,  192,  192,  519,  411,  192,  761,
      192,  427,  886,  192,  192,  193,  473,   66,  192,  194,
      522,  427,  411,  520,  840,  411,  427,  677,  537,  897,

      681,  412,  789,  737,  817,  412,  619,  735,  427,  249,
      543,  192,  194,  192,  412,  427,  412,  249,  241,  864,
      550,  847,  427,  427,  681,  225, 1000,  427,  290,  656,
      656,  656,  656,  737,  657,  427,  290,  427,   64,  658,
       64,  190,   64,  195,   65,  195,  195,   64,   64,  196,
       66,   66,   66,   64,   64,   64,   64,  451,   64,  451,
      451,  677,  946,  737,   64,   66,   64,   66,   64,   66,
      267,  968,  886,  268,  269,  456,  456,  456,  456,  456,
      456,  456,  456,  477,  840,  477,  477,  335,  886,  335,
      335,   64,   66,   64,   64,  571,  295,  886,  336,  458,

      840,  385,  952,  458,  295,  335,  253,  335,  335,  840,
      571,  518,  385,  518,  518,  590,  336,  388,   64,   64,
       64,   66,   64,  195,   65,  195,  195,   64,   64,  196,
       66,   66,   66,   64,   64,   64,   64,  572,   64,  571,
      500,  337,  500,  500,   64,   66,   64,   66,   64,   66,
      385,  737,  961,  230,  573,  253,  231,  232,  338,  337,
      802,  385,  802,  802,  590,  519,  408,  798,  886,  576,
      886,   64,   66,   64,   64,  335,  338,  335,  335,  886,
      840,  802,  520,  802,  802,  335,  336,  335,  335,  987,
      932,  831,  594,  594,  594,  594,  799,  681,   64,   64,

       64,   66,  198,  199,  198,  198,  886,   71,  200,  200,
      201,  202,  288,   76,   76,  596,  399,   76,  831,   76,
      252,  288,   76,   76,  200,  253,  200,   76,  200,  337,
      721,  252,  721,  721,  515,  886,  516,  577,  852,  474,
      852,  852,  963,  831,  252,  886,  338,  831,  891,  253,
       76,  200,   76,  677,  252,  252,  475,  831,  515,  253,
      516,  681,  242,  886,  242,  254,  962,  960,  515,  721,
      516,  721,  721,  886,  243,  831,  960,   88,  722,   88,
      201,  198,  199,  198,  198,  840,   71,  200,  200,  201,
      202,  959,   76,   76,  600,  957,   76,  852,   76,  852,

      852,   76,   76,  200,  252,  200,   76,  200,  236,  253,
     1000,  252,  242,  236,  242,  254,  253,  722,  515,  923,
      516,  385,  252, 1000,  243,  515,  253,  408,  252,   76,
      200,   76,  385,  253,  956,  590,  239,  388,  840,  252,
     1000,  955,  515,  326,  408,  690,  690,  690,  690,  925,
      691,  326,  239, 1000,  603,  692,   88,  932,   88,  201,
      212,  212,   65,  212,  212,  212,  212,  213,  213,  213,
      213,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  212,  213,  212,  213,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  214,  214,  214,  214,  214,  214,  214,  212,
      213,  212,  212,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  212,  212,  212,  213,
      212,  212,   65,  212,  212,  212,  212,  213,  213,  213,
      213,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  213,  212,  213,  212,  213,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  212,
      213,  212,  212,  215,  215,  215,  215,  215,  215,  215,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  212,  212,  212,  213,
      219,  219,  220,  219,  219,  219,  219,  221,  221,  221,
      221,  219,  219,  219,  219,  219,  219,  222,  219,  219,
      223,  219,  219,  221,  219,  221,  219,  224,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  219,
      224,  219,  219,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  219,  219,  219,  221,

      235,  886,  235,  235,  952,  225,  235,  235,  950,  235,
      932,  235,  235,  831, 1000,  235,  773,  235,  773,  773,
      235,  235,  235,  923,  235,  235,  235, 1000,  625,  625,
      625,  625,  335, 1000,  335,  335,  335,  948,  335,  335,
      402,  886,  925,  336,  947,  402, 1000,  336,  235,  235,
      235,  627,  458,  831,  885,  350,  594,  594,  594,  594,
      391,  391,  885,  350,  656,  656,  656,  656,  391,  657,
      594,  594,  594,  594,  658,  235,  774,  235,  225,  596,
      399,  775, 1000,  225,  225,  942,  337,  225,  642,  225,
      337,  925,  225,  596,  399, 1000,  242,  225,  941,  252,

      641,  940,  225,  338,  253,  243,  773,  338,  773,  773,
      252,  886,  886,  515,  831,  516,  937,  252,  625,  625,
      625,  625,  253,  831,  831,  242,  936,  242,  254,  935,
      225,  515,  335,  516,  335,  335,  904,  243,  904,  904,
      934,  627,  458,  336,  933,  335,  932,  335,  335,  690,
      690,  690,  690,  499,  691,  225,  336,  225,  225,  692,
      662,  499,  831,  225,  225,  252,  774,  225,  886,  225,
      253,  775,  225,  241, 1000,  241,  254,  225,  665,  256,
      831,  257,  225,  925,  922,  243,  337, 1000,  625,  625,
      625,  625,  247,  385,  939,  885,  939,  939,  253,  337,

      297,  905,  297,  338,  385,  921,  247,  590,  777,  408,
      225,  627,  458,  886,  706,  247,  338,  397,  397,  397,
      397,  857, 1000,  857,  857,  831,  297, 1000,  902,  335,
      901,  335,  335, 1000,  501,  225,  858,  225,  225,  501,
      336,  399,  925,  225,  225,  252, 1000,  225,  900,  225,
      253, 1000,  225,  241,  885,  241,  254,  225,  252,  256,
      923,  257,  225,  253, 1000,  243,  899,  758,  252,  252,
      896,  859,  515,  253,  516,  297,  242,  297,  242,  254,
      895,  894,  515,  337,  516,  893,  886,  892,  243,  763,
      225,  886,  456,  456,  456,  456,  886, 1000,  831,  258,

      338,  297, 1000, 1000,  724,  929,  243,  831,  259,  886,
      397,  397,  397,  397,  727,  225,  458,  225,  225,  518,
      249,  518,  518,  225,  225,  252,  887,  225,  249,  225,
      253,  666,  225,  225,  399,  225,  252,  225,  225,  515,
     1000,  408,  225,  252,  456,  456,  456,  456,  253,  925,
      987,  831,  885, 1000,  252,  252,  393,  515,  393,  516,
      253,  885,  979,  242,  393,  242,  254,  252,  458,  515,
      225,  516,  253,  519,  335,  243,  335,  335,  252, 1000,
      866,  515,  865,  516,  939,  336,  939,  939,  923,  862,
      520,  943, 1000,  943,  943,  225,  860,  225,  225,  274,

      274,  274,  274,  225,  225,  275,  776,  225,  335,  225,
      335,  335,  225,  409,  677,  855,  242,  225,  779,  336,
      369, 1000,  225,  369,  409,  243,  813,  252,  337,  409,
      925,  369,  253,  930, 1000,  242,  801,  242,  254,  854,
      499,  515,  885,  516,  252,  338,  853,  243,  499,  253,
      225,  944,  851,  850,  820,  252,  820,  820,  515,  849,
      516,  820,  337,  820,  820,  681,  571,  857,  249,  857,
      857,  958,  681,  958,  958,  225,  249,  225,  285,  338,
      285,  285,  858,  282,  285,  285,  816,  285,  846,  285,
      285,  845,  844,  285,  943,  285,  943,  943,  285,  285,

      285,  886,  285,  285,  285,  861,  831,  906,  821,  906,
      906,  987,  843,  831,  889,  821,  958,  859,  958,  958,
      842,  841,  907,  979, 1000,  822,  285,  285,  285,  681,
      252,  885,  822,  925, 1000,  253,  681, 1000,  242,  823,
      242,  254,  815,  923,  515,  885,  516, 1000,  812,  820,
      243,  820,  820,  285,  944,  285,  235,  859,  235,  235,
      681,  225,  235,  235,  454,  235,  454,  235,  235,  811,
      810,  235,  454,  235, 1000,  677,  235,  235,  235,  809,
      235,  235,  235,  925,  808,  807,  806, 1000,  885, 1000,
      904,  863,  904,  904,  953,  885,  926,  805,  925,  804,

      886,  803, 1000,  821,  235,  235,  235,  987, 1000,  927,
      885,  890,  831,  411, 1000,  797,  979,  925,  987,  979,
      822, 1000,  796,  925,  681,  795,  794, 1000, 1000,  885,
      979,  235,  793,  235,  225,  885,  928,  925, 1000,  225,
      225, 1000,  599,  225,  792,  225,  791,  925,  225,  885,
      749, 1000,  242,  225,  906,  905,  906,  906,  225,  885,
      749,  243,  737,  518,  886,  518,  518,  945,  886,  907,
      778,  677,  777,  945,  886, 1000,  831,  720, 1000,  243,
      831,  889,  677,  243,  925, 1000,  225,  925, 1000,  885,
     1000, 1000, 1000,  718,  925,  718,  885,  395, 1000,  923,

      395,  923,  772, 1000,  859, 1000,  885,  965,  395,  966,
      965,  225,  885,  225,  225,  771,  770,  519,  925,  225,
      225,  252, 1000,  225,  987,  225,  253,  979,  225,  241,
      769,  241,  254,  225,  520,  256,  979,  257,  225, 1000,
      970,  243,  970,  970,  768,  767,  964,  965,  923,  966,
      965,  966, 1000,  966,  966,  967, 1000,  766,  923,  765,
      954,  970, 1000,  970,  970,  923,  225,  764,  991, 1000,
      991,  991,  994,  759,  995,  994,  991,  758,  991,  991,
      987,  757,  756,  925,  755,  754,  753, 1000,  677, 1000,
      859,  225,  979,  225,  410,  967,  752,  410,  923,  985,

      751,  409, 1000,  410,  885,  369,  984,  410,  369,  410,
      409,  859,  409,  410,  410,  749,  369,  409,  411,  749,
      996,  412,  413,  414,  415,  416,  410,  410,  417,  418,
      410,  419,  420,  410,  410,  421,  422,  410,  423,  424,
      425,  426,  726,  990,  677,  725,  427,  428,  429,  430,
      431,  410,  410,  432,  433,  434,  435,  410,  410,  436,
      437,  410,  438,  439,  440,  441,  410,  410,  410,  225,
      995,  723,  995,  995,  225,  225,  252,  459,  225,  459,
      225,  253, 1000,  225,  241,  459,  241,  254,  225,  987,
      256,  923,  257,  225,  979, 1000,  243,  994,  720,  995,

      994,  979,  889,  518,  718,  518,  518,  485,  923,  485,
      718,  409, 1000,  509,  886,  485,  507,  505,  997,  716,
      409,  225,  409,  507,  715,  505,  593,  409,  505,  593,
      998,  507,  442,  505,  391,  391,  393,  593,  393,  712,
      395,  395,  391,  395,  393,  996,  225,  711,  225,  225,
      710,  395,  507,  677,  225,  225,  709,  519,  225,  507,
      225,  253,  707,  225,  225,  701,  225,  507,  225,  524,
      524,  700,  449,  225,  520,  505,  454,  524,  454,  459,
      485,  459,  485,  505,  454,  699,  505,  459,  485,  524,
      524,  505,  654,  654,  698,  654,  697,  524,  696,  695,

      694,  225,  693,  654,  688,  687,  255,  666,  664,  663,
      660,  659,  509,  653,  385,  652,  651,  650,  649,  648,
      647,  646,  644,  643,  636,  635,  225,  634,  225,  285,
      633,  285,  285,  632,  282,  285,  285,  631,  285,  630,
      285,  285,  629,  628,  285,  559,  285,  623,  255,  285,
      285,  285,  611,  285,  285,  285,  525,  604,  602,  601,
      252,  598,  597,  592,  506,  503,  588,  587,  586,  585,
      584,  583,  582,  581,  580,  579,  578,  285,  285,  285,
      486,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  460,  455,  557,  526,  526,  411,  525,  523,  405,

      513,  512,  510,  509,  285,  394,  285,  477,  392,  477,
      477,  506,  237,  498,  478,  373,  478,  497,  479,  480,
      496,  493,  492,  491,  490,  489,  488,  487,  486,  478,
      343,  471,  470,  478,  468,  467,  466,  465,  464,  463,
      462,  306,  460,  455,  453,  452,  450,  447,  405,  401,
      400,  396,  237,  243,  394,  392,  478,  384,  383,  375,
      373,  481,  373,  358,  245,  342,  318,  316,  314,  312,
      310,  308,  238,  306,  287,  245,  280,  278,  482,  244,
      243,  238,  478,  237,  478,  225, 1000, 1000, 1000, 1000,
      225,  225,  252, 1000,  225, 1000,  225,  253, 1000,  225,

      241, 1000,  241,  254,  225, 1000,  256, 1000,  257,  225,
     1000, 1000,  243, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  225, 1000, 1000,
     1000, 1000,  552, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  225, 1000,  225,  225, 1000, 1000, 1000, 1000,
      225,  225,  252, 1000,  225, 1000,  225,  253, 1000,  225,
      241, 1000,  241,  254,  225, 1000,  553, 1000,  257,  225,
     1000, 1000,  243, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  225, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  225, 1000,  225,  225, 1000, 1000, 1000, 1000,
      225,  225, 1000, 1000,  225, 1000,  225,  253, 1000,  225,
      225, 1000,  225, 1000,  225, 1000, 1000, 1000,  449,  225,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  225, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  225, 1000,  225,  477, 1000,  477,  477, 1000,
     1000, 1000,  478, 1000,  478, 1000,  479,  480, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  478, 1000, 1000,
     1000,  478, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  478, 1000, 1000, 1000, 1000,  481,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  482, 1000, 1000, 1000,

      478, 1000,  478,  477, 1000,  477,  477, 1000, 1000, 1000,
      478, 1000,  478, 1000,  479,  480, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  478, 1000, 1000, 1000,  478,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  478, 1000, 1000, 1000, 1000,  481, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  482, 1000, 1000, 1000,  478, 1000,
      478,  477, 1000,  477,  477, 1000, 1000, 1000,  478, 1000,
      478, 1000,  479,  480, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000,  478, 1000, 1000, 1000,  478, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      478, 1000, 1000, 1000, 1000,  481, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  574, 1000, 1000, 1000,
     1000, 1000,  482, 1000, 1000, 1000,  478, 1000,  478,  477,
     1000,  477,  477, 1000, 1000, 1000,  478, 1000,  478, 1000,
      479,  480, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  478, 1000, 1000, 1000,  478, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  478, 1000,
     1000, 1000, 1000,  481, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  575, 1000, 1000, 1000, 1000, 1000,
      482, 1000, 1000, 1000,  478, 1000,  478,  225, 1000, 1000,
     1000, 1000,  225,  225,  252, 1000,  225, 1000,  225,  253,
     1000,  225,  241, 1000,  241,  254,  225, 1000,  553, 1000,
      257,  225, 1000, 1000,  243, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  225,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  225, 1000,  225,  618, 1000,  618,
      618,  618,  618,  618,  253, 1000, 1000,  618, 1000,  618,
      618,  618,  618,  619,  618,  408,  618, 1000,  618,  618,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  618,  225, 1000, 1000, 1000, 1000,  225,  225,  252,

     1000,  225, 1000,  225,  253, 1000,  225,  241, 1000,  241,
      254,  225, 1000,  553, 1000,  257,  225, 1000, 1000,  243,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  225, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  621, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  225,
     1000,  225,  477, 1000,  477,  477, 1000, 1000, 1000,  478,
     1000,  478, 1000,  479,  480, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  478, 1000, 1000, 1000,  478, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  478, 1000, 1000, 1000, 1000,  481, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  639, 1000, 1000, 1000,
     1000, 1000, 1000,  482, 1000, 1000, 1000,  478, 1000,  478,
      477, 1000,  477,  477, 1000, 1000, 1000,  478, 1000,  478,
     1000,  479,  480, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  478, 1000, 1000, 1000,  478, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  478,

     1000, 1000, 1000, 1000,  481, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  640, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  482, 1000, 1000, 1000,  478, 1000,  478,  618, 1000,
      618,  618,  618,  618,  618,  677, 1000, 1000,  618, 1000,
      618,  618,  618,  618,  618,  618, 1000,  618, 1000,  618,
      618, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  679,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  677,

     1000, 1000,  680,  681,  681, 1000,  681,  681,  682, 1000,
      682,  682,  682,  682,  682,  683,  681,  681,  682,  681,
      682,  682,  682,  684,  685,  682,  681,  682, 1000,  682,
      682,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  681,  681,  681,  681,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  683,
      681,  681,  682,  477, 1000,  477,  477, 1000, 1000, 1000,
      478, 1000,  478, 1000,  479,  480, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000,  478, 1000, 1000, 1000,  478,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  478, 1000, 1000, 1000, 1000,  481, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  704, 1000, 1000,  482, 1000, 1000, 1000,  478, 1000,
      478,  477, 1000,  477,  477, 1000, 1000, 1000,  478, 1000,
      478, 1000,  479,  480, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  478, 1000, 1000, 1000,  478, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      478, 1000, 1000,  705, 1000,  481, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  482, 1000, 1000, 1000,  478, 1000,  478,  618,
     1000,  619,  618,  618,  618,  618,  736, 1000, 1000,  618,
     1000,  618,  619,  618, 1000,  738,  618,  516,  618, 1000,
      618,  618, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      677, 1000, 1000,  618,  618, 1000,  619,  618,  618,  618,
      618,  736, 1000, 1000,  618, 1000,  618,  619,  618, 1000,
      738,  618,  516,  618, 1000,  618,  618, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  739, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  677, 1000, 1000,  618,  618,
     1000,  618,  618,  618,  618,  618,  677, 1000, 1000,  618,

     1000,  618,  618,  618,  618,  618,  618, 1000,  618, 1000,
      618,  618, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      677, 1000, 1000,  618,  681,  681, 1000,  681,  681, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  681,  681,  681, 1000,
      681, 1000, 1000, 1000, 1000, 1000, 1000,  681, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  681,  681,  681,  681, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      681,  681,  681,  681,  681, 1000,  681,  681, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  683,  681,  681, 1000,  681,
     1000, 1000, 1000, 1000, 1000, 1000,  681, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  681,  681,  681,  681, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  683,
      681,  681,  681,  681, 1000,  681,  681, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  681,  743,  681, 1000,  681, 1000,
     1000, 1000, 1000, 1000, 1000,  681, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  681,  681,  681,  681, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  681,  681,

      743,  681,  681, 1000,  681,  681,  682, 1000,  682,  682,
      682,  682,  682,  683,  681,  681,  682,  681,  682,  682,
      682,  684,  685,  682,  681,  682, 1000,  682,  682,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      681,  681,  681,  681,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  683,  681,  681,
      682,  681,  681, 1000,  681,  681,  682, 1000,  682,  682,
      682,  682,  682,  744,  681,  681,  682,  681,  682,  682,

      682,  682,  682,  682,  745,  682, 1000,  682,  682,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      681,  681,  681,  681,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  746,  683,  681,  681,
      682,  225, 1000, 1000, 1000, 1000,  225,  225,  252, 1000,
      225, 1000,  225,  253, 1000,  225,  241, 1000,  241,  254,
      225, 1000,  256, 1000,  257,  225, 1000, 1000,  243, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  225, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  747, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  225, 1000,
      225,  477, 1000,  477,  477, 1000, 1000, 1000,  478, 1000,
      478, 1000,  479,  480, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  478, 1000, 1000, 1000,  478, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      478, 1000, 1000, 1000, 1000,  481, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  482, 1000, 1000, 1000,  478, 1000,  478,  477,
     1000,  477,  477, 1000, 1000, 1000,  478, 1000,  478, 1000,
      479,  480, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  478, 1000, 1000, 1000,  478, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  478, 1000,
     1000, 1000, 1000,  481, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  762, 1000,
      482, 1000, 1000, 1000,  478, 1000,  478,  404, 1000, 1000,

      404,  734, 1000,  734,  734,  734, 1000,  734, 1000,  783,
      404,  734,  404,  734,  734,  734, 1000, 1000,  734,  404,
      734,  404,  734,  734, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  735,  734,  618, 1000,  618,  618,
      618,  618,  618,  736, 1000, 1000,  618, 1000,  618,  618,
      618, 1000,  618,  618,  449,  618, 1000,  618,  618, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  677, 1000, 1000,
      618,  681,  681, 1000,  681,  681, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  683,  681,  681, 1000,  681, 1000, 1000,
     1000, 1000, 1000, 1000,  681, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

      681,  681,  681,  681, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  683,  681,  681,
      681,  681, 1000,  681,  681, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  683,  743,  681, 1000,  681, 1000, 1000, 1000,
     1000, 1000, 1000,  681, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  681,
      681,  681,  681, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000,  683,  681,  743,  681,
      786, 1000,  681,  786,  742, 1000,  742,  742,  742, 1000,
      742,  681,  788,  786,  742,  786,  742,  742,  742, 1000,
     1000,  742,  786,  742,  404,  742,  742, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  681,  681,
      681,  681, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  681,  681,  743,  742,  225,
     1000, 1000, 1000, 1000,  225,  225,  252, 1000,  225, 1000,

      225,  253, 1000,  225,  241, 1000,  241,  254,  225, 1000,
      256, 1000,  257,  225, 1000, 1000,  243, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  225, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  790, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  225, 1000,  225,  477,
     1000,  477,  477, 1000, 1000, 1000,  478, 1000,  478, 1000,
      479,  480, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  478, 1000, 1000, 1000,  478, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  478, 1000,
     1000, 1000, 1000,  481, 1000, 1000, 1000, 1000, 1000,  800,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      482, 1000, 1000, 1000,  478, 1000,  478,  404, 1000, 1000,
      404,  734, 1000,  734,  734,  734, 1000,  734, 1000,  783,
      404,  734,  404,  734,  734,  734, 1000, 1000,  734,  404,
      734,  404,  734,  734, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  735,  734,  618, 1000,  618,  618,
      618,  618,  618,  736, 1000, 1000,  618, 1000,  618,  618,
      618, 1000,  618,  618,  449,  618, 1000,  618,  618, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  677, 1000, 1000,

      618,  681,  786, 1000,  681,  786,  741, 1000,  741,  741,
      741, 1000,  741,  681,  819,  786,  741,  786,  741,  741,
      741, 1000, 1000,  741,  786,  741,  404,  741,  741, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      681,  681,  681,  681, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  681,  681,  681,
      741,  681,  786, 1000,  681,  786,  742, 1000,  742,  742,
      742, 1000,  742,  683,  788,  786,  742,  786,  742,  742,

      742, 1000, 1000,  742,  786,  742,  404,  742,  742, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      681,  681,  681,  681, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  683,  681,  743,
      742,  824, 1000,  824,  824,  825, 1000, 1000, 1000,  826,
      827, 1000,  828, 1000,  829,  830,  831,  832, 1000,  833,
     1000, 1000, 1000,  834,  835,  836, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  837,
     1000, 1000,  838, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  255, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  839, 1000,  840,
      477, 1000,  477,  477, 1000, 1000, 1000,  478, 1000,  478,
     1000,  479,  480, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  478, 1000, 1000, 1000,  478, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  478,
     1000, 1000, 1000, 1000,  481, 1000, 1000, 1000, 1000, 1000,

     1000, 1000,  848, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  482, 1000, 1000, 1000,  478, 1000,  478,  681,  786,
     1000,  681,  786,  741, 1000,  741,  741,  741, 1000,  741,
      683,  819,  786,  741,  786,  741,  741,  741, 1000, 1000,
      741,  786,  741,  404,  741,  741, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  681,  681,  681,
      681, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  683,  681,  681,  741,  868, 1000,

      824,  868,  869, 1000, 1000, 1000,  870,  871, 1000,  872,
     1000,  873,  874,  831,  875, 1000,  876, 1000, 1000, 1000,
      877,  878,  879, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  880, 1000, 1000,  881,
     1000, 1000, 1000,  882, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  883, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  884, 1000,  885,  225, 1000, 1000,
     1000, 1000,  225,  225, 1000, 1000,  225, 1000,  225,  886,
     1000,  225,  888, 1000, 1000,  242,  225, 1000, 1000, 1000,

     1000,  840, 1000, 1000,  243, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  225,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  225, 1000,  225,  225, 1000, 1000,
     1000, 1000,  225,  225, 1000, 1000,  225, 1000,  225,  886,
     1000,  225, 1000, 1000,  888,  242,  225, 1000, 1000, 1000,
     1000,  840,  889, 1000,  243, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  225,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  225, 1000,  225,  410, 1000, 1000,
      410, 1000, 1000, 1000, 1000, 1000,  410, 1000,  886, 1000,
      410, 1000,  410, 1000, 1000, 1000,  410,  410, 1000,  890,
      831,  411, 1000, 1000,  412,  413,  414,  415,  416,  410,
      410,  417,  418,  410,  419,  420,  410,  410,  421,  422,
      410,  423,  424,  425,  426, 1000, 1000, 1000, 1000,  427,
      428,  429,  430,  431,  410,  410,  432,  433,  434,  435,

      410,  410,  436,  437,  410,  438,  439,  440,  441,  410,
      410,  410,  477, 1000,  477,  477, 1000, 1000, 1000,  478,
     1000,  478, 1000,  479,  480, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  478, 1000, 1000, 1000,  478, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  478, 1000, 1000, 1000, 1000,  481, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  482, 1000, 1000, 1000,  478, 1000,  478,
      824, 1000,  824,  824,  908, 1000,  252, 1000,  909,  827,

     1000,  828, 1000,  910,  911,  831,  912,  252,  913, 1000,
      515, 1000,  914,  915,  836, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  837, 1000,
     1000,  916, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  917, 1000,  831,  824,
     1000,  824,  824,  908, 1000,  252, 1000,  909,  827, 1000,
      828, 1000,  910,  918,  831,  919,  254,  913, 1000,  515,
     1000,  914,  915,  836, 1000,  243, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  837, 1000, 1000,
      916, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  917, 1000,  831,  868, 1000,
      824,  868,  869, 1000, 1000, 1000,  870,  871, 1000,  924,
     1000,  873,  874,  831,  875, 1000,  876, 1000, 1000, 1000,
      877,  878,  879, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  880, 1000, 1000,  881,

     1000, 1000, 1000,  882, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  883, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  884, 1000,  885,  824, 1000,  824,
      824,  971, 1000, 1000, 1000,  972,  973, 1000,  974, 1000,
      910,  975,  831,  976, 1000,  977, 1000, 1000, 1000,  914,
      978,  836, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  837, 1000, 1000,  916, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  737, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000,  917, 1000,  979,  980,  980,  814,  980,
      980,  981,  814,  981,  981,  981,  981,  981,  982,  980,
      980,  981,  980,  981,  981,  981, 1000,  981,  981,  980,
      981,  814,  981,  981, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  980,  980,  980,  980, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  982,  980,  980,  981,  404, 1000, 1000,  404,
      734, 1000,  734,  734,  734, 1000,  734, 1000,  988,  404,

      734,  404,  734,  734,  734, 1000, 1000,  734,  404,  734,
      404,  734,  734, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  735,  734,  681,  681, 1000,  681,  681,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  681,  743,  681,
     1000,  681, 1000, 1000, 1000, 1000, 1000, 1000,  681, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  681,  681,  681,  681, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  681,  681,  743,  931, 1000, 1000,  931,  734, 1000,
      734,  734,  734, 1000,  734, 1000,  993,  931,  734,  931,
      734,  734,  734, 1000, 1000,  734,  931,  734,  931,  734,
      734, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  735,  734,  931, 1000, 1000,  931,  734, 1000,  734,
      734,  734, 1000,  734, 1000,  993,  931,  734,  931,  734,
      734,  734, 1000, 1000,  734,  931,  734,  931,  734,  734,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

      735,  734,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   96,   96,   96,   96,   96,   96,   96,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,

       99,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,

      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  145,

      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  157,  157,

      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  157,  157,  157,  157,  157,  157,  157,  157,  157,
      157,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  161,  161,  161,  161,  161,  161,
      161,  161,  161,  161,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  177,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  216,  216,  216,  216,  216,

      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  225, 1000,
     1000, 1000,  225,  225, 1000, 1000,  225, 1000,  225, 1000,
     1000,  225,  225, 1000,  225, 1000,  225,  225, 1000, 1000,
     1000,  225, 1000, 1000, 1000,  225, 1000, 1000, 1000, 1000,
      225,  234,  234, 1000,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  241, 1000, 1000, 1000,  241,  241,

     1000, 1000,  241, 1000,  241, 1000, 1000,  241,  241, 1000,
      241,  241,  241,  241, 1000, 1000, 1000,  241, 1000, 1000,
      241,  241, 1000, 1000, 1000, 1000,  241,  242, 1000,  242,
      242, 1000,  242, 1000, 1000, 1000, 1000, 1000, 1000,  242,
      242,  249,  249,  249,  249, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  249, 1000, 1000,  249, 1000,  249,
     1000,  249,  249, 1000,  249, 1000, 1000,  249,  255, 1000,
     1000, 1000,  255,  255,  255, 1000,  255, 1000,  255,  255,
     1000,  255,  255, 1000,  255,  255,  255,  255,  255, 1000,
      255,  255, 1000, 1000,  255,  255, 1000, 1000, 1000, 1000,

      255,  265, 1000, 1000, 1000,  265,  265, 1000, 1000,  265,
     1000,  265, 1000, 1000,  265,  265, 1000,  265, 1000,  265,
      265, 1000, 1000, 1000,  265, 1000, 1000, 1000,  265, 1000,
     1000, 1000, 1000,  265,  279,  279, 1000,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
     1000,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  282, 1000, 1000,
     1000,  282,  282, 1000, 1000,  282, 1000,  282, 1000, 1000,
      282,  282, 1000,  282, 1000,  282,  282, 1000, 1000, 1000,
      282, 1000, 1000, 1000,  282, 1000, 1000, 1000, 1000,  282,

      284,  284, 1000,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  290,  290,  290,  290, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  290, 1000, 1000,  290,
     1000,  290, 1000,  290,  290, 1000,  290, 1000, 1000,  290,
      291, 1000, 1000, 1000,  291, 1000, 1000, 1000,  291, 1000,
      291, 1000, 1000,  291,  291, 1000,  291, 1000,  291,  291,
     1000, 1000, 1000,  291, 1000, 1000, 1000,  291, 1000, 1000,
     1000, 1000,  291,  295,  295,  295,  295, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000,  295, 1000, 1000,  295,
     1000,  295, 1000,  295,  295, 1000,  295, 1000, 1000,  295,
      299, 1000,  299, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  299, 1000,
     1000, 1000,  299, 1000, 1000, 1000,  299,  301, 1000, 1000,
     1000,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      302,  302, 1000,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302, 1000,  302,  302, 1000,
      302,  302,  302,  307,  307, 1000,  307,  307,  307,  307,
     1000,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307, 1000,
      307,  307, 1000,  307,  307,  307,  309,  309, 1000,  309,
      309,  309,  309, 1000,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309, 1000,  309,  309, 1000,  309,  309,  309,  311,
      311, 1000,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311, 1000,  311,  311, 1000,  311,
      311,  311,  313,  313, 1000,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313, 1000,  313,
      313, 1000,  313,  313,  313,  315,  315, 1000,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315, 1000,  315,  315, 1000,  315,  315,  315,  317,  317,
     1000,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  317,  317,  317, 1000,  317,  317, 1000,  317,  317,
      317,  319, 1000, 1000,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319, 1000,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  323,  323, 1000,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  329,  329, 1000,
      329,  329, 1000,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,

      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      330, 1000,  330,  330,  330,  330,  330, 1000, 1000, 1000,
     1000, 1000, 1000,  330, 1000,  330,  333,  333, 1000, 1000,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  334,
      334, 1000,  334,  334,  334,  334, 1000,  334, 1000,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334, 1000,  334,  334,  334, 1000,  334,  334, 1000, 1000,
     1000,  334,  344, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000,  344,  344, 1000,  344,  344, 1000, 1000, 1000,
     1000, 1000, 1000,  344,  346, 1000, 1000, 1000,  346, 1000,
     1000, 1000,  346, 1000,  346, 1000, 1000,  346,  346, 1000,
      346, 1000,  346,  346, 1000, 1000, 1000,  346, 1000, 1000,
     1000,  346, 1000, 1000, 1000, 1000,  346,  350,  350,  350,
      350, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      350, 1000, 1000,  350, 1000,  350, 1000,  350,  350, 1000,
      350, 1000, 1000,  350,  353, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  353, 1000,  353,  353,  353,  353,  353, 1000,
     1000, 1000, 1000, 1000, 1000,  353,  225, 1000, 1000, 1000,

      225,  225, 1000, 1000,  225, 1000,  225, 1000, 1000,  225,
      225, 1000,  225, 1000,  225,  225, 1000, 1000, 1000,  225,
     1000, 1000, 1000,  225, 1000, 1000, 1000, 1000,  225,  357,
      357, 1000,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357, 1000,  357,  357, 1000,  357,
      357,  357,  371, 1000,  371, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  371, 1000, 1000,
      371, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  371,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374, 1000,  374,
      374, 1000,  374,  374,  374,  374,  374,  374, 1000, 1000,
      374, 1000,  374,  374,  374,  234,  234, 1000,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  235,  235,
     1000,  235,  235,  235,  235,  235,  235,  235,  235,  235,

      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  386, 1000, 1000, 1000, 1000,  386, 1000, 1000, 1000,
     1000, 1000,  386, 1000,  386,  386, 1000,  386, 1000, 1000,
     1000, 1000,  386,  241, 1000, 1000, 1000,  241,  241, 1000,
     1000,  241, 1000,  241, 1000, 1000,  241,  241, 1000,  241,
      241,  241,  241, 1000, 1000, 1000,  241, 1000, 1000,  241,
      241, 1000, 1000, 1000, 1000,  241,  242, 1000,  242,  242,
     1000,  242, 1000, 1000, 1000, 1000, 1000, 1000,  242,  242,
      398,  398,  398, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  398, 1000,
     1000, 1000, 1000,  398, 1000, 1000,  398,  404, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  404, 1000, 1000,  404,  404,
     1000,  404, 1000, 1000, 1000,  404,  404, 1000,  404, 1000,
      404, 1000, 1000,  404,  406, 1000,  406,  406, 1000,  406,
     1000, 1000, 1000, 1000, 1000, 1000,  406,  406, 1000, 1000,
     1000, 1000,  406,  255, 1000, 1000, 1000,  255,  255,  255,
     1000,  255, 1000,  255,  255, 1000,  255,  255, 1000,  255,
      255,  255,  255,  255, 1000,  255,  255, 1000, 1000,  255,
      255, 1000, 1000, 1000, 1000,  255,  448, 1000, 1000, 1000,

      448,  448, 1000, 1000,  448, 1000,  448,  448, 1000,  448,
      448, 1000,  448, 1000,  448,  448, 1000, 1000,  448,  448,
     1000, 1000, 1000,  448, 1000, 1000, 1000, 1000,  448,  279,
      279, 1000,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279, 1000,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  282, 1000, 1000, 1000,  282,  282, 1000, 1000,
      282, 1000,  282, 1000, 1000,  282,  282, 1000,  282, 1000,
      282,  282, 1000, 1000, 1000,  282, 1000, 1000, 1000,  282,
     1000, 1000, 1000, 1000,  282,  284,  284, 1000,  284,  284,

      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  285,  285,
     1000,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  457,  457,  457, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  457,
     1000, 1000, 1000, 1000,  457, 1000, 1000,  457,  291, 1000,
     1000, 1000,  291, 1000, 1000, 1000,  291, 1000,  291, 1000,

     1000,  291,  291, 1000,  291, 1000,  291,  291, 1000, 1000,
     1000,  291, 1000, 1000, 1000,  291, 1000, 1000, 1000, 1000,
      291,  299, 1000,  299, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  299,
     1000, 1000, 1000,  299, 1000, 1000, 1000,  299,  301, 1000,
     1000, 1000,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  301,  301,  301,  301,  301,  301,  301,  301,
      301,  302,  302, 1000,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,

      302,  302,  302,  302,  302,  302,  302, 1000,  302,  302,
     1000,  302,  302,  302,  307,  307, 1000,  307,  307,  307,
      307, 1000,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
     1000,  307,  307, 1000,  307,  307,  307,  309,  309, 1000,
      309,  309,  309,  309, 1000,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309, 1000,  309,  309, 1000,  309,  309,  309,
      311,  311, 1000,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,

      311,  311,  311,  311,  311,  311, 1000,  311,  311, 1000,
      311,  311,  311,  313,  313, 1000,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313, 1000,
      313,  313, 1000,  313,  313,  313,  315,  315, 1000,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315, 1000,  315,  315, 1000,  315,  315,  315,  317,
      317, 1000,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,

      317,  317,  317,  317,  317, 1000,  317,  317, 1000,  317,
      317,  317,  319, 1000, 1000,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319, 1000,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  323,  323, 1000,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  324,  324,
     1000,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  329,  329, 1000,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  329,  329,  329,  330, 1000,  330,  330,  330,  330,
      330, 1000, 1000, 1000, 1000, 1000, 1000,  330, 1000,  330,
      472, 1000,  472, 1000,  472,  472,  472, 1000, 1000, 1000,
     1000, 1000, 1000,  472, 1000,  472,  333,  333, 1000, 1000,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,

      333,  333,  333,  333,  333,  333,  333,  333,  333,  334,
      334, 1000,  334,  334,  334,  334, 1000,  334, 1000,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334, 1000,  334,  334,  334, 1000,  334,  334, 1000, 1000,
     1000,  334,  476,  476, 1000,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  344, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000,  344,  344, 1000,  344,  344,
     1000, 1000, 1000, 1000, 1000, 1000,  344,  346, 1000, 1000,

     1000,  346, 1000, 1000, 1000,  346, 1000,  346, 1000, 1000,
      346,  346, 1000,  346, 1000,  346,  346, 1000, 1000, 1000,
      346, 1000, 1000, 1000,  346, 1000, 1000, 1000, 1000,  346,
      353, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  353, 1000,
      353,  353,  353,  353,  353, 1000, 1000, 1000, 1000, 1000,
     1000,  353,  357,  357, 1000,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357, 1000,  357,
      357, 1000,  357,  357,  357,  371, 1000,  371, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

      371, 1000, 1000,  371, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  371,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  374,  374,  374,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
      374, 1000,  374,  374, 1000,  374,  374,  374,  374,  374,
      374, 1000, 1000,  374, 1000,  374,  374,  374,  386, 1000,
     1000, 1000, 1000,  386, 1000, 1000, 1000, 1000, 1000,  386,
     1000,  386,  386, 1000,  386, 1000, 1000, 1000, 1000,  386,

      502, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  502, 1000,
     1000, 1000,  502, 1000,  502, 1000, 1000, 1000,  502,  502,
     1000, 1000, 1000,  502, 1000, 1000,  502,  508,  508, 1000,
      508,  508,  508,  508, 1000,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      511,  511,  511, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  511, 1000, 1000,  511,  398,  398,  398,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000,  398, 1000, 1000, 1000, 1000,
      398, 1000, 1000,  398,  514, 1000, 1000, 1000, 1000,  514,
     1000, 1000, 1000, 1000, 1000,  514, 1000,  514,  514, 1000,
      514, 1000, 1000, 1000, 1000,  514,  404, 1000, 1000, 1000,
     1000, 1000, 1000, 1000,  404, 1000, 1000,  404,  404, 1000,
      404, 1000, 1000, 1000,  404,  404, 1000,  404, 1000,  404,
     1000, 1000,  404,  521, 1000, 1000, 1000, 1000,  521, 1000,
     1000,  521, 1000,  521,  521, 1000,  521,  521, 1000,  521,
     1000, 1000, 1000,  521,  521,  410, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  410, 1000, 1000, 1000,  410, 1000,  410,

     1000, 1000, 1000,  410,  410, 1000, 1000, 1000,  410, 1000,
     1000,  410,  255, 1000, 1000, 1000,  255,  255,  255, 1000,
      255, 1000,  255,  255, 1000,  255,  255, 1000,  255,  255,
      255,  255,  255, 1000,  255,  255, 1000, 1000,  255,  255,
     1000, 1000, 1000, 1000,  255,  448, 1000, 1000, 1000,  448,
      448, 1000, 1000,  448, 1000,  448,  448, 1000,  448,  448,
     1000,  448, 1000,  448,  448, 1000, 1000,  448,  448, 1000,
     1000, 1000,  448, 1000, 1000, 1000, 1000,  448,  558, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  558, 1000, 1000, 1000,
      558, 1000,  558, 1000, 1000, 1000,  558,  558, 1000, 1000,

     1000,  558, 1000, 1000,  558,  561,  561,  561, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  561, 1000,
     1000,  561,  457,  457,  457, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      457, 1000, 1000, 1000, 1000,  457, 1000, 1000,  457,  319,
     1000, 1000,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  319,  319, 1000,  319,  319,  319,  319,  319,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  319,
      319,  319,  472, 1000,  472,  472,  472,  472,  472, 1000,

     1000, 1000, 1000, 1000, 1000,  472, 1000,  472,  476,  476,
     1000,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  478,  478, 1000,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  334,  334, 1000,  334,  334,  334,
      334, 1000,  334, 1000,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334, 1000,  334,  334,  334,

     1000,  334,  334, 1000, 1000, 1000,  334,  357,  357, 1000,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  357,  357, 1000,  357,  357, 1000,  357,  357,  357,
      589, 1000, 1000, 1000, 1000,  589, 1000, 1000, 1000, 1000,
     1000,  589, 1000,  589,  589, 1000,  589, 1000, 1000, 1000,
     1000,  589,  502, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      502, 1000, 1000, 1000,  502, 1000,  502, 1000, 1000, 1000,
      502,  502, 1000, 1000, 1000,  502, 1000, 1000,  502,  508,
      508, 1000,  508,  508,  508,  508,  508,  508,  508,  508,

      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  595,  595,  595, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      595, 1000, 1000, 1000,  595,  595, 1000, 1000,  595,  514,
     1000, 1000, 1000, 1000,  514, 1000, 1000, 1000, 1000, 1000,
      514, 1000,  514,  514, 1000,  514, 1000, 1000, 1000, 1000,
      514,  410, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  410,
     1000, 1000, 1000,  410, 1000,  410, 1000, 1000, 1000,  410,
      410, 1000, 1000, 1000,  410, 1000, 1000,  410,  521, 1000,

     1000, 1000, 1000,  521, 1000, 1000,  521, 1000,  521,  521,
     1000,  521,  521, 1000,  521, 1000, 1000, 1000,  521,  521,
      255, 1000, 1000, 1000,  255,  255,  255, 1000,  255, 1000,
      255,  255, 1000,  255,  255, 1000,  255,  255,  255,  255,
      255, 1000,  255,  255, 1000, 1000,  255,  255, 1000, 1000,
     1000, 1000,  255,  620, 1000,  620,  620,  620,  620,  620,
      620, 1000, 1000,  620, 1000,  620,  620,  620,  620,  620,
      620,  620,  620, 1000,  620,  620,  620, 1000, 1000, 1000,
     1000,  620,  558, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
      558, 1000, 1000, 1000,  558, 1000,  558, 1000, 1000, 1000,

      558,  558, 1000, 1000, 1000,  558, 1000, 1000,  558,  626,
      626,  626, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000,  626, 1000, 1000,
     1000,  626,  626, 1000, 1000,  626,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645, 1000,  645,  645,  645,  645,
      645,  645,  645, 1000,  645,  645,  645,  645,  645,  511,
      511,  511, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000,  511,  511, 1000, 1000,  511,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655, 1000,  655,
     1000,  655,  655,  655,  655,  655,  655,  655,  655,  618,
     1000,  618,  618,  618,  618,  618,  618, 1000, 1000,  618,
     1000,  618,  618,  618,  618,  618,  618, 1000,  618, 1000,
      618,  618,  618, 1000, 1000,  618, 1000,  618,  678, 1000,
      678,  678,  678,  678,  678,  678, 1000, 1000,  678, 1000,
      678,  678,  678,  678,  678,  678, 1000,  678, 1000,  678,
      678,  678, 1000, 1000,  678, 1000,  678,  561,  561,  561,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,  561,
      561, 1000, 1000,  561,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689,  689,  689,  689,  689,
      689,  689,  689,  689,  689,  689, 1000,  689, 1000,  689,
      689,  689,  689,  689,  689,  689,  689,  708,  708,  708,
      708,  708,  708,  708,  708,  708,  708,  708,  708,  708,
      708,  708,  708,  708,  708,  708, 1000,  708,  708,  708,
      708,  708,  708,  708, 1000,  708,  708,  708,  708,  708,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,

      717,  717,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      719,  719,  719,  719,  719,  719,  734, 1000,  734,  734,
      734,  734,  734, 1000,  734, 1000,  734, 1000,  734,  734,
      734,  734,  734,  734, 1000,  734, 1000,  734,  734,  734,
     1000, 1000, 1000,  734,  734,  737, 1000,  737,  737,  737,
      737,  737,  737, 1000, 1000,  737, 1000,  737,  737,  737,
      737,  737,  737,  737,  737, 1000,  737,  737,  737, 1000,

     1000,  737, 1000,  737,  740, 1000,  740,  740,  740,  740,
      740,  740, 1000, 1000,  740, 1000,  740,  740,  740,  740,
      740,  740, 1000,  740, 1000,  740,  740,  740, 1000, 1000,
      740, 1000,  740,  741,  741, 1000,  741,  741, 1000,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741, 1000,  741,  741,
      741,  741,  741,  741,  741,  741,  682,  682, 1000,  682,
      682, 1000,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
     1000,  682,  682,  682,  682,  682,  682,  682,  682,  742,

      742, 1000,  742,  742, 1000,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742, 1000,  742,  742,  742,  742,  742,  742,
      742,  742,  255, 1000, 1000, 1000,  255,  255,  255, 1000,
      255, 1000,  255,  255, 1000,  255,  255, 1000,  255,  255,
      255,  255,  255, 1000,  255,  255, 1000, 1000,  255,  255,
     1000, 1000, 1000, 1000,  255,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  750,  750,

      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  478,  478, 1000,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  478,  478,  476,  476, 1000,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  476,  476,
      476,  476,  476,  476,  476,  476,  476,  334,  334, 1000,

      334,  334,  334,  334, 1000,  334, 1000,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334, 1000,
      334,  334,  334, 1000,  334,  334, 1000, 1000, 1000,  334,
      782, 1000, 1000,  782, 1000,  782,  782,  782,  782,  782,
     1000,  782,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782, 1000, 1000, 1000,
      782,  782,  618, 1000,  618,  618,  618,  618,  618,  618,
     1000, 1000,  618, 1000,  618,  618,  618,  618,  618,  618,
     1000,  618, 1000,  618,  618,  618, 1000, 1000,  618, 1000,
      618,  785, 1000,  785,  785,  785,  785,  785,  785, 1000,

     1000,  785, 1000,  785,  785,  785,  785,  785,  785,  785,
      785, 1000,  785,  785,  785, 1000, 1000,  785, 1000,  785,
      787,  787, 1000,  787,  787, 1000,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,  787,  787,  787,
      787,  787,  787,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814, 1000,  814,  814,  814,  814,  814,  814,  814,
     1000,  814,  814,  814,  814,  814,  818,  818, 1000,  818,
      818, 1000,  818,  818,  818,  818,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  818,  818,  818,  818,  818,
      818,  818,  818,  818,  818,  818,  818,  818,  818,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856, 1000,  856,
      856,  856,  856,  856,  856,  856, 1000,  856,  856,  856,
      856,  856,  867,  867, 1000,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  867, 1000,
      867,  867,  867,  867,  867,  867,  867,  867,  867,  867,
      867,  867,  867,  867,  867,  225, 1000, 1000, 1000,  225,
      225, 1000, 1000,  225, 1000,  225,  225, 1000,  225,  225,

     1000,  225, 1000,  225,  225, 1000, 1000, 1000,  225, 1000,
     1000, 1000,  225, 1000, 1000, 1000, 1000,  225,  404, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  404, 1000, 1000,  404,
      404, 1000,  404, 1000, 1000, 1000,  404,  404, 1000,  404,
     1000,  404, 1000, 1000,  404,  241, 1000, 1000, 1000,  241,
      241, 1000, 1000,  241, 1000,  241,  241, 1000,  241,  241,
     1000,  241,  241,  241,  241, 1000, 1000, 1000,  241, 1000,
     1000,  241,  241, 1000, 1000, 1000, 1000,  241,  898,  898,
      898,  898,  898,  898,  898,  898,  898,  898,  898,  898,
      898,  898,  898,  898,  898,  898,  898, 1000,  898,  898,

      898,  898,  898,  898,  898, 1000,  898,  898,  898,  898,
      898,  903,  903,  903,  903,  903,  903,  903,  903,  903,
      903,  903,  903,  903,  903,  903,  903,  903,  903,  903,
     1000,  903,  903,  903,  903,  903,  903,  903, 1000,  903,
      903,  903,  903,  903,  931, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  931, 1000, 1000,  931,  931, 1000,  931, 1000,
     1000, 1000,  931,  931, 1000,  931, 1000,  931, 1000, 1000,
      931,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
     1000,  938,  938,  938,  938,  938,  938,  938, 1000,  938,

      938,  938,  938,  938,  410, 1000, 1000, 1000, 1000, 1000,
     1000, 1000,  410, 1000,  410, 1000,  410, 1000,  410, 1000,
     1000, 1000,  410,  410, 1000,  410,  410,  410, 1000, 1000,
      410,  242, 1000, 1000,  242, 1000,  242,  242, 1000,  242,
     1000, 1000, 1000,  242, 1000, 1000,  242,  242,  949, 1000,
     1000, 1000, 1000, 1000, 1000, 1000,  949, 1000, 1000,  949,
      949, 1000,  949, 1000, 1000, 1000,  949,  949, 1000,  949,
     1000,  949, 1000, 1000,  949,  951, 1000, 1000, 1000, 1000,
     1000, 1000, 1000,  951, 1000, 1000,  951,  951, 1000,  951,
     1000, 1000, 1000,  951,  951, 1000,  951, 1000,  951, 1000,

     1000,  951,  618, 1000,  618,  618,  618,  618,  618,  618,
     1000, 1000,  618, 1000,  618,  618,  618,  618,  618,  618,
     1000,  618, 1000,  618,  618,  618, 1000, 1000,  618, 1000,
      618,  782, 1000, 1000,  782, 1000,  782,  782,  782,  782,
      782, 1000,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  782,  782,  782,  782,  782,  782, 1000, 1000,
     1000,  782,  782,  742,  742, 1000,  742,  742, 1000,  742,
      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
      742,  742,  742,  742,  742,  742,  742, 1000,  742,  742,
      742,  742,  742,  742,  742,  742,  992, 1000, 1000,  992,

     1000,  992,  992,  992,  992,  992, 1000,  992,  992,  992,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      992,  992,  992, 1000, 1000, 1000,  992,  992,   63, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000
    } ;

static yyconst short int yy_chk[13310] =
    {   0,
        0,    0,    1,   68,   68,   68,   68,    1,    1,    1,
        1,    2,   70,   70,   70,   70,    2,    2,    2,    2,
      889,   80,  889,    1,    0,    1,    4,    1,    4,    4,
      100,  170,    2,  100,    2,   80,    2,  106,  116,    4,
      106,  116,    4,    4,    4,   69,   69,   69,   69,  170,
        1,   87,  165,   87,   87,  165,  419,  165,   69,    2,
      419,   69,   69,   69,   84,   85,   86,  165,   92,   85,
       92,   92,   86,   84,  252,   86,  261,   87,   85,    1,
      124,   92,  124,  124,   92,   92,  261,  252,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
      127, 1126,  127,  127,    5,    5,    5,    5,  187,  259,
        6,  187,  260,  259,    5,    6,    6,    6,    6,  260,
        5,   19,    5,  127,    5,    6,   19,   19,   19,   19,

      262,    6,   20,    6,  256,    6,  262,   20,   20,   20,
       20,  389,   19,  256,   19,  256,   19,    5,   94,   94,
       94,   94,  389,   20,   21,   20, 1099,   20,    6,   21,
       21,   21,   21,  328,  131,  131,  131,  131,  366,   19,
      167,  167,  167,  167,   94,   21,    5,   21,   22,   21,
       20,  328,  366,   22,   22,   22,   22,    6,    7,    7,
      131,    7,  428,    7,    7,    7,    7,    7,   19,   22,
       23,   22,   21,   22,  420,   23,   23,   23,   23,   20,
        7,   24,    7,  131,    7,  420,   24,   24,   24,   24,
      331,   23,  331,   23,  388,   23,   22,  162,  162,  162,

      162,   21,   24,   25,   24,  428,   24,    7,   25,   25,
       25,   25,  162,  132,  132,  132,  132,  180,   23,  180,
      180,  331,  180,  388,   25,   22,   25,   26,   25,   24,
      431,  446,   26,   26,   26,   26,    7,    8,    8,  132,
        8,  413,    8,    8,    8,    8,    8,   23,   26,   27,
       26,   25,   26, 1085,   27,   27,   27,   27,   24,    8,
      413,    8,  132,    8,  163,  163,  163,  163,  281,  431,
       27,  281,   27,  283,   27,   26,  283,  421,  446,  163,
       25,  177,   28,  177,  177,  434,    8,   28,   28,   28,
       28,  421,  177,   90,   90,   90,   90,   27,  164,  164,

      164,  164,  529,   28,   26,   28,   90,   28,  529,   90,
       90,   90,  436,  164,  434,    8,    9,    9,    9,    9,
      417,    9,    9,    9,    9,    9,   27,    9,    9,  292,
       28,    9,  292,    9, 1078,  177,    9,    9,    9,  417,
        9,    9,    9,  433,   91,   91,   91,   91,  172,  172,
      436,  172,  177,  173,  173,  347,  173,   91,  347,   28,
       91,   91,   91,   29,    9,    9,    9,  185,   29,   29,
       29,   29,  426,  174,  174,  426,  174,  185,  185,  537,
      172,  185,  433,  537,   29,  173,   29,  195,   29,  195,
      195,    9,  195,    9,    9,   10,   10,   10,   10,  416,

       10,   10,   10,   10,   10,  174,   10,   10,  422,  432,
       10,   29,   10, 1077,  416,   10,   10,   10,  425,   10,
       10,   10,  198,  198,  198,  198,  199,  422,  199,  199,
       30,  215,  425,  215,  215,   30,   30,   30,   30,  418,
       29,  437,   35,   10,   10,   10,  540,   35,   35,   35,
       35,   30,  432,   30,  418,   30,  226,  226,  226,  226,
       35,  330,  330,   35,  330,   35,  263,   35,  263,  263,
       10,  544,   10,   10,   11,   11,   11,   11,   30,   11,
       11,   11,   11,   11,  437,   11,   11,  440,  540,   11,
       35,   11,  263,  330,   11,   11,   11,  387,   11,   11,

       11,  229,  229,  229,  229,  544,  387,   30,  387,   36,
      232,  232,  232,  232,   36,   36,   36,   36,  178,   35,
      178,  178,   11,   11,   11,  440,  541,   36,  236,  178,
       36,  435,   36,  236,   36,  231,  231,  231,  231,  236,
      534,  231,  236,  534,  236,  247,  247,  247,  247,   11,
      444,   11,   11,   12,   12,   12,   12,   36,   12,   12,
       12,   12,   12,  504,   12,   12,  541,  435,   12,  247,
       12,  210,  178,   12,   12,   12,  531,   12,   12,   12,
     1073,  268,  268,  268,  268,  531,   36,  268,  296,  178,
      296,  296,  227,  227,  227,  227,  444,  210,  449,  210,

      210,   12,   12,   12,  210,  227,  504,  210,  227,  227,
      227,  210,  300,  210,  300,  300,  210, 1067,  210,  269,
      269,  269,  269,  273,  273,  273,  273,  449,   12,  273,
       12,   12,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   15,   15,  441,  505,   15,   15,
       15,   15,  445,  516,   39,   39,  525, 1055,  505,   39,
       39,   39,   39,  527,   15, 1055,   15,  525,   15,  275,
      275,  275,  275,  414,  441,   39,  414,   39,   51,   39,
      414,  527,  516,   51,   51,   51,   51,   40,   40,  533,
      414,   15,   40,   40,   40,   40,  533,  528,  530,   51,
      445,   51,   39,   51,  276,  276,  276,  276,   40,  532,
       40,   52,   40,  528,  530,  532,   52,   52,   52,   52,
       15,   16,   16,   16,   16,  546,   51,   16,   16,   16,

       16,   39,   52,   53,   52,   40,   52,  542,   53,   53,
       53,   53,  535,   16,   54,   16,  543,   16,  614,   54,
       54,   54,   54, 1063,   53,   51,   53,  546,   53,   52,
      271,  535,  271,  271,   40,   54,   59,   54,  542,   54,
       16,   59,   59,   59,   59,  536,  271,  271, 1060,  536,
      614,   53,  297,  550,  297,  297,  543,   59,   52,   59,
       60,   59,   54,  536,  545,   60,   60,   60,   60,   16,
       17,   17,   17,   17,  429,  297,   17,   17,   17,   17,
       53,   60,  550,   60,   59,   60,  548,   81,   81,   81,
       81,   54,   17,  547,   17,  545,   17,  607,  113,  113,

      113,  113,  429,   81,  607,   81,  429,   81,   60,  288,
      288,  288,  288,   59,  113,  429,  113,  559,  113,   17,
      298,  547,  298,  298,  122,  122,  122,  122,  559,  548,
       81,  323,  605,  288,  323,  538,  323,   60,   81,  615,
      122,  113,  122,  298,  122,  729,  323,   81,   17,   18,
       18,   18,   18,  605,  538,   18,   18,   18,   18,   81,
      194,  194,  194,  194,  729,  556,  299,  122,  299,  299,
      113,   18, 1041,   18, 1037,   18,  194,  615,  194,  551,
      194,  606,  211,  332,  332,  211,  332,  211,  211,  299,
      423,  355,  211,  355,  355,  211,  122,  556,   18,  211,

      572,  211,  606,  194,  211,  423,  211,  228,  228,  228,
      228,  423,  423,  556,  254,  332,  254,  254,  573,  254,
      228,  672,  551,  228,  228,  228,  254,   18,   31,   31,
       31,   31,  194,   31,   31,   31,   31,   31,  303,  303,
      303,  303,  230,   31,  230,  230,  320,  320,  320,  320,
       31,  637,   31,  572,   31,  230,  608,  672,  230,  230,
      356,  320,  356,  356,  303,  254,  266,  266,  266,  266,
      608,  573,  267,  609,  267,  267,  549,   31,  254,  266,
     1027,  612,  266,  266,  266,  267,  638,  303,  267,  267,
      609,  304,  304,  304,  304,  321,  321,  321,  321,  325,

      325,  325,  325,  637,  617,  549,   31,   32,   32,   32,
       32,  616,   32,   32,   32,   32,   32,  304,  549,  618,
      560,  272,   32,  272,  272,  339,  612,  339,  339,   32,
      339,   32,  599,   32,  272,  897,  638,  272,  272,  341,
      304,  278,  617,  278,  278,  322,  322,  322,  322,  341,
      341,  344,  616,  341,  278,  999,   32,  278,  278,  997,
      322,  344,  344,  560,  351,  344,  351,  351,  610,  351,
      354,  354,  354,  354,  370,  599,  370,  370,  371,  897,
      371,  371,  610,  618,  989,   32,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   41,   41,   41,   41,
      825,  613,   41,   41,   41,   41,  472,  472,  334,  472,
      334,  334,  825,  702,  335,  670,  335,  335,   41,  334,
       41,  667,   41,  377,  377,  377,  377,  380,  380,  380,
      380,  670,  667,  337,  668,  337,  337,  338,  472,  338,
      338,  668,  985,  728,  337,   41,  613,  378,  338,  378,

      378,  381,  381,  381,  381,  461,  386,  461,  461,  671,
      728,  386,  334,  378,  378,  675,  671,  386,  335,  702,
      386,   41,  386,   41,   41,   42,   42,   42,   42,  334,
      438,   42,   42,   42,   42,  335,  650,  337,  673,  674,
      383,  338,  383,  383,  983,  622,  676,   42,  337,   42,
      650,   42,  338,  383,  337,  675,  383,  383,  338,  397,
      397,  397,  397,  398,  398,  398,  398, 1025,  402,  438,
      673,  669, 1025,  402,   42,  438,  438,  674,  676,  402,
      739,  406,  402,  397,  402,  669,  406,  398,  688,  406,
      739,  406,  406,  622,  622,  406,  969,  406,  963,  688,

       42,  406,   42,   42,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   45,   45,   45,   45,  677,   45,
       45,   45,   45,   45,  864,   45,   45,  864,  780,   45,

      450,   45,  450,  450,   45,   45,   45,  403,   45,   45,
       45,  731,  403,  450,  780,  411,  450,  450,  403,  730,
      411,  403,  405,  403,  405,  405,  411,  959,  730,  411,
      407,  411,   45,   45,   45,  407,  743,  415,  407,  703,
      407,  407,  734,  415,  407,  415,  407,  733,  732,  847,
      407,  415,  731,  677,  473,  473,  781,  473,  415,   45,
      745,   45,   45,   46,   46,   46,   46,  403,   46,   46,
       46,   46,   46,  799,   46,   46,  405,  430,   46,  703,
       46,  733,  826,   46,   46,   46,  473,   46,   46,   46,
      407,  732,  439,  405,  826,  424,  781,  738,  424,  847,

      743,  424,  745,  784,  784,  424,  738,  734,  430, 1087,
      430,   46,   46,   46,  424,  430,  424, 1087,  888,  817,
      439,  799,  430,  439,  745,  888,  888,  439, 1101,  596,
      596,  596,  596,  817,  596,  439, 1101,  439,   46,  596,
       46,   46,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,  451,   47,  451,
      451,  738,  920,  920,   47,   47,   47,   47,   47,   47,
      451,  956,  829,  451,  451,  456,  456,  456,  456,  457,
      457,  457,  457,  477,  829,  477,  477,  480,  833,  480,
      480,   47,   47,   47,   47,  477, 1104,  835,  480,  456,

      833,  501,  951,  457, 1104,  483,  501,  483,  483,  835,
      760,  518,  501,  518,  518,  501,  483,  501,   47,   47,
       47,   47,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,  477,   48,  761,
      500,  480,  500,  500,   48,   48,   48,   48,   48,   48,
      503,  946,  946,  500,  477,  503,  500,  500,  480,  483,
      764,  503,  764,  764,  503,  518,  503,  760,  838,  483,
      950,   48,   48,   48,   48,  484,  483,  484,  484,  890,
      838,  802,  518,  802,  802,  571,  484,  571,  571,  979,
      949,  890,  511,  511,  511,  511,  761,  980,   48,   48,

       48,   48,   49,   49,   49,   49,  891,   49,   49,   49,
       49,   49, 1038,   49,   49,  511,  511,   49,  891,   49,
      514, 1038,   49,   49,   49,  514,   49,   49,   49,  484,
      660,  514,  660,  660,  514,  836,  514,  484,  806,  571,
      806,  806,  948,  827,  517,  827,  484,  836,  836,  517,
       49,   49,   49,  979,  521,  517,  571,  827,  517,  521,
      517,  980,  521,  908,  521,  521,  947,  944,  521,  721,
      521,  721,  721,  839,  521,  908,  942,   49,  660,   49,
       49,   50,   50,   50,   50,  839,   50,   50,   50,   50,
       50,  941,   50,   50,  517,  937,   50,  852,   50,  852,

      852,   50,   50,   50,  522,   50,   50,   50, 1084,  522,
      867,  526,  522, 1084,  522,  522,  526,  721,  522,  867,
      522,  589,  526,  867,  522,  526,  589,  526,  611,   50,
       50,   50,  589,  611,  935,  589, 1026,  589,  839,  611,
      885,  933,  611, 1118,  611,  627,  627,  627,  627,  885,
      627, 1118, 1026,  885,  522,  627,   50,  931,   50,   50,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,

       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       71,  909,   71,   71,  925,   71,   71,   71,  924,   71,
      923,   71,   71,  909,  880,   71,  722,   71,  722,  722,
       71,   71,   71,  880,   71,   71,   71,  880,  561,  561,
      561,  561,  576,  869,  576,  576,  577,  922,  577,  577,
     1088,  910,  869,  576,  921, 1088,  869,  577,   71,   71,
       71,  561,  561,  910,  869, 1129,  594,  594,  594,  594,
     1079, 1079,  880, 1129,  656,  656,  656,  656, 1079,  656,
      595,  595,  595,  595,  656,   71,  722,   71,   77,  594,
      594,  722,  998,   77,   77,  905,  576,   77,  577,   77,
      577,  998,   77,  595,  595,  998,   77,   77,  902,  600,

      576,  901,   77,  576,  600,   77,  773,  577,  773,  773,
      600,  911,  913,  600,  911,  600,  896,  603,  625,  625,
      625,  625,  603,  911,  913,  603,  895,  603,  603,  894,
       77,  603,  641,  603,  641,  641,  858,  603,  858,  858,
      893,  625,  625,  641,  892,  642,  886,  642,  642,  690,
      690,  690,  690, 1136,  690,   77,  642,   77,   82,  690,
      600, 1136,  872,   82,   82,   82,  773,   82,  915,   82,
       82,  773,   82,   82,  870,   82,   82,   82,  603,   82,
      915,   82,   82,  870,  866,   82,  641,  870,  626,  626,
      626,  626, 1030,  653,  900,  870,  900,  900,  653,  642,

     1043,  858, 1043,  641,  653,  865, 1030,  653,  862,  653,
       82,  626,  626,  916,  642, 1030,  642,  655,  655,  655,
      655,  811,  655,  811,  811,  916, 1043,  655,  854,  706,
      853,  706,  706,  873, 1137,   82,  811,   82,   83, 1137,
      706,  655,  873,   83,   83,   83,  873,   83,  851,   83,
       83,  882,   83,   83,  873,   83,   83,   83,  662,   83,
      882,   83,   83,  662,  882,   83,  850,  846,  665,  662,
      845,  811,  662,  665,  662, 1105,  665, 1105,  665,  665,
      844,  843,  665,  706,  665,  842,  917,  841,  665,  706,
       83,  945,  689,  689,  689,  689,  840,  689,  917,   83,

      706, 1105,  689,  945,  662,  882,  945,  837,   83,  831,
      718,  718,  718,  718,  665,   83,  689,   83,   89,  783,
     1149,  783,  783,   89,   89,  723,  828,   89, 1149,   89,
      723,  823,   89,   89,  718,   89,  723,   89,   89,  723,
      874,  723,   89,  724,  749,  749,  749,  749,  724,  874,
      971,  917,  874,  874,  724,  727, 1080,  724, 1080,  724,
      727,  874,  971,  727, 1080,  727,  727,  776,  749,  727,
       89,  727,  776,  783,  763,  727,  763,  763,  776,  883,
      822,  776,  821,  776,  939,  763,  939,  939,  883,  815,
      783,  907,  883,  907,  907,   89,  812,   89,   93,   93,

       93,   93,   93,   93,   93,   93,  724,   93,  801,   93,
      801,  801,   93, 1182,  971,  809,   93,   93,  727,  801,
     1069,  876,   93, 1069, 1182,   93,  776,  779,  763, 1182,
      876, 1069,  779,  883,  876,  779,  763,  779,  779,  808,
     1169,  779,  876,  779,  813,  763,  807,  779, 1169,  813,
       93,  907,  805,  804,  788,  813,  788,  788,  813,  803,
      813,  819,  801,  819,  819,  788,  798,  857, 1177,  857,
      857,  940,  819,  940,  940,   93, 1177,   93,  108,  801,
      108,  108,  857,  108,  108,  108,  779,  108,  797,  108,
      108,  796,  795,  108,  943,  108,  943,  943,  108,  108,

      108,  912,  108,  108,  108,  813,  912,  860,  788,  860,
      860,  972,  794,  912,  912,  819,  958,  857,  958,  958,
      793,  792,  860,  972,  871,  788,  108,  108,  108,  788,
      816,  871,  819,  871,  929,  816,  819,  871,  816,  789,
      816,  816,  778,  929,  816,  871,  816,  929,  775,  820,
      816,  820,  820,  108,  943,  108,  234,  860,  234,  234,
      820,  234,  234,  234, 1098,  234, 1098,  234,  234,  774,
      772,  234, 1098,  234,  875,  972,  234,  234,  234,  771,
      234,  234,  234,  875,  770,  769,  768,  875,  875,  877,
      904,  816,  904,  904,  929,  875,  875,  767,  877,  766,

      914,  765,  877,  820,  234,  234,  234,  977,  878,  877,
      877,  914,  914,  914,  879,  759,  973,  878,  973,  977,
      820,  878,  756,  879,  820,  755,  754,  879,  881,  878,
      973,  234,  753,  234,  241,  879,  879,  881,  884,  241,
      241,  881,  914,  241,  752,  241,  751,  884,  241,  881,
      750,  884,  241,  241,  906,  904,  906,  906,  241,  884,
      748,  241,  737,  887,  918,  887,  887,  918,  919,  906,
      726,  977,  725,  919,  887,  927,  918,  720,  926,  918,
      919,  919,  973,  919,  927,  928,  241,  926,  927,  926,
      930,  926,  953,  719,  928,  717,  927, 1083,  928,  930,

     1083,  953,  716,  930,  906,  953,  928,  954, 1083,  954,
      954,  241,  884,  241,  255,  715,  714,  887,  954,  255,
      255,  255,  954,  255,  975,  255,  255,  975,  255,  255,
      713,  255,  255,  255,  887,  255,  975,  255,  255,  964,
      960,  255,  960,  960,  712,  711,  953,  965,  964,  965,
      965,  966,  964,  966,  966,  954,  967,  710,  965,  709,
      930,  970,  965,  970,  970,  967,  255,  707,  986,  967,
      986,  986,  990,  701,  990,  990,  991,  700,  991,  991,
      978,  699,  698,  990,  697,  696,  695,  990,  975,  984,
      960,  255,  978,  255,  257,  965,  694,  257,  984,  966,

      693, 1092,  984,  257,  967, 1132,  964,  257, 1132,  257,
     1092,  970, 1092,  257,  257,  692, 1132, 1092,  257,  691,
      990,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  664,  984,  978,  663,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  258,
      995,  661,  995,  995,  258,  258,  258, 1103,  258, 1103,
      258,  258,  996,  258,  258, 1103,  258,  258,  258,  976,
      258,  996,  258,  258,  976,  996,  258,  994,  659,  994,

      994,  976,  976,  988,  658,  988,  988, 1128,  994, 1128,
      657, 1139,  994,  654,  988, 1128, 1142, 1141,  995,  652,
     1139,  258, 1139, 1142,  651, 1141, 1175, 1139, 1141, 1175,
      996, 1142,  258, 1141, 1143, 1143, 1145, 1175, 1145,  649,
     1146, 1146, 1143, 1146, 1145,  994,  258,  648,  258,  265,
      647, 1146, 1173,  976,  265,  265,  646,  988,  265, 1173,
      265,  265,  643,  265,  265,  636,  265, 1173,  265, 1153,
     1153,  635,  265,  265,  988, 1172, 1158, 1153, 1158, 1161,
     1167, 1161, 1167, 1172, 1158,  634, 1172, 1161, 1167, 1181,
     1181, 1172, 1188, 1188,  633, 1188,  632, 1181,  631,  630,

      629,  265,  628, 1188,  624,  623,  621,  604,  602,  601,
      598,  597,  593,  591,  590,  588,  587,  586,  585,  584,
      583,  582,  580,  579,  570,  569,  265,  568,  265,  284,
      567,  284,  284,  566,  284,  284,  284,  565,  284,  564,
      284,  284,  563,  562,  284,  558,  284,  557,  555,  284,
      284,  284,  539,  284,  284,  284,  524,  523,  520,  519,
      515,  513,  512,  508,  507,  502,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  487,  284,  284,  284,
      485,  478,  475,  474,  468,  467,  466,  465,  464,  463,
      462,  459,  454,  447,  427,  412,  410,  409,  408,  404,

      401,  400,  396,  395,  284,  393,  284,  336,  391,  336,
      336,  390,  385,  375,  336,  372,  336,  368,  336,  336,
      367,  365,  364,  363,  362,  361,  360,  358,  348,  336,
      345,  329,  324,  336,  318,  316,  314,  312,  310,  308,
      306,  305,  293,  286,  285,  280,  270,  264,  253,  251,
      250,  245,  244,  242,  240,  239,  336,  235,  233,  222,
      218,  336,  216,  209,  193,  184,  160,  156,  152,  148,
      144,  139,  138,  134,  112,  104,   98,   95,  336,   79,
       78,   73,  336,   72,  336,  442,   63,    0,    0,    0,
      442,  442,  442,    0,  442,    0,  442,  442,    0,  442,

      442,    0,  442,  442,  442,    0,  442,    0,  442,  442,
        0,    0,  442,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  442,    0,    0,
        0,    0,  442,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  442,    0,  442,  443,    0,    0,    0,    0,
      443,  443,  443,    0,  443,    0,  443,  443,    0,  443,
      443,    0,  443,  443,  443,    0,  443,    0,  443,  443,
        0,    0,  443,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  443,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  443,    0,  443,  448,    0,    0,    0,    0,
      448,  448,    0,    0,  448,    0,  448,  448,    0,  448,
      448,    0,  448,    0,  448,    0,    0,    0,  448,  448,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  448,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  448,    0,  448,  476,    0,  476,  476,    0,
        0,    0,  476,    0,  476,    0,  476,  476,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  476,    0,    0,
        0,  476,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  476,    0,    0,    0,    0,  476,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  476,    0,    0,    0,

      476,    0,  476,  479,    0,  479,  479,    0,    0,    0,
      479,    0,  479,    0,  479,  479,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  479,    0,    0,    0,  479,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  479,    0,    0,    0,    0,  479,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  479,    0,    0,    0,  479,    0,
      479,  481,    0,  481,  481,    0,    0,    0,  481,    0,
      481,    0,  481,  481,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  481,    0,    0,    0,  481,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      481,    0,    0,    0,    0,  481,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  481,    0,    0,    0,
        0,    0,  481,    0,    0,    0,  481,    0,  481,  482,
        0,  482,  482,    0,    0,    0,  482,    0,  482,    0,
      482,  482,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  482,    0,    0,    0,  482,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  482,    0,
        0,    0,    0,  482,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  482,    0,    0,    0,    0,    0,
      482,    0,    0,    0,  482,    0,  482,  552,    0,    0,
        0,    0,  552,  552,  552,    0,  552,    0,  552,  552,
        0,  552,  552,    0,  552,  552,  552,    0,  552,    0,
      552,  552,    0,    0,  552,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  552,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  552,    0,  552,  553,    0,  553,
      553,  553,  553,  553,  553,    0,    0,  553,    0,  553,
      553,  553,  553,  553,  553,  553,  553,    0,  553,  553,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  553,  554,    0,    0,    0,    0,  554,  554,  554,

        0,  554,    0,  554,  554,    0,  554,  554,    0,  554,
      554,  554,    0,  554,    0,  554,  554,    0,    0,  554,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  554,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  554,    0,    0,    0,    0,    0,    0,    0,  554,
        0,  554,  574,    0,  574,  574,    0,    0,    0,  574,
        0,  574,    0,  574,  574,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  574,    0,    0,    0,  574,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  574,    0,    0,    0,    0,  574,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  574,    0,    0,    0,
        0,    0,    0,  574,    0,    0,    0,  574,    0,  574,
      575,    0,  575,  575,    0,    0,    0,  575,    0,  575,
        0,  575,  575,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  575,    0,    0,    0,  575,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  575,

        0,    0,    0,    0,  575,    0,    0,    0,    0,    0,
        0,    0,  575,    0,    0,    0,    0,    0,    0,    0,
        0,  575,    0,    0,    0,  575,    0,  575,  619,    0,
      619,  619,  619,  619,  619,  619,    0,    0,  619,    0,
      619,  619,  619,  619,  619,  619,    0,  619,    0,  619,
      619,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  619,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  619,

        0,    0,  619,  620,  620,    0,  620,  620,  620,    0,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,    0,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  639,    0,  639,  639,    0,    0,    0,
      639,    0,  639,    0,  639,  639,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  639,    0,    0,    0,  639,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  639,    0,    0,    0,    0,  639,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  639,    0,    0,  639,    0,    0,    0,  639,    0,
      639,  640,    0,  640,  640,    0,    0,    0,  640,    0,
      640,    0,  640,  640,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  640,    0,    0,    0,  640,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      640,    0,    0,  640,    0,  640,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  640,    0,    0,    0,  640,    0,  640,  678,
        0,  678,  678,  678,  678,  678,  678,    0,    0,  678,
        0,  678,  678,  678,    0,  678,  678,  678,  678,    0,
      678,  678,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      678,    0,    0,  678,  679,    0,  679,  679,  679,  679,
      679,  679,    0,    0,  679,    0,  679,  679,  679,    0,
      679,  679,  679,  679,    0,  679,  679,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  679,    0,    0,    0,
        0,    0,    0,    0,    0,  679,    0,    0,  679,  680,
        0,  680,  680,  680,  680,  680,  680,    0,    0,  680,

        0,  680,  680,  680,  680,  680,  680,    0,  680,    0,
      680,  680,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      680,    0,    0,  680,  681,  681,    0,  681,  681,    0,
        0,    0,    0,    0,    0,    0,  681,  681,  681,    0,
      681,    0,    0,    0,    0,    0,    0,  681,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  681,  681,  681,  681,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      681,  681,  681,  682,  682,    0,  682,  682,    0,    0,
        0,    0,    0,    0,    0,  682,  682,  682,    0,  682,
        0,    0,    0,    0,    0,    0,  682,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  682,  682,  682,  682,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  682,
      682,  682,  683,  683,    0,  683,  683,    0,    0,    0,
        0,    0,    0,    0,  683,  683,  683,    0,  683,    0,
        0,    0,    0,    0,    0,  683,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  683,  683,  683,  683,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  683,  683,

      683,  684,  684,    0,  684,  684,  684,    0,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,    0,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  684,  684,  684,  684,  684,  684,  684,  684,  684,
      684,  685,  685,    0,  685,  685,  685,    0,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,    0,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  686,    0,    0,    0,    0,  686,  686,  686,    0,
      686,    0,  686,  686,    0,  686,  686,    0,  686,  686,
      686,    0,  686,    0,  686,  686,    0,    0,  686,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  686,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  686,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  686,    0,
      686,  704,    0,  704,  704,    0,    0,    0,  704,    0,
      704,    0,  704,  704,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  704,    0,    0,    0,  704,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      704,    0,    0,    0,    0,  704,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  704,    0,    0,    0,  704,    0,  704,  705,
        0,  705,  705,    0,    0,    0,  705,    0,  705,    0,
      705,  705,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  705,    0,    0,    0,  705,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  705,    0,
        0,    0,    0,  705,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  705,    0,
      705,    0,    0,    0,  705,    0,  705,  736,    0,    0,

      736,  736,    0,  736,  736,  736,    0,  736,    0,  736,
      736,  736,  736,  736,  736,  736,    0,    0,  736,  736,
      736,  736,  736,  736,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  736,  736,  740,    0,  740,  740,
      740,  740,  740,  740,    0,    0,  740,    0,  740,  740,
      740,    0,  740,  740,  740,  740,    0,  740,  740,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  740,    0,    0,
      740,  741,  741,    0,  741,  741,    0,    0,    0,    0,
        0,    0,    0,  741,  741,  741,    0,  741,    0,    0,
        0,    0,    0,    0,  741,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      741,  741,  741,  741,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  741,  741,  741,
      742,  742,    0,  742,  742,    0,    0,    0,    0,    0,
        0,    0,  742,  742,  742,    0,  742,    0,    0,    0,
        0,    0,    0,  742,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  742,
      742,  742,  742,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  742,  742,  742,  744,
      744,    0,  744,  744,  744,    0,  744,  744,  744,    0,
      744,  744,  744,  744,  744,  744,  744,  744,  744,    0,
        0,  744,  744,  744,  744,  744,  744,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  744,  744,
      744,  744,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  744,  744,  744,  744,  747,
        0,    0,    0,    0,  747,  747,  747,    0,  747,    0,

      747,  747,    0,  747,  747,    0,  747,  747,  747,    0,
      747,    0,  747,  747,    0,    0,  747,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  747,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  747,    0,    0,
        0,    0,    0,    0,    0,    0,  747,    0,  747,  762,
        0,  762,  762,    0,    0,    0,  762,    0,  762,    0,
      762,  762,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  762,    0,    0,    0,  762,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  762,    0,
        0,    0,    0,  762,    0,    0,    0,    0,    0,  762,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      762,    0,    0,    0,  762,    0,  762,  782,    0,    0,
      782,  782,    0,  782,  782,  782,    0,  782,    0,  782,
      782,  782,  782,  782,  782,  782,    0,    0,  782,  782,
      782,  782,  782,  782,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  782,  782,  785,    0,  785,  785,
      785,  785,  785,  785,    0,    0,  785,    0,  785,  785,
      785,    0,  785,  785,  785,  785,    0,  785,  785,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  785,    0,    0,

      785,  786,  786,    0,  786,  786,  786,    0,  786,  786,
      786,    0,  786,  786,  786,  786,  786,  786,  786,  786,
      786,    0,    0,  786,  786,  786,  786,  786,  786,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      786,  786,  786,  786,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  786,  786,  786,
      786,  787,  787,    0,  787,  787,  787,    0,  787,  787,
      787,    0,  787,  787,  787,  787,  787,  787,  787,  787,

      787,    0,    0,  787,  787,  787,  787,  787,  787,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      787,  787,  787,  787,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  787,  787,  787,
      787,  790,    0,  790,  790,  790,    0,    0,    0,  790,
      790,    0,  790,    0,  790,  790,  790,  790,    0,  790,
        0,    0,    0,  790,  790,  790,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  790,
        0,    0,  790,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  790,    0,
        0,    0,    0,    0,    0,    0,    0,  790,    0,  790,
      800,    0,  800,  800,    0,    0,    0,  800,    0,  800,
        0,  800,  800,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  800,    0,    0,    0,  800,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  800,
        0,    0,    0,    0,  800,    0,    0,    0,    0,    0,

        0,    0,  800,    0,    0,    0,    0,    0,    0,    0,
        0,  800,    0,    0,    0,  800,    0,  800,  818,  818,
        0,  818,  818,  818,    0,  818,  818,  818,    0,  818,
      818,  818,  818,  818,  818,  818,  818,  818,    0,    0,
      818,  818,  818,  818,  818,  818,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  818,  818,  818,
      818,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  818,  818,  818,  818,  824,    0,

      824,  824,  824,    0,    0,    0,  824,  824,    0,  824,
        0,  824,  824,  824,  824,    0,  824,    0,    0,    0,
      824,  824,  824,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  824,    0,    0,  824,
        0,    0,    0,  824,    0,    0,    0,    0,    0,    0,
        0,    0,  824,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  824,    0,  824,  830,    0,    0,
        0,    0,  830,  830,    0,    0,  830,    0,  830,  830,
        0,  830,  830,    0,    0,  830,  830,    0,    0,    0,

        0,  830,    0,    0,  830,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  830,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  830,    0,  830,  832,    0,    0,
        0,    0,  832,  832,    0,    0,  832,    0,  832,  832,
        0,  832,    0,    0,  832,  832,  832,    0,    0,    0,
        0,  832,  832,    0,  832,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  832,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  832,    0,  832,  834,    0,    0,
      834,    0,    0,    0,    0,    0,  834,    0,  834,    0,
      834,    0,  834,    0,    0,    0,  834,  834,    0,  834,
      834,  834,    0,    0,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,    0,    0,    0,    0,  834,
      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,

      834,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  848,    0,  848,  848,    0,    0,    0,  848,
        0,  848,    0,  848,  848,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  848,    0,    0,    0,  848,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  848,    0,    0,    0,    0,  848,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  848,    0,    0,    0,  848,    0,  848,
      861,    0,  861,  861,  861,    0,  861,    0,  861,  861,

        0,  861,    0,  861,  861,  861,  861,  861,  861,    0,
      861,    0,  861,  861,  861,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  861,    0,
        0,  861,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  861,    0,  861,  863,
        0,  863,  863,  863,    0,  863,    0,  863,  863,    0,
      863,    0,  863,  863,  863,  863,  863,  863,    0,  863,
        0,  863,  863,  863,    0,  863,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  863,    0,    0,
      863,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  863,    0,  863,  868,    0,
      868,  868,  868,    0,    0,    0,  868,  868,    0,  868,
        0,  868,  868,  868,  868,    0,  868,    0,    0,    0,
      868,  868,  868,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  868,    0,    0,  868,

        0,    0,    0,  868,    0,    0,    0,    0,    0,    0,
        0,    0,  868,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  868,    0,  868,  961,    0,  961,
      961,  961,    0,    0,    0,  961,  961,    0,  961,    0,
      961,  961,  961,  961,    0,  961,    0,    0,    0,  961,
      961,  961,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  961,    0,    0,  961,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  961,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  961,    0,  961,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,    0,  962,  962,  962,
      962,  962,  962,  962,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  962,  962,  962,  962,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  962,  962,  962,  962,  974,    0,    0,  974,
      974,    0,  974,  974,  974,    0,  974,    0,  974,  974,

      974,  974,  974,  974,  974,    0,    0,  974,  974,  974,
      974,  974,  974,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  974,  974,  982,  982,    0,  982,  982,
        0,    0,    0,    0,    0,    0,    0,  982,  982,  982,
        0,  982,    0,    0,    0,    0,    0,    0,  982,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  982,  982,  982,  982,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  982,  982,  982,  987,    0,    0,  987,  987,    0,
      987,  987,  987,    0,  987,    0,  987,  987,  987,  987,
      987,  987,  987,    0,    0,  987,  987,  987,  987,  987,
      987,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  987,  987,  992,    0,    0,  992,  992,    0,  992,
      992,  992,    0,  992,    0,  992,  992,  992,  992,  992,
      992,  992,    0,    0,  992,  992,  992,  992,  992,  992,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      992,  992, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001,
     1001, 1001, 1001, 1001, 1001, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,
     1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

     1003, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
     1004, 1004, 1004, 1004, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005,
     1005, 1005, 1005, 1005, 1005, 1005, 1005, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006,

     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1008, 1008, 1008, 1008, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009,
     1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1010,

     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011,
     1011, 1011, 1011, 1011, 1011, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1013, 1013,

     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013,
     1013, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1014, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1015, 1015, 1016, 1016, 1016,

     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,
     1017, 1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018,
     1018, 1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019,

     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020,
     1020, 1020, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021,
     1021, 1021, 1021, 1021, 1021, 1022, 1022, 1022, 1022, 1022,

     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1023,    0,
        0,    0, 1023, 1023,    0,    0, 1023,    0, 1023,    0,
        0, 1023, 1023,    0, 1023,    0, 1023, 1023,    0,    0,
        0, 1023,    0,    0,    0, 1023,    0,    0,    0,    0,
     1023, 1024, 1024,    0, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1028,    0,    0,    0, 1028, 1028,

        0,    0, 1028,    0, 1028,    0,    0, 1028, 1028,    0,
     1028, 1028, 1028, 1028,    0,    0,    0, 1028,    0,    0,
     1028, 1028,    0,    0,    0,    0, 1028, 1029,    0, 1029,
     1029,    0, 1029,    0,    0,    0,    0,    0,    0, 1029,
     1029, 1031, 1031, 1031, 1031,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1031,    0,    0, 1031,    0, 1031,
        0, 1031, 1031,    0, 1031,    0,    0, 1031, 1032,    0,
        0,    0, 1032, 1032, 1032,    0, 1032,    0, 1032, 1032,
        0, 1032, 1032,    0, 1032, 1032, 1032, 1032, 1032,    0,
     1032, 1032,    0,    0, 1032, 1032,    0,    0,    0,    0,

     1032, 1033,    0,    0,    0, 1033, 1033,    0,    0, 1033,
        0, 1033,    0,    0, 1033, 1033,    0, 1033,    0, 1033,
     1033,    0,    0,    0, 1033,    0,    0,    0, 1033,    0,
        0,    0,    0, 1033, 1034, 1034,    0, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
        0, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1034, 1034, 1034, 1034, 1035,    0,    0,
        0, 1035, 1035,    0,    0, 1035,    0, 1035,    0,    0,
     1035, 1035,    0, 1035,    0, 1035, 1035,    0,    0,    0,
     1035,    0,    0,    0, 1035,    0,    0,    0,    0, 1035,

     1036, 1036,    0, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1036, 1039, 1039, 1039, 1039,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1039,    0,    0, 1039,
        0, 1039,    0, 1039, 1039,    0, 1039,    0,    0, 1039,
     1040,    0,    0,    0, 1040,    0,    0,    0, 1040,    0,
     1040,    0,    0, 1040, 1040,    0, 1040,    0, 1040, 1040,
        0,    0,    0, 1040,    0,    0,    0, 1040,    0,    0,
        0,    0, 1040, 1042, 1042, 1042, 1042,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1042,    0,    0, 1042,
        0, 1042,    0, 1042, 1042,    0, 1042,    0,    0, 1042,
     1044,    0, 1044,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1044,    0,
        0,    0, 1044,    0,    0,    0, 1044, 1045,    0,    0,
        0, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,
     1046, 1046,    0, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046,

     1046, 1046, 1046, 1046, 1046, 1046,    0, 1046, 1046,    0,
     1046, 1046, 1046, 1047, 1047,    0, 1047, 1047, 1047, 1047,
        0, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047, 1047,    0,
     1047, 1047,    0, 1047, 1047, 1047, 1048, 1048,    0, 1048,
     1048, 1048, 1048,    0, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1048, 1048,    0, 1048, 1048,    0, 1048, 1048, 1048, 1049,
     1049,    0, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,

     1049, 1049, 1049, 1049, 1049,    0, 1049, 1049,    0, 1049,
     1049, 1049, 1050, 1050,    0, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050,    0, 1050,
     1050,    0, 1050, 1050, 1050, 1051, 1051,    0, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051,
     1051,    0, 1051, 1051,    0, 1051, 1051, 1051, 1052, 1052,
        0, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,

     1052, 1052, 1052, 1052,    0, 1052, 1052,    0, 1052, 1052,
     1052, 1053,    0,    0, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053,    0, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1054, 1054,    0, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1056, 1056,    0,
     1056, 1056,    0, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,

     1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1057,    0, 1057, 1057, 1057, 1057, 1057,    0,    0,    0,
        0,    0,    0, 1057,    0, 1057, 1058, 1058,    0,    0,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1058, 1059,
     1059,    0, 1059, 1059, 1059, 1059,    0, 1059,    0, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059, 1059,
     1059,    0, 1059, 1059, 1059,    0, 1059, 1059,    0,    0,
        0, 1059, 1061,    0,    0,    0,    0,    0,    0,    0,

        0,    0, 1061, 1061,    0, 1061, 1061,    0,    0,    0,
        0,    0,    0, 1061, 1062,    0,    0,    0, 1062,    0,
        0,    0, 1062,    0, 1062,    0,    0, 1062, 1062,    0,
     1062,    0, 1062, 1062,    0,    0,    0, 1062,    0,    0,
        0, 1062,    0,    0,    0,    0, 1062, 1064, 1064, 1064,
     1064,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1064,    0,    0, 1064,    0, 1064,    0, 1064, 1064,    0,
     1064,    0,    0, 1064, 1065,    0,    0,    0,    0,    0,
        0,    0, 1065,    0, 1065, 1065, 1065, 1065, 1065,    0,
        0,    0,    0,    0,    0, 1065, 1066,    0,    0,    0,

     1066, 1066,    0,    0, 1066,    0, 1066,    0,    0, 1066,
     1066,    0, 1066,    0, 1066, 1066,    0,    0,    0, 1066,
        0,    0,    0, 1066,    0,    0,    0,    0, 1066, 1068,
     1068,    0, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068,    0, 1068, 1068,    0, 1068,
     1068, 1068, 1070,    0, 1070,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1070,    0,    0,
     1070,    0,    0,    0,    0,    0,    0,    0, 1070, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,    0, 1072,
     1072,    0, 1072, 1072, 1072, 1072, 1072, 1072,    0,    0,
     1072,    0, 1072, 1072, 1072, 1074, 1074,    0, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1075, 1075,
        0, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1076,    0,    0,    0,    0, 1076,    0,    0,    0,
        0,    0, 1076,    0, 1076, 1076,    0, 1076,    0,    0,
        0,    0, 1076, 1081,    0,    0,    0, 1081, 1081,    0,
        0, 1081,    0, 1081,    0,    0, 1081, 1081,    0, 1081,
     1081, 1081, 1081,    0,    0,    0, 1081,    0,    0, 1081,
     1081,    0,    0,    0,    0, 1081, 1082,    0, 1082, 1082,
        0, 1082,    0,    0,    0,    0,    0,    0, 1082, 1082,
     1086, 1086, 1086,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1086,    0,
        0,    0,    0, 1086,    0,    0, 1086, 1089,    0,    0,
        0,    0,    0,    0,    0, 1089,    0,    0, 1089, 1089,
        0, 1089,    0,    0,    0, 1089, 1089,    0, 1089,    0,
     1089,    0,    0, 1089, 1090,    0, 1090, 1090,    0, 1090,
        0,    0,    0,    0,    0,    0, 1090, 1090,    0,    0,
        0,    0, 1090, 1091,    0,    0,    0, 1091, 1091, 1091,
        0, 1091,    0, 1091, 1091,    0, 1091, 1091,    0, 1091,
     1091, 1091, 1091, 1091,    0, 1091, 1091,    0,    0, 1091,
     1091,    0,    0,    0,    0, 1091, 1093,    0,    0,    0,

     1093, 1093,    0,    0, 1093,    0, 1093, 1093,    0, 1093,
     1093,    0, 1093,    0, 1093, 1093,    0,    0, 1093, 1093,
        0,    0,    0, 1093,    0,    0,    0,    0, 1093, 1094,
     1094,    0, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094,    0, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
     1094, 1094, 1095,    0,    0,    0, 1095, 1095,    0,    0,
     1095,    0, 1095,    0,    0, 1095, 1095,    0, 1095,    0,
     1095, 1095,    0,    0,    0, 1095,    0,    0,    0, 1095,
        0,    0,    0,    0, 1095, 1096, 1096,    0, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1097, 1097,
        0, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1100, 1100, 1100,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1100,
        0,    0,    0,    0, 1100,    0,    0, 1100, 1102,    0,
        0,    0, 1102,    0,    0,    0, 1102,    0, 1102,    0,

        0, 1102, 1102,    0, 1102,    0, 1102, 1102,    0,    0,
        0, 1102,    0,    0,    0, 1102,    0,    0,    0,    0,
     1102, 1106,    0, 1106,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1106,
        0,    0,    0, 1106,    0,    0,    0, 1106, 1107,    0,
        0,    0, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1108, 1108,    0, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108,    0, 1108, 1108,
        0, 1108, 1108, 1108, 1109, 1109,    0, 1109, 1109, 1109,
     1109,    0, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109,
        0, 1109, 1109,    0, 1109, 1109, 1109, 1110, 1110,    0,
     1110, 1110, 1110, 1110,    0, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1110, 1110,    0, 1110, 1110,    0, 1110, 1110, 1110,
     1111, 1111,    0, 1111, 1111, 1111, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111,

     1111, 1111, 1111, 1111, 1111, 1111,    0, 1111, 1111,    0,
     1111, 1111, 1111, 1112, 1112,    0, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,    0,
     1112, 1112,    0, 1112, 1112, 1112, 1113, 1113,    0, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113,    0, 1113, 1113,    0, 1113, 1113, 1113, 1114,
     1114,    0, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,

     1114, 1114, 1114, 1114, 1114,    0, 1114, 1114,    0, 1114,
     1114, 1114, 1115,    0,    0, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115,    0, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1116, 1116,    0, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1117, 1117,
        0, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,

     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
     1117, 1119, 1119,    0, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1120,    0, 1120, 1120, 1120, 1120,
     1120,    0,    0,    0,    0,    0,    0, 1120,    0, 1120,
     1121,    0, 1121,    0, 1121, 1121, 1121,    0,    0,    0,
        0,    0,    0, 1121,    0, 1121, 1122, 1122,    0,    0,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1123,
     1123,    0, 1123, 1123, 1123, 1123,    0, 1123,    0, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123,    0, 1123, 1123, 1123,    0, 1123, 1123,    0,    0,
        0, 1123, 1124, 1124,    0, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124, 1124, 1124, 1124, 1125,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1125, 1125,    0, 1125, 1125,
        0,    0,    0,    0,    0,    0, 1125, 1127,    0,    0,

        0, 1127,    0,    0,    0, 1127,    0, 1127,    0,    0,
     1127, 1127,    0, 1127,    0, 1127, 1127,    0,    0,    0,
     1127,    0,    0,    0, 1127,    0,    0,    0,    0, 1127,
     1130,    0,    0,    0,    0,    0,    0,    0, 1130,    0,
     1130, 1130, 1130, 1130, 1130,    0,    0,    0,    0,    0,
        0, 1130, 1131, 1131,    0, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,    0, 1131,
     1131,    0, 1131, 1131, 1131, 1133,    0, 1133,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1133,    0,    0, 1133,    0,    0,    0,    0,    0,    0,
        0, 1133, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,
     1135,    0, 1135, 1135,    0, 1135, 1135, 1135, 1135, 1135,
     1135,    0,    0, 1135,    0, 1135, 1135, 1135, 1138,    0,
        0,    0,    0, 1138,    0,    0,    0,    0,    0, 1138,
        0, 1138, 1138,    0, 1138,    0,    0,    0,    0, 1138,

     1140,    0,    0,    0,    0,    0,    0,    0, 1140,    0,
        0,    0, 1140,    0, 1140,    0,    0,    0, 1140, 1140,
        0,    0,    0, 1140,    0,    0, 1140, 1144, 1144,    0,
     1144, 1144, 1144, 1144,    0, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
     1147, 1147, 1147,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1147,    0,    0, 1147, 1148, 1148, 1148,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0, 1148,    0,    0,    0,    0,
     1148,    0,    0, 1148, 1150,    0,    0,    0,    0, 1150,
        0,    0,    0,    0,    0, 1150,    0, 1150, 1150,    0,
     1150,    0,    0,    0,    0, 1150, 1151,    0,    0,    0,
        0,    0,    0,    0, 1151,    0,    0, 1151, 1151,    0,
     1151,    0,    0,    0, 1151, 1151,    0, 1151,    0, 1151,
        0,    0, 1151, 1152,    0,    0,    0,    0, 1152,    0,
        0, 1152,    0, 1152, 1152,    0, 1152, 1152,    0, 1152,
        0,    0,    0, 1152, 1152, 1154,    0,    0,    0,    0,
        0,    0,    0, 1154,    0,    0,    0, 1154,    0, 1154,

        0,    0,    0, 1154, 1154,    0,    0,    0, 1154,    0,
        0, 1154, 1155,    0,    0,    0, 1155, 1155, 1155,    0,
     1155,    0, 1155, 1155,    0, 1155, 1155,    0, 1155, 1155,
     1155, 1155, 1155,    0, 1155, 1155,    0,    0, 1155, 1155,
        0,    0,    0,    0, 1155, 1156,    0,    0,    0, 1156,
     1156,    0,    0, 1156,    0, 1156, 1156,    0, 1156, 1156,
        0, 1156,    0, 1156, 1156,    0,    0, 1156, 1156,    0,
        0,    0, 1156,    0,    0,    0,    0, 1156, 1157,    0,
        0,    0,    0,    0,    0,    0, 1157,    0,    0,    0,
     1157,    0, 1157,    0,    0,    0, 1157, 1157,    0,    0,

        0, 1157,    0,    0, 1157, 1159, 1159, 1159,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1159,    0,
        0, 1159, 1160, 1160, 1160,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1160,    0,    0,    0,    0, 1160,    0,    0, 1160, 1162,
        0,    0, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162,    0, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1162, 1162, 1163,    0, 1163, 1163, 1163, 1163, 1163,    0,

        0,    0,    0,    0,    0, 1163,    0, 1163, 1164, 1164,
        0, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
     1164, 1165, 1165,    0, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165, 1165,
     1165, 1165, 1165, 1165, 1166, 1166,    0, 1166, 1166, 1166,
     1166,    0, 1166,    0, 1166, 1166, 1166, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166,    0, 1166, 1166, 1166,

        0, 1166, 1166,    0,    0,    0, 1166, 1168, 1168,    0,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168,
     1168, 1168, 1168,    0, 1168, 1168,    0, 1168, 1168, 1168,
     1170,    0,    0,    0,    0, 1170,    0,    0,    0,    0,
        0, 1170,    0, 1170, 1170,    0, 1170,    0,    0,    0,
        0, 1170, 1171,    0,    0,    0,    0,    0,    0,    0,
     1171,    0,    0,    0, 1171,    0, 1171,    0,    0,    0,
     1171, 1171,    0,    0,    0, 1171,    0,    0, 1171, 1174,
     1174,    0, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,

     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
     1174, 1174, 1176, 1176, 1176,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1176,    0,    0,    0, 1176, 1176,    0,    0, 1176, 1178,
        0,    0,    0,    0, 1178,    0,    0,    0,    0,    0,
     1178,    0, 1178, 1178,    0, 1178,    0,    0,    0,    0,
     1178, 1179,    0,    0,    0,    0,    0,    0,    0, 1179,
        0,    0,    0, 1179,    0, 1179,    0,    0,    0, 1179,
     1179,    0,    0,    0, 1179,    0,    0, 1179, 1180,    0,

        0,    0,    0, 1180,    0,    0, 1180,    0, 1180, 1180,
        0, 1180, 1180,    0, 1180,    0,    0,    0, 1180, 1180,
     1183,    0,    0,    0, 1183, 1183, 1183,    0, 1183,    0,
     1183, 1183,    0, 1183, 1183,    0, 1183, 1183, 1183, 1183,
     1183,    0, 1183, 1183,    0,    0, 1183, 1183,    0,    0,
        0,    0, 1183, 1184,    0, 1184, 1184, 1184, 1184, 1184,
     1184,    0,    0, 1184,    0, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184,    0, 1184, 1184, 1184,    0,    0,    0,
        0, 1184, 1185,    0,    0,    0,    0,    0,    0,    0,
     1185,    0,    0,    0, 1185,    0, 1185,    0,    0,    0,

     1185, 1185,    0,    0,    0, 1185,    0,    0, 1185, 1186,
     1186, 1186,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1186,    0,    0,
        0, 1186, 1186,    0,    0, 1186, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187,    0, 1187, 1187, 1187, 1187,
     1187, 1187, 1187,    0, 1187, 1187, 1187, 1187, 1187, 1189,
     1189, 1189,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1189, 1189,    0,    0, 1189, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,    0, 1190,
        0, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1191,
        0, 1191, 1191, 1191, 1191, 1191, 1191,    0,    0, 1191,
        0, 1191, 1191, 1191, 1191, 1191, 1191,    0, 1191,    0,
     1191, 1191, 1191,    0,    0, 1191,    0, 1191, 1192,    0,
     1192, 1192, 1192, 1192, 1192, 1192,    0,    0, 1192,    0,
     1192, 1192, 1192, 1192, 1192, 1192,    0, 1192,    0, 1192,
     1192, 1192,    0,    0, 1192,    0, 1192, 1193, 1193, 1193,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0, 1193,
     1193,    0,    0, 1193, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194,    0, 1194,    0, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195,    0, 1195, 1195, 1195,
     1195, 1195, 1195, 1195,    0, 1195, 1195, 1195, 1195, 1195,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1198,    0, 1198, 1198,
     1198, 1198, 1198,    0, 1198,    0, 1198,    0, 1198, 1198,
     1198, 1198, 1198, 1198,    0, 1198,    0, 1198, 1198, 1198,
        0,    0,    0, 1198, 1198, 1199,    0, 1199, 1199, 1199,
     1199, 1199, 1199,    0,    0, 1199,    0, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199,    0, 1199, 1199, 1199,    0,

        0, 1199,    0, 1199, 1200,    0, 1200, 1200, 1200, 1200,
     1200, 1200,    0,    0, 1200,    0, 1200, 1200, 1200, 1200,
     1200, 1200,    0, 1200,    0, 1200, 1200, 1200,    0,    0,
     1200,    0, 1200, 1201, 1201,    0, 1201, 1201,    0, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201,    0, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1202, 1202,    0, 1202,
     1202,    0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
        0, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1203,

     1203,    0, 1203, 1203,    0, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203,    0, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1204,    0,    0,    0, 1204, 1204, 1204,    0,
     1204,    0, 1204, 1204,    0, 1204, 1204,    0, 1204, 1204,
     1204, 1204, 1204,    0, 1204, 1204,    0,    0, 1204, 1204,
        0,    0,    0,    0, 1204, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1206, 1206,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1207, 1207,    0, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1208, 1208,    0, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1209, 1209,    0,

     1209, 1209, 1209, 1209,    0, 1209,    0, 1209, 1209, 1209,
     1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209, 1209,    0,
     1209, 1209, 1209,    0, 1209, 1209,    0,    0,    0, 1209,
     1210,    0,    0, 1210,    0, 1210, 1210, 1210, 1210, 1210,
        0, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1210, 1210,    0,    0,    0,
     1210, 1210, 1211,    0, 1211, 1211, 1211, 1211, 1211, 1211,
        0,    0, 1211,    0, 1211, 1211, 1211, 1211, 1211, 1211,
        0, 1211,    0, 1211, 1211, 1211,    0,    0, 1211,    0,
     1211, 1212,    0, 1212, 1212, 1212, 1212, 1212, 1212,    0,

        0, 1212,    0, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
     1212,    0, 1212, 1212, 1212,    0,    0, 1212,    0, 1212,
     1213, 1213,    0, 1213, 1213,    0, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214,    0, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
        0, 1214, 1214, 1214, 1214, 1214, 1215, 1215,    0, 1215,
     1215,    0, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,

     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215,
     1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1215, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,    0, 1216,
     1216, 1216, 1216, 1216, 1216, 1216,    0, 1216, 1216, 1216,
     1216, 1216, 1217, 1217,    0, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,    0,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1218,    0,    0,    0, 1218,
     1218,    0,    0, 1218,    0, 1218, 1218,    0, 1218, 1218,

        0, 1218,    0, 1218, 1218,    0,    0,    0, 1218,    0,
        0,    0, 1218,    0,    0,    0,    0, 1218, 1219,    0,
        0,    0,    0,    0,    0,    0, 1219,    0,    0, 1219,
     1219,    0, 1219,    0,    0,    0, 1219, 1219,    0, 1219,
        0, 1219,    0,    0, 1219, 1220,    0,    0,    0, 1220,
     1220,    0,    0, 1220,    0, 1220, 1220,    0, 1220, 1220,
        0, 1220, 1220, 1220, 1220,    0,    0,    0, 1220,    0,
        0, 1220, 1220,    0,    0,    0,    0, 1220, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221,    0, 1221, 1221,

     1221, 1221, 1221, 1221, 1221,    0, 1221, 1221, 1221, 1221,
     1221, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
        0, 1222, 1222, 1222, 1222, 1222, 1222, 1222,    0, 1222,
     1222, 1222, 1222, 1222, 1223,    0,    0,    0,    0,    0,
        0,    0, 1223,    0,    0, 1223, 1223,    0, 1223,    0,
        0,    0, 1223, 1223,    0, 1223,    0, 1223,    0,    0,
     1223, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
        0, 1224, 1224, 1224, 1224, 1224, 1224, 1224,    0, 1224,

     1224, 1224, 1224, 1224, 1225,    0,    0,    0,    0,    0,
        0,    0, 1225,    0, 1225,    0, 1225,    0, 1225,    0,
        0,    0, 1225, 1225,    0, 1225, 1225, 1225,    0,    0,
     1225, 1226,    0,    0, 1226,    0, 1226, 1226,    0, 1226,
        0,    0,    0, 1226,    0,    0, 1226, 1226, 1227,    0,
        0,    0,    0,    0,    0,    0, 1227,    0,    0, 1227,
     1227,    0, 1227,    0,    0,    0, 1227, 1227,    0, 1227,
        0, 1227,    0,    0, 1227, 1228,    0,    0,    0,    0,
        0,    0,    0, 1228,    0,    0, 1228, 1228,    0, 1228,
        0,    0,    0, 1228, 1228,    0, 1228,    0, 1228,    0,

        0, 1228, 1229,    0, 1229, 1229, 1229, 1229, 1229, 1229,
        0,    0, 1229,    0, 1229, 1229, 1229, 1229, 1229, 1229,
        0, 1229,    0, 1229, 1229, 1229,    0,    0, 1229,    0,
     1229, 1230,    0,    0, 1230,    0, 1230, 1230, 1230, 1230,
     1230,    0, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,    0,    0,
        0, 1230, 1230, 1231, 1231,    0, 1231, 1231,    0, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231,    0, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1232,    0,    0, 1232,

        0, 1232, 1232, 1232, 1232, 1232,    0, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232,    0,    0,    0, 1232, 1232, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,

     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "doctokenizer.l"
#define INITIAL 0
/******************************************************************************
 *
 * $Id: $
 *
 *
 * Copyright (C) 1997-2004 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 20 "doctokenizer.l"

#include <qfile.h>
#include <qstring.h>
#include <qstack.h>
#include <qdict.h>

#include "doctokenizer.h"
#include "cmdmapper.h"
#include "config.h"
#include "message.h"
#include "section.h"
#include "membergroup.h"
#include "definition.h"
#include "doxygen.h"

#define YY_NEVER_INTERACTIVE 1
  
//--------------------------------------------------------------------------

// context for tokenizer phase
static int g_commentState;
TokenInfo *g_token = 0;
static int g_inputPos = 0;
static const char *g_inputString;
static QString g_fileName;
static bool g_insidePre;

// context for section finding phase
static Definition  *g_definition;
static MemberGroup *g_memberGroup;
static QCString     g_secLabel;
static QCString     g_secTitle;
static SectionInfo::SectionType g_secType;
static QCString     g_endMarker;

struct DocLexerContext
{
  TokenInfo *token;
  int rule;
  int inputPos;
  const char *inputString;
  YY_BUFFER_STATE state;
};

static QStack<DocLexerContext> g_lexerStack;

//--------------------------------------------------------------------------

void doctokenizerYYpushContext()
{
  DocLexerContext *ctx = new DocLexerContext;
  ctx->rule = YY_START;
  ctx->token = g_token;
  ctx->inputPos = g_inputPos;
  ctx->inputString = g_inputString;
  ctx->state = YY_CURRENT_BUFFER;
  g_lexerStack.push(ctx);
  yy_switch_to_buffer(yy_create_buffer(doctokenizerYYin, YY_BUF_SIZE));
}

bool doctokenizerYYpopContext()
{
  if (g_lexerStack.isEmpty()) return FALSE;
  DocLexerContext *ctx = g_lexerStack.pop();
  g_inputPos = ctx->inputPos;
  g_inputString = ctx->inputString;
  yy_delete_buffer(YY_CURRENT_BUFFER);
  yy_switch_to_buffer(ctx->state);
  BEGIN(ctx->rule);
  delete ctx;
  return TRUE;
}


//--------------------------------------------------------------------------

const char *tokToString(int token)
{
  switch (token)
  {
    case 0:              return "TK_EOF";
    case TK_WORD:        return "TK_WORD";
    case TK_LNKWORD:     return "TK_LNKWORD";
    case TK_WHITESPACE:  return "TK_WHITESPACE";
    case TK_LISTITEM:    return "TK_LISTITEM";
    case TK_ENDLIST:     return "TK_ENDLIST";
    case TK_COMMAND:     return "TK_COMMAND";
    case TK_HTMLTAG:     return "TK_HTMLTAG";
    case TK_SYMBOL:      return "TK_SYMBOL";
    case TK_NEWPARA:     return "TK_NEWPARA";
    case TK_RCSTAG:      return "TK_RCSTAG";
    case TK_URL:         return "TK_URL";
  }
  return "ERROR";
}

static int computeIndent(const char *str,int length)
{
  int i;
  int indent=0;
  int tabSize=Config_getInt("TAB_SIZE");
  for (i=0;i<length;i++)
  {
    if (str[i]=='\t')
    {
      indent+=tabSize - (indent%tabSize);
    }
    else if (str[i]=='\n')
    {
      indent=0;
    }
    else
    {
      indent++;
    }
  }
  return indent;
}

/*! converts input string \a opt into a list of Html Attributes. Each
 *  attribute is a name, value pair. The result is stored in g_token->attribs
 */
static void parseHtmlAttribs(const char *att)
{
  //printf("parseHtmlAttribs(%s)\n",att);
  QCString attribs=att;
  int len = attribs.length();
  char c;
  int i=0,startName,endName,startAttrib,endAttrib;
  while (i<len)
  {
    c=attribs.at(i);
    // skip spaces
    while (i<len && c==' ') { c=attribs.at(++i); }
    startName=i;
    // search for end of name
    while (i<len && c!=' ' && c!='=') { c=attribs.at(++i); }
    endName=i;
    HtmlAttrib opt;
    opt.name  = attribs.mid(startName,endName-startName).lower(); 
    // skip spaces
    while (i<len && c==' ') { c=attribs.at(++i); } 
    if (attribs.at(i)=='=') // option has value
    {
      c=attribs.at(++i);
      // skip spaces
      while (i<len && c==' ') { c=attribs.at(++i); } 
      if (attribs.at(i)=='\'') // option '...'
      {
        c=attribs.at(++i);
	startAttrib=i;
	
	// search for matching quote 
        while (i<len && c!='\'') { c=attribs.at(++i); } 
	endAttrib=i;
        if (i<len) c=attribs.at(++i);
      }
      else if (attribs.at(i)=='"') // option "..."
      {
        c=attribs.at(++i);
	startAttrib=i;
	// search for matching quote 
        while (i<len && c!='"') { c=attribs.at(++i); } 
	endAttrib=i;
        if (i<len) c=attribs.at(++i);
      }
      else // value without any quotes
      {
	startAttrib=i;
	// search for separator
        while (i<len && c!=' ') { c=attribs.at(++i); } 
	endAttrib=i;
	if (i<len) c=attribs.at(++i);
      }
      opt.value  = attribs.mid(startAttrib,endAttrib-startAttrib); 
    }
    else // start next option
    {
    }
    //printf("=====> Adding option name=<%s> value=<%s>\n",
    //    opt.name.data(),opt.value.data());
    g_token->attribs.append(&opt);
  }
}

//--------------------------------------------------------------------------

static void processSection()
{
  //printf("%s: found section/anchor with name `%s'\n",g_fileName.data(),g_secLabel.data());
  QCString file;
  if (g_memberGroup)
  {
    file = g_memberGroup->parent()->getOutputFileBase();
  }
  else if (g_definition)
  {
    file = g_definition->getOutputFileBase();
  }
  else
  {
    warn(g_fileName,yylineno,"Found section/anchor %s without context\n",g_secLabel.data()); 
  }
  SectionInfo *si=0;
  if ((si=Doxygen::sectionDict.find(g_secLabel)))
  {
    si->fileName = file;
    //si = new SectionInfo(file,g_secLabel,g_secTitle,g_secType);
    //Doxygen::sectionDict.insert(g_secLabel,si);
  }
}

static void handleHtmlTag()
{
  g_token->name = yytext;
  g_token->attribs.clear();
  int startNamePos=1;
  if (g_token->name.at(1)=='/') startNamePos++;
  int attSep=0;
  while (attSep<yyleng && !isspace(yytext[attSep]))
  {
    attSep++;
  }
  if (attSep!=yyleng) // tag has one or more options
  {
    parseHtmlAttribs(g_token->name.mid(attSep+1,g_token->name.length()-attSep-2));
    g_token->name=g_token->name.mid(startNamePos,attSep-1).lower();
  }
  else // tag without options, strip brackets
  {
    g_token->name=g_token->name.mid(startNamePos,g_token->name.length()-startNamePos-1).lower();
  }
  g_token->endTag = startNamePos==2;
}

//--------------------------------------------------------------------------

#undef  YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int c=0;
  const char *src=g_inputString+g_inputPos;
  while ( c < max_size && *src ) *buf++ = *src++, c++;
  g_inputPos+=c;
  return c;
}

//--------------------------------------------------------------------------

#define St_Para 1

#define St_Comment 2

#define St_Title 3

#define St_TitleN 4

#define St_TitleQ 5

#define St_TitleA 6

#define St_TitleV 7

#define St_Code 8

#define St_HtmlOnly 9

#define St_ManOnly 10

#define St_LatexOnly 11

#define St_XmlOnly 12

#define St_Verbatim 13

#define St_Dot 14

#define St_Param 15

#define St_XRefItem 16

#define St_XRefItem2 17

#define St_File 18

#define St_Pattern 19

#define St_Link 20

#define St_Ref 21

#define St_Ref2 22

#define St_IntRef 23

#define St_Text 24

#define St_SkipTitle 25

#define St_Sections 26

#define St_SecLabel1 27

#define St_SecLabel2 28

#define St_SecTitle 29

#define St_SecSkip 30


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 355 "doctokenizer.l"


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1001 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 13229 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 356 "doctokenizer.l"
/* skip carriage return */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 357 "doctokenizer.l"
{ /* list item */ 
                         QString text=yytext;
			 int dashPos = text.findRev('-');
			 g_token->isEnumList = text.at(dashPos+1)=='#';
			 g_token->indent     = computeIndent(yytext,dashPos);
                         return TK_LISTITEM;
                       }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 364 "doctokenizer.l"
{ /* list item on next line */ 
                         QString text=yytext;
			 text=text.right(text.length()-text.find('\n')-1);
			 int dashPos = text.findRev('-');
			 g_token->isEnumList = text.at(dashPos+1)=='#';
			 g_token->indent     = computeIndent(text,dashPos);
                         return TK_LISTITEM;
                       }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 372 "doctokenizer.l"
{ /* end list */ 
                         int dotPos = QString(yytext).findRev('.');
			 g_token->indent     = computeIndent(yytext,dotPos);
                         return TK_ENDLIST;
                       }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 377 "doctokenizer.l"
{ /* end list on next line */ 
                         QString text=yytext;
			 text=text.right(text.length()-text.find('\n')-1);
                         int dotPos = text.findRev('.');
			 g_token->indent     = computeIndent(text,dotPos);
                         return TK_ENDLIST;
                       }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 384 "doctokenizer.l"
{
  			 g_token->name = "javalink";
			 return TK_COMMAND;
  		       }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 388 "doctokenizer.l"
{
  			 g_token->name = "form";
			 bool ok;
			 g_token->id = QString(yytext).right(yyleng-6).toInt(&ok);
			 ASSERT(ok);
			 return TK_COMMAND;
  		       }
	YY_BREAK
case 8:
#line 396 "doctokenizer.l"
case 9:
YY_RULE_SETUP
#line 396 "doctokenizer.l"
{ /* special command */
                         g_token->name = yytext+1;
			 g_token->paramDir=TokenInfo::Unspecified;
                         return TK_COMMAND;
  		       }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 401 "doctokenizer.l"
{ /* param [in,out] command */
  			 g_token->name = "param";
			 QString s(yytext);
			 bool isIn  = s.find("in")!=-1;
			 bool isOut = s.find("out")!=-1;
			 if (isIn)
			 {
			   if (isOut)
			   {
			     g_token->paramDir=TokenInfo::InOut;
			   }
			   else
			   {
			     g_token->paramDir=TokenInfo::In;
			   }
			 }
			 else if (isOut)
			 {
			   g_token->paramDir=TokenInfo::Out;
			 }
			 else
			 {
			   g_token->paramDir=TokenInfo::Unspecified;
			 }
			 return TK_COMMAND;
  		       }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 427 "doctokenizer.l"
{ // URL
                         g_token->name=yytext;
			 g_token->isEMailAddr=FALSE;
			 return TK_URL;
                       }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 432 "doctokenizer.l"
{ // Mail address
                         g_token->name=yytext;
			 g_token->isEMailAddr=TRUE;
			 return TK_URL;
                       }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 437 "doctokenizer.l"
{ /* RCS tag */
                         QString tagName(yytext+1);
			 int index=tagName.find(':');
  			 g_token->name = tagName.left(index);
			 g_token->text = tagName.mid(index+1,tagName.length()-index-2);
			 return TK_RCSTAG;
  		       }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 444 "doctokenizer.l"
{ /* environment variable */
                         QCString name = &yytext[2];
			 name = name.left(name.length()-1);
			 QCString value = getenv(name);
			 for (int i=value.length()-1;i>=0;i--) unput(value.at(i));
                       }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 450 "doctokenizer.l"
{ /* html tag */ 
                         handleHtmlTag();
                         return TK_HTMLTAG;
                       }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 454 "doctokenizer.l"
{ /* special symbol */ 
                         g_token->name = yytext;
                         return TK_SYMBOL;
                       }
	YY_BREAK
/********* patterns for linkable words ******************/
case 17:
YY_RULE_SETUP
#line 461 "doctokenizer.l"
{ /* this rule is to prevent opening html 
				  * tag to be recognized as a templated classes 
				  */ 
                         g_token->name = yytext;
                         return TK_LNKWORD;
  			}
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
#line 468 "doctokenizer.l"
case 19:
#line 469 "doctokenizer.l"
case 20:
#line 470 "doctokenizer.l"
case 21:
YY_RULE_SETUP
#line 470 "doctokenizer.l"
{
                         g_token->name = yytext;
                         return TK_LNKWORD;
  		       }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 474 "doctokenizer.l"
{
                         g_token->name = yytext;
                         g_token->name = g_token->name.left(g_token->name.length()-1);
			 unput(yytext[yyleng-1]);
                         return TK_LNKWORD;
                       }
	YY_BREAK
/********* patterns for normal words ******************/
case 23:
#line 483 "doctokenizer.l"
case 24:
YY_RULE_SETUP
#line 483 "doctokenizer.l"
{ /* function call */ 
                         if (yytext[0]=='%') // strip % if present
			   g_token->name = &yytext[1];
			 else
                           g_token->name = yytext;
                         return TK_WORD;

			 /* the following is dummy code to please the 
			  * compiler, removing this results in a warning 
			  * on my machine 
			  */ 
			 goto find_rule;
                       }
	YY_BREAK
/*******************************************************/
case 25:
#line 500 "doctokenizer.l"
case 26:
YY_RULE_SETUP
#line 500 "doctokenizer.l"
{ /* white space */ 
                         g_token->chars=yytext;
                         return TK_WHITESPACE;
                       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 504 "doctokenizer.l"
{
                         g_token->name = yytext;
                         return TK_COMMAND;
  		       }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 508 "doctokenizer.l"
{
                         if (g_insidePre)
			 {
			   /* Inside a <pre>..</pre> blank lines are treated
			    * as whitespace.
			    */
                           g_token->chars=yytext;
			   return TK_WHITESPACE;
			 }
			 else
			 {
                           /* start of a new paragraph */
  		           return TK_NEWPARA;
			 }
                       }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 523 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 30:
#line 527 "doctokenizer.l"
case 31:
#line 528 "doctokenizer.l"
case 32:
YY_RULE_SETUP
#line 528 "doctokenizer.l"
{
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 531 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 34:
#line 535 "doctokenizer.l"
case 35:
#line 536 "doctokenizer.l"
case 36:
YY_RULE_SETUP
#line 536 "doctokenizer.l"
{
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 539 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 38:
#line 543 "doctokenizer.l"
case 39:
#line 544 "doctokenizer.l"
case 40:
YY_RULE_SETUP
#line 544 "doctokenizer.l"
{
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 547 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 42:
#line 551 "doctokenizer.l"
case 43:
#line 552 "doctokenizer.l"
case 44:
YY_RULE_SETUP
#line 552 "doctokenizer.l"
{
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 555 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 46:
#line 559 "doctokenizer.l"
case 47:
#line 560 "doctokenizer.l"
case 48:
YY_RULE_SETUP
#line 560 "doctokenizer.l"
{
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 563 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 50:
#line 567 "doctokenizer.l"
case 51:
#line 568 "doctokenizer.l"
case 52:
YY_RULE_SETUP
#line 568 "doctokenizer.l"
{ /* Verbatim text */
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 571 "doctokenizer.l"
{
                         return RetVal_OK;
                       }
	YY_BREAK
case 54:
#line 575 "doctokenizer.l"
case 55:
#line 576 "doctokenizer.l"
case 56:
YY_RULE_SETUP
#line 576 "doctokenizer.l"
{ /* dot text */
  			 g_token->verb+=yytext;
  		       }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 579 "doctokenizer.l"
{ // quoted title
  			 BEGIN(St_TitleQ);
  		       } 
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 582 "doctokenizer.l"
{
                         g_token->chars=yytext;
  			 return TK_WHITESPACE;
                       }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 586 "doctokenizer.l"
{ // non-quoted title
  			 unput(*yytext);
			 BEGIN(St_TitleN);
                       }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 590 "doctokenizer.l"
{
                         unput(*yytext);
  			 return 0;
  		       }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 594 "doctokenizer.l"
{ /* symbol */
                         g_token->name = yytext;
  		         return TK_SYMBOL;
                       }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 598 "doctokenizer.l"
{
  		       }
	YY_BREAK
case 63:
#line 601 "doctokenizer.l"
case 64:
YY_RULE_SETUP
#line 601 "doctokenizer.l"
{ /* special command */ 
                         g_token->name = yytext+1;
			 g_token->paramDir=TokenInfo::Unspecified;
                         return TK_COMMAND;
                       }
	YY_BREAK
case 65:
#line 607 "doctokenizer.l"
case 66:
YY_RULE_SETUP
#line 607 "doctokenizer.l"
{ /* word */
                         if (yytext[0]=='%') // strip % if present
			   g_token->name = &yytext[1];
			 else
                           g_token->name = yytext;
			 return TK_WORD;
                       }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 614 "doctokenizer.l"
{
                         g_token->chars=yytext;
  			 return TK_WHITESPACE;
                       }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 618 "doctokenizer.l"
{ /* new line => end of title */
                         unput(*yytext);
  			 return 0;
                       }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 622 "doctokenizer.l"
{ /* symbol */
                         g_token->name = yytext;
  		         return TK_SYMBOL;
                       }
	YY_BREAK
case 70:
#line 627 "doctokenizer.l"
case 71:
YY_RULE_SETUP
#line 627 "doctokenizer.l"
{ /* special command */ 
                         g_token->name = yytext+1;
			 g_token->paramDir=TokenInfo::Unspecified;
                         return TK_COMMAND;
                       }
	YY_BREAK
case 72:
#line 633 "doctokenizer.l"
case 73:
YY_RULE_SETUP
#line 633 "doctokenizer.l"
{ /* word */
                         g_token->name = yytext;
			 return TK_WORD;
                       }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 637 "doctokenizer.l"
{
                         g_token->chars=yytext;
  			 return TK_WHITESPACE;
                       }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 641 "doctokenizer.l"
{ /* closing quote => end of title */
  			 BEGIN(St_TitleA);
  			 return 0;
                       }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 645 "doctokenizer.l"
{ /* new line => end of title */
                         unput(*yytext);
  			 return 0;
                       }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 649 "doctokenizer.l"
{ // title attribute
  			 g_token->name = yytext;
			 g_token->name = g_token->name.left(
			       g_token->name.find('=')).stripWhiteSpace();
  			 BEGIN(St_TitleV);
  		       }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 655 "doctokenizer.l"
{ // attribute value
  			 g_token->chars = yytext;
			 BEGIN(St_TitleN);
			 return TK_WORD;
  		       }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 660 "doctokenizer.l"
{
  			 unput(*yytext);
  			 return 0;
                       }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 664 "doctokenizer.l"
{
  			 return 0;
                       }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 668 "doctokenizer.l"
{
  			 g_token->name=yytext;
			 return TK_WORD;
  		       }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 672 "doctokenizer.l"
{ 
  			 unput(' ');
  			 return 0;
                       }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 676 "doctokenizer.l"
{
  			 BEGIN(St_Ref2);
                       }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 679 "doctokenizer.l"
{
                         unput(*yytext);
  			 return 0;
  		       }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 683 "doctokenizer.l"
{
                         unput(*yytext);
  			 return 0;
  		       }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 687 "doctokenizer.l"
{
                         g_token->name = yytext;
			 return TK_WORD;
  		       }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 691 "doctokenizer.l"
{
                         BEGIN(St_Ref2);
                       }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 694 "doctokenizer.l"
{ /* symbol */
                         g_token->name = yytext;
  		         return TK_SYMBOL;
                       }
	YY_BREAK
case 89:
#line 699 "doctokenizer.l"
case 90:
YY_RULE_SETUP
#line 699 "doctokenizer.l"
{ /* special command */ 
                         g_token->name = yytext+1;
			 g_token->paramDir=TokenInfo::Unspecified;
                         return TK_COMMAND;
                       }
	YY_BREAK
case 91:
#line 705 "doctokenizer.l"
case 92:
YY_RULE_SETUP
#line 705 "doctokenizer.l"
{
                         /* word */
                         g_token->name = yytext;
			 return TK_WORD;
                       }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 710 "doctokenizer.l"
{
                         g_token->chars=yytext;
  			 return TK_WHITESPACE;
                       }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 714 "doctokenizer.l"
{ /* " or \n => end of title */
  			 return 0;
                       }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 717 "doctokenizer.l"
{
                         g_token->name=yytext;
                       }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 720 "doctokenizer.l"
{
                         BEGIN(St_XRefItem2);
                       }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 723 "doctokenizer.l"
{
  			 QString numStr=yytext;
			 numStr=numStr.left(yyleng-1);
			 g_token->id=numStr.toInt();
			 return RetVal_OK;
  		       }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 729 "doctokenizer.l"
{ /* html style comment block */
                         g_commentState = YY_START;
                         BEGIN(St_Comment); 
                       }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 733 "doctokenizer.l"
{
  			 g_token->name = yytext+1;
			 g_token->name = g_token->name.left(yyleng-2);
			 return TK_WORD;
                       }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 738 "doctokenizer.l"
{
  			 g_token->name = yytext;
			 return TK_WORD;
                       }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 742 "doctokenizer.l"
/* param separator */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 743 "doctokenizer.l"
{
                         g_token->chars=yytext;
                         return TK_WHITESPACE;
                       }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 747 "doctokenizer.l"
{
  			 g_token->name = yytext;
			 return TK_WORD;  
  		       }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 751 "doctokenizer.l"
{
  		         QString text=yytext;
			 g_token->name = text.mid(1,text.length()-2);
			 return TK_WORD;
  		       }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 756 "doctokenizer.l"
{
                         g_token->name = yytext;
                         g_token->name = g_token->name.stripWhiteSpace();
			 return TK_WORD;
  		       }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 761 "doctokenizer.l"
{
                         g_token->name = yytext;
			 return TK_WORD;
                       }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 765 "doctokenizer.l"
{ /* end of html comment */
                         BEGIN(g_commentState); 
                       }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 768 "doctokenizer.l"
/* inside html comment */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 769 "doctokenizer.l"
/* inside html comment */
	YY_BREAK
/* State for skipping title (all chars until the end of the line) */
case 110:
YY_RULE_SETUP
#line 773 "doctokenizer.l"

	YY_BREAK
case 111:
YY_RULE_SETUP
#line 774 "doctokenizer.l"
{ return 0; }
	YY_BREAK
/* State for the pass used to find the anchors and sections */ 
case 112:
YY_RULE_SETUP
#line 778 "doctokenizer.l"

	YY_BREAK
case 113:
YY_RULE_SETUP
#line 779 "doctokenizer.l"

	YY_BREAK
case 114:
YY_RULE_SETUP
#line 780 "doctokenizer.l"
{ 
                                      g_secType = SectionInfo::Anchor; 
				      BEGIN(St_SecLabel1); 
                                    }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 784 "doctokenizer.l"
{ 
                                      g_secType = SectionInfo::Section; 
                                      BEGIN(St_SecLabel2); 
                                    }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 788 "doctokenizer.l"
{ 
                                      g_secType = SectionInfo::Subsection; 
                                      BEGIN(St_SecLabel2); 
                                    }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 792 "doctokenizer.l"
{ 
                                      g_secType = SectionInfo::Subsubsection; 
                                      BEGIN(St_SecLabel2); 
                                    }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 796 "doctokenizer.l"
{ 
                                      g_secType = SectionInfo::Paragraph; 
                                      BEGIN(St_SecLabel2); 
                                    }
	YY_BREAK
case 119:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 800 "doctokenizer.l"
{
                                      g_endMarker="endverbatim";
				      BEGIN(St_SecSkip);
  				    }
	YY_BREAK
case 120:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 804 "doctokenizer.l"
{
                                      g_endMarker="enddot";
				      BEGIN(St_SecSkip);
  				    }
	YY_BREAK
case 121:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 808 "doctokenizer.l"
{
                                      g_endMarker="endhtmlonly";
				      BEGIN(St_SecSkip);
                                    }
	YY_BREAK
case 122:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 812 "doctokenizer.l"
{
                                      g_endMarker="endlatexonly";
				      BEGIN(St_SecSkip);
                                    }
	YY_BREAK
case 123:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 816 "doctokenizer.l"
{
                                      g_endMarker="endxmlonly";
				      BEGIN(St_SecSkip);
                                    }
	YY_BREAK
case 124:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 820 "doctokenizer.l"
{
                                      g_endMarker="endcode";
				      BEGIN(St_SecSkip);
  				    }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 824 "doctokenizer.l"
{
                                      g_endMarker="-->";
				      BEGIN(St_SecSkip);
                                    }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 828 "doctokenizer.l"
{
                                      if (strcmp(yytext+1,g_endMarker)==0)
				      {
					BEGIN(St_Sections);
				      }
                                    }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 834 "doctokenizer.l"
{
                                      if (strcmp(yytext,g_endMarker)==0)
				      {
					BEGIN(St_Sections);
				      }
                                    }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 840 "doctokenizer.l"

	YY_BREAK
case 129:
YY_RULE_SETUP
#line 841 "doctokenizer.l"

	YY_BREAK
case 130:
YY_RULE_SETUP
#line 842 "doctokenizer.l"

	YY_BREAK
case 131:
YY_RULE_SETUP
#line 843 "doctokenizer.l"

	YY_BREAK
case 132:
YY_RULE_SETUP
#line 844 "doctokenizer.l"

	YY_BREAK
case 133:
YY_RULE_SETUP
#line 845 "doctokenizer.l"
{ 
                         g_secLabel = yytext;
                         processSection();
                         BEGIN(St_Sections);
                       }
	YY_BREAK
case 134:
#line 851 "doctokenizer.l"
case 135:
YY_RULE_SETUP
#line 851 "doctokenizer.l"
{ 
                         g_secLabel = yytext;
			 g_secLabel = g_secLabel.stripWhiteSpace();
                         BEGIN(St_SecTitle);
                       }
	YY_BREAK
case 136:
#line 857 "doctokenizer.l"
case 137:
YY_RULE_SETUP
#line 857 "doctokenizer.l"
{
                         g_secTitle = yytext;
			 g_secTitle = g_secTitle.stripWhiteSpace();
                         processSection();
                         BEGIN(St_Sections);
		       }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 863 "doctokenizer.l"
{
                         warn(g_fileName,yylineno,"Error: Unexpected character `%s' while looking for section label or title",yytext); 
                       }
	YY_BREAK
/* Generic rules that work for all states */ 
case 139:
YY_RULE_SETUP
#line 868 "doctokenizer.l"
{ 
                         warn(g_fileName,yylineno,"Error: Unexpected new line character"); 
		       }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 871 "doctokenizer.l"
{ /* unescaped special character */
                         //warn(g_fileName,yylineno,"Warning: Unexpected character `%s', assuming command \\%s was meant.",yytext,yytext); 
			 g_token->name = yytext;
			 return TK_COMMAND;
                       }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 876 "doctokenizer.l"
{ 
                         warn(g_fileName,yylineno,"Error: Unexpected character `%s'",yytext); 
		       }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 879 "doctokenizer.l"
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(St_Para):
			case YY_STATE_EOF(St_Comment):
			case YY_STATE_EOF(St_Title):
			case YY_STATE_EOF(St_TitleN):
			case YY_STATE_EOF(St_TitleQ):
			case YY_STATE_EOF(St_TitleA):
			case YY_STATE_EOF(St_TitleV):
			case YY_STATE_EOF(St_Code):
			case YY_STATE_EOF(St_HtmlOnly):
			case YY_STATE_EOF(St_ManOnly):
			case YY_STATE_EOF(St_LatexOnly):
			case YY_STATE_EOF(St_XmlOnly):
			case YY_STATE_EOF(St_Verbatim):
			case YY_STATE_EOF(St_Dot):
			case YY_STATE_EOF(St_Param):
			case YY_STATE_EOF(St_XRefItem):
			case YY_STATE_EOF(St_XRefItem2):
			case YY_STATE_EOF(St_File):
			case YY_STATE_EOF(St_Pattern):
			case YY_STATE_EOF(St_Link):
			case YY_STATE_EOF(St_Ref):
			case YY_STATE_EOF(St_Ref2):
			case YY_STATE_EOF(St_IntRef):
			case YY_STATE_EOF(St_Text):
			case YY_STATE_EOF(St_SkipTitle):
			case YY_STATE_EOF(St_Sections):
			case YY_STATE_EOF(St_SecLabel1):
			case YY_STATE_EOF(St_SecLabel2):
			case YY_STATE_EOF(St_SecTitle):
			case YY_STATE_EOF(St_SecSkip):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1001 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1001 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1000);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');
	if ( yy_current_buffer->yy_at_bol )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 879 "doctokenizer.l"


//--------------------------------------------------------------------------

void doctokenizerYYFindSections(const char *input,Definition *d,
                                MemberGroup *mg,const char *fileName)
{
  if (input==0) return;
  g_inputString = input;
  //printf("parsing --->`%s'<---\n",input);
  g_inputPos    = 0;
  g_definition  = d;
  g_memberGroup = mg;
  g_fileName    = fileName;
  BEGIN(St_Sections);
  doctokenizerYYlineno = 1;
  doctokenizerYYlex();
}

void doctokenizerYYinit(const char *input,const char *fileName)
{
  g_inputString = input;
  g_inputPos    = 0;
  g_fileName    = fileName;
  g_insidePre   = FALSE;
  BEGIN(St_Para);
}

void doctokenizerYYsetStatePara()
{
  BEGIN(St_Para);
}

void doctokenizerYYsetStateTitle()
{
  BEGIN(St_Title);
}

void doctokenizerYYsetStateCode()
{
  g_token->verb="";
  BEGIN(St_Code);
}

void doctokenizerYYsetStateHtmlOnly()
{
  g_token->verb="";
  BEGIN(St_HtmlOnly);
}

void doctokenizerYYsetStateManOnly()
{
  g_token->verb="";
  BEGIN(St_ManOnly);
}

void doctokenizerYYsetStateXmlOnly()
{
  g_token->verb="";
  BEGIN(St_XmlOnly);
}

void doctokenizerYYsetStateLatexOnly()
{
  g_token->verb="";
  BEGIN(St_LatexOnly);
}

void doctokenizerYYsetStateVerbatim()
{
  g_token->verb="";
  BEGIN(St_Verbatim);
}

void doctokenizerYYsetStateDot()
{
  g_token->verb="";
  BEGIN(St_Dot);
}

void doctokenizerYYsetStateParam()
{
  BEGIN(St_Param);
}

void doctokenizerYYsetStateXRefItem()
{
  BEGIN(St_XRefItem);
}

void doctokenizerYYsetStateFile()
{
  BEGIN(St_File);
}

void doctokenizerYYsetStatePattern()
{
  BEGIN(St_Pattern);
}

void doctokenizerYYsetStateLink()
{
  BEGIN(St_Link);
}

void doctokenizerYYsetStateRef()
{
  BEGIN(St_Ref);
}

void doctokenizerYYsetStateInternalRef()
{
  BEGIN(St_IntRef);
}

void doctokenizerYYsetStateText()
{
  BEGIN(St_Text);
}

void doctokenizerYYsetStateSkipTitle()
{
  BEGIN(St_SkipTitle);
}

void doctokenizerYYcleanup()
{
  yy_delete_buffer( YY_CURRENT_BUFFER );
}

void doctokenizerYYsetInsidePre(bool b)
{
  g_insidePre = b;
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
    void doctokenizerYYdummy() { yy_flex_realloc(0,0); }
}
#endif

