#define yy_create_buffer preYY_create_buffer
#define yy_delete_buffer preYY_delete_buffer
#define yy_scan_buffer preYY_scan_buffer
#define yy_scan_string preYY_scan_string
#define yy_scan_bytes preYY_scan_bytes
#define yy_flex_debug preYY_flex_debug
#define yy_init_buffer preYY_init_buffer
#define yy_flush_buffer preYY_flush_buffer
#define yy_load_buffer_state preYY_load_buffer_state
#define yy_switch_to_buffer preYY_switch_to_buffer
#define yyin preYYin
#define yyleng preYYleng
#define yylex preYYlex
#define yyout preYYout
#define yyrestart preYYrestart
#define yytext preYYtext

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 262144

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 138
#define YY_END_OF_BUFFER 139
static yyconst short int yy_acclist[920] =
    {   0,
      121,  121,  139,  137,  138,    1,  137,  138,  136,  138,
        3,  137,  138,  137,  138,    2,  137,  138,    5,  137,
      138,    1,    5,  137,  138,    5,  137,  138,    5,  136,
      138,    3,    5,  137,  138,    4,  137,  138,    5,  137,
      138,    5,  137,  138,    2,    5,  137,  138,   50,  137,
      138,    1,   50,  137,  138,   46,  136,  138,    3,   50,
      137,  138,   50,  137,  138,   47,   50,  137,  138,   47,
       50,  137,  138,   47,   50,  137,  138,   47,   50,  137,
      138,   47,   50,  137,  138,    2,   50,  137,  138,   72,
      137,  138,    1,   72,  137,  138,   70,  136,  138,    3,

       72,  137,  138,   72,  137,  138,   71,   72,  137,  138,
       71,   72,  137,  138,   71,   72,  137,  138,    2,   72,
      137,  138,   73,   74,  137,  138,    1,   73,   74,  137,
      138,   77,  136,  138,    3,   73,   74,  137,  138,   74,
      137,  138,    2,   73,   74,  137,  138,   20,  137,  138,
        1,   20,  137,  138,   21,  136,  138,    3,   20,  137,
      138,   14,   20,  137,  138,   20,  137,  138,   20,  137,
      138,   19,   20,  137,  138,16402,   19,   20,  137,  138,
    16402,    9,   20,  137,  138,   10,   20,  137,  138,    2,
       20,  137,  138,   15,  137,  138,    1,   15,  137,  138,

       17,  137,  138,   15,  137,  138,  137,  138,    2,   15,
      137,  138,  137,  138,    1,  137,  138,    3,  137,  138,
      137,  138,    2,  137,  138,   79,  137,  138, 8274,  137,
      138,16466,16467,  137,  138,   85,  137,  138,   86,  137,
      138,   84,  137,  138,   87,  137,  138,  133,  137,  138,
        1,  133,  137,  138,  121,  133,  137,  138,  120,  136,
      138,    3,  133,  137,  138,  124,  133,  137,  138,  117,
      133,  137,  138,  125,  133,  137,  138,  133,  137,  138,
      123,  133,  137,  138,  118,  133,  137,  138,  133,  137,
      138,    2,  133,  137,  138,   65,  137,  138,    1,   65,

      137,  138,    3,   65,  137,  138,   65,  137,  138,    2,
       65,  137,  138,   64,   65,  137,  138,    1,   64,   65,
      137,  138,   64,   65,  137,  138,   64,  136,  138,    3,
       64,   65,  137,  138,   63,   65,  137,  138,   64,   65,
      137,  138,    2,   64,   65,  137,  138,   95,   97,  137,
      138,    1,   97,  137,  138,   96,  136,  138,    3,   95,
       97,  137,  138,   97,  137,  138,   97,  137,  138,   95,
       97,  137,  138,    2,   95,   97,  137,  138,   98,  101,
      137,  138,    1,   98,  101,  137,  138,   98,  100,  136,
      138,    3,   98,  101,  137,  138,  101,  137,  138,   98,

      101,  137,  138,    2,   98,  101,  137,  138,   97,  137,
      138,   97,  137,  138,   95,   97,  137,  138,  111,  112,
      137,  138,    1,  112,  137,  138,  108,  136,  138,    3,
      111,  112,  137,  138,  111,  112,  137,  138,    2,  111,
      112,  137,  138,  105,  107,  137,  138,    1,  107,  137,
      138,  106,  136,  138,    3,  105,  107,  137,  138,  107,
      137,  138,  105,  107,  137,  138,    2,  105,  107,  137,
      138,  115,  116,  137,  138,    1,  116,  137,  138,    3,
      115,  116,  137,  138,  115,  116,  137,  138,    2,  115,
      116,  137,  138,   55,  137,  138,    1,   55,  137,  138,

       56,  136,  138,    3,   55,  137,  138,   55,  137,  138,
       55,  137,  138,   55,  137,  138,    2,   55,  137,  138,
       62,  137,  138,    1,   62,  137,  138,   60,  136,  138,
        3,   62,  137,  138,   62,  137,  138,   58,   62,  137,
      138,   62,  137,  138,    2,   62,  137,  138,   61,   62,
      137,  138,   59,   62,  137,  138,  131,  137,  138,    1,
      131,  137,  138,    3,  131,  137,  138,  128,  131,  137,
      138,  131,  137,  138,  131,  137,  138,    2,  131,  137,
      138,  132,  137,  138,    1,  132,  137,  138,    3,  132,
      137,  138,  130,  132,  137,  138,  132,  137,  138,  132,

      137,  138,    2,  132,  137,  138,   51,  137,  138,   49,
      137,  138,    1,   49,  137,  138,    3,   49,  137,  138,
       49,  137,  138,   49,  137,  138,    2,   49,  137,  138,
       28,  137,  138,    1,   28,  137,  138,   26,  136,  138,
        3,   28,  137,  138,   25,   28,  137,  138,   28,  137,
      138,   22,   28,  137,  138,   23,   28,  137,  138,   28,
      137,  138,   27,   28,  137,  138,    2,   28,  137,  138,
       32,  137,  138,    1,   32,  137,  138,    3,   32,  137,
      138,   29,   32,  137,  138,   32,  137,  138,   32,  137,
      138,    2,   32,  137,  138,  134,  135,    5,    5,    4,

        5,   47,   47,   47,   47,   47,   47,   47,   76,  134,
       75,  135,   71,   71,   71,   71,   73, 8210,   19,16402,
       19,16402,   15,   15,  134,   15,  135,   16,   80,  134,
      135,   78,   79, 8274, 8275,   81, 8274,16466,16467,   86,
       85,   86,   84,   87,   87,  121,  122,   88,  134,   89,
      135,  118,  119,   64,   64,   63,   95,   90,   92,  134,
       91,  135,   95,   98,   99,   98,  135,   95,  111,  109,
      111,  134,  110,  111,  135,  105,  102,  104,  134,  103,
      105,  135,  115,  113,  115,  134,  114,  115,  135,   52,
       58,   57,   59,  127,  134,  126,  135,  129,   51,   48,

       30,  134,   30,  135,   31,16390,   47,   47,   47,   47,
       40,   47,   47,   47,   47,   71,   71,   71,   66,   71,
       71,   13,   13,   19,16402,  122,   95,   95,   24,    7,
     8198,   47,   47,   47,   47,   47,   47,   47,   47,   71,
       67,   71,   71,   71,   12,   11,   12,   19,16402,   87,
       95,   95,   24,    7,    7,   47,   41,   44,   42,   42,
       47,   47,   47,   47,   47,   47,   68,   71,   69,   71,
       71,   11,   19,16402,   95,   95,    7,   47,   45,   37,
       36,   47,   47,   43,   19,16402,   95,   95,    7,   35,
       39,   38,   47,    8,   95,   95,    7,16417,   34,   95,

       95,   54,   53,    7, 8225,   95,   95,    7, 8225,   93,
       95,   93,   95,    7,   95,    7,   94,   95,    7
    } ;

static yyconst short int yy_accept[826] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    4,    6,    9,   11,   14,   16,   19,   22,   26,
       29,   32,   36,   39,   42,   45,   49,   52,   56,   59,
       63,   66,   70,   74,   78,   82,   86,   90,   93,   97,
      100,  104,  107,  111,  115,  119,  123,  127,  132,  135,

      140,  143,  148,  151,  155,  158,  162,  166,  169,  172,
      177,  182,  186,  190,  194,  197,  201,  204,  207,  209,
      213,  215,  218,  221,  223,  226,  229,  234,  236,  239,
      242,  245,  248,  251,  255,  259,  262,  266,  270,  274,
      278,  281,  285,  289,  292,  296,  299,  303,  307,  310,
      314,  318,  323,  327,  330,  335,  339,  343,  348,  352,
      356,  359,  364,  367,  370,  374,  379,  383,  388,  392,
      397,  400,  404,  409,  412,  415,  419,  423,  427,  430,
      435,  439,  444,  448,  452,  455,  460,  463,  467,  472,
      476,  480,  485,  489,  494,  497,  501,  504,  508,  511,

      514,  517,  521,  524,  528,  531,  535,  538,  542,  545,
      549,  553,  557,  560,  564,  568,  572,  575,  578,  582,
      585,  589,  593,  597,  600,  603,  607,  610,  613,  617,
      621,  624,  627,  631,  634,  638,  641,  645,  649,  652,
      656,  660,  663,  667,  671,  674,  678,  682,  686,  689,
      692,  696,  697,  698,  699,  700,  701,  702,  702,  702,
      702,  703,  704,  705,  706,  707,  708,  709,  711,  713,
      714,  715,  716,  717,  718,  718,  718,  718,  719,  721,
      723,  724,  726,  728,  729,  729,  730,  731,  732,  732,
      733,  734,  735,  736,  737,  740,  740,  741,  742,  743,

      744,  745,  745,  746,  747,  747,  748,  750,  752,  753,
      754,  754,  755,  756,  757,  758,  759,  761,  763,  764,
      765,  766,  768,  769,  770,  773,  776,  777,  778,  780,
      783,  784,  787,  790,  791,  791,  791,  792,  793,  794,
      796,  798,  799,  800,  801,  801,  801,  801,  803,  805,
      806,  806,  806,  807,  808,  809,  810,  811,  812,  813,
      814,  815,  816,  817,  818,  819,  820,  821,  822,  823,
      823,  824,  824,  824,  826,  826,  827,  828,  829,  829,
      829,  830,  830,  830,  830,  830,  830,  831,  831,  832,
      833,  834,  835,  836,  837,  838,  839,  840,  841,  843,

      844,  845,  846,  848,  848,  848,  850,  851,  852,  853,
      853,  853,  854,  854,  854,  855,  855,  856,  856,  857,
      859,  860,  861,  862,  863,  864,  865,  866,  867,  868,
      868,  869,  871,  872,  873,  873,  873,  875,  876,  877,
      877,  877,  877,  877,  878,  878,  879,  879,  879,  880,
      881,  882,  883,  884,  885,  885,  885,  887,  888,  889,
      889,  889,  890,  890,  891,  891,  892,  893,  894,  894,
      894,  894,  894,  895,  896,  897,  897,  897,  898,  898,
      899,  900,  900,  900,  900,  901,  902,  903,  904,  904,
      905,  905,  906,  906,  906,  906,  907,  908,  908,  909,

      909,  910,  910,  910,  910,  912,  913,  914,  914,  915,
      915,  915,  915,  915,  916,  916,  917,  917,  917,  917,
      917,  919,  919,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,

      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    1,    1,    1,    9,   10,
       11,   12,    1,   13,    1,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,    1,   19,
        1,   20,    1,   21,   22,   22,   23,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
        1,   24,    1,    1,   22,    1,   25,   26,   27,   28,

       29,   30,   31,   31,   32,   31,   31,   33,   34,   35,
       31,   31,   31,   36,   37,   38,   39,   40,   31,   41,
       31,   31,   42,    1,   43,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[45] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    1,    7,    8,
        1,    9,    1,   10,   11,   12,   12,    1,   13,    1,
        1,   14,   14,   15,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,    1,    1,    1
    } ;

static yyconst short int yy_base[877] =
    {   0,
        0,    4,    8,   51,   95,    0,  139,    0,   16,   20,
      183,    0,  226,  269,  312,  355,  399,    0,  422,    0,
      463,    0,  507,    0,   24,  550,   28,   32,   36,  233,
      593,  636,  241,  247,  679,  722,  253,  277,  284,  296,
      300,  305,  765,  808,  852,    0,  886,    0,  926,  969,
     1012, 1055, 1078,    0,  321,  337, 1118, 1161, 1204, 1247,
     1204, 3733, 3733, 3733, 3733,    2, 3733, 3733, 3733,   55,
     3733, 3733, 3733,   30,  244, 3733, 3733, 3733, 3733, 3733,
       34,    0, 1174,   32,   27, 1165, 3733, 3733, 3733, 3733,
     3733,   67,    0,   36, 1161, 3733,    0,    0, 3733,    0,

       69,    0, 3733, 3733, 3733, 3733, 3733, 1166,   71,   84,
      343, 3733, 3733, 3733,    0,    0, 3733,   78,    0,    0,
      222,  258,  283,  323,  311,   82,  363,    0, 1186, 1181,
     1180,   13, 3733, 3733,   67, 3733, 3733, 3733, 1173, 3733,
      224, 3733,    0,  259, 3733, 3733, 3733, 3733,  257, 3733,
     3733, 3733,  272, 3733, 3733, 3733,  322, 3733,    0, 3733,
     3733,    0, 1165,  339, 1138,    0,    0,    0,    0,    0,
     1162,  343,    0, 3733,  356, 1146,    0, 3733, 3733,    0,
      357,    0,    0, 3733, 3733,    0, 1152,  362,    0,    0,
     3733,    0,  364,    0, 3733, 3733, 3733, 3733,  368,  290,

     1135, 3733, 3733, 3733, 3733, 3733,  370,    0, 1154, 3733,
     3733,    0, 3733, 3733, 3733, 3733,  374,    0, 3733, 3733,
     3733, 3733, 3733,  375,    0, 3733,    0, 3733, 3733, 3733,
      376,  359, 3733, 3733, 3733, 3733, 3733, 3733, 1133, 3733,
     3733,  380, 3733, 3733, 3733, 3733, 3733, 3733,  381,    0,
     3733, 3733, 3733, 3733,  553, 3733,  556,  319, 1145,  564,
        0, 1124,  525, 1124,  590, 1124, 1116, 3733, 3733,    0,
      531, 1115,  596,    0, 1129,  555,  579, 3733, 1096,  356,
        0,    0,    0, 3733,  570, 3733,  581,  584,  582, 3733,
      600,  566, 3733, 3733,  609,  229, 1123, 1121, 1099, 1095,

       47, 1082,  606,  608, 1087, 1091, 3733, 3733,    0, 3733,
     1089, 3733,  618, 3733,    0, 3733, 1072, 3733, 1056,    0,
     3733,    0, 1046,    0,    0,    0,    0, 3733, 3733,    0,
        0,    0,    0, 3733, 1074, 1046,    0, 3733,    0, 3733,
     3733, 3733,    0, 3733, 1065, 1054, 1046, 3733, 3733, 3733,
     1047, 1044,  624, 1022, 1022, 1016, 1003, 3733,  997,  992,
      986,  989,  985,  983,  978, 3733,  974,  968, 3733,  986,
      985,  606,  629,  283,  978,  980,  944,  951,  946,  966,
     3733,  963,  614,  952,  632,  640,  650,  659, 3733,  917,
      646, 1291,  915,  902,  900,  871,  877,  664,  643,  820,

      809, 3733, 3733,  656,  683,  635, 3733,  805,  787,  789,
      799, 3733,  669,  686, 3733,  693,  702,  710,  774, 3733,
     3733,  647,  758, 1335,  692,  754,  748,  762, 3733,  701,
      734,    0,  681, 3733,  746,  726,  677,  729,  722,  716,
      733,  732,  735,  744,  753,  719,  718,  689, 3733,  707,
     3733,  722,  679,  696,  643,  769,  756,  631,  611,  579,
      778,  787,  796,  557,  801,  765, 3733,  799,  816,  830,
      895,  423, 3733,  366,  352,  775,  935,  939,  943,  818,
     3733,  838,  955,  343,  299,  281,  784, 3733,  964,  983,
      986,    0,  841,  995, 1004,  812,  249, 1026, 1029, 1035,

        0, 1038, 1079, 1019,  931,  951,  251, 1127, 1131, 1137,
     1062, 1143, 1046,  210, 1156, 1183, 1189, 1070, 1192, 1211,
        0, 1217, 1237, 1240, 1087, 1377, 1233, 1260, 1385, 1393,
     1263, 1396, 1404, 1273, 1407, 1417, 1420, 1429, 1437, 1440,
     1448, 1457, 1460, 1470, 1463, 1478, 1482, 1490, 1493, 1497,
     1505, 1510, 1518, 1513, 1526, 1530, 1538, 1541, 1549, 1545,
     1558, 1566, 1561, 1574, 1578, 1589, 1592, 1602, 1595, 1611,
     1619, 1614, 1629, 1638, 1646, 1649, 1659, 1667, 1671, 1679,
     1674, 1687, 1695, 1690, 1703, 1707, 1715, 1719, 1723, 1731,
     1735, 1743, 1738, 1751, 1759, 1755, 1767, 1771, 1779, 1783,

     1795, 1786, 1804, 1812, 1791, 1820, 1831, 1807, 1840, 1848,
     1843, 1856, 1860, 1871, 1874, 1884, 1877, 1893, 1901, 1896,
     1911, 1920, 1928, 1931, 1941, 1949, 1953, 1961, 1956, 1969,
     1977, 1972, 1985, 1989, 1997, 2001, 2005, 2013, 2017, 2025,
     2020, 2033, 2041, 2037, 2049, 2053, 2061, 2065, 2077, 2068,
     2086, 2094, 2073, 2102, 2113, 2089, 2122, 2130, 2125, 2138,
     2142, 2153, 2156, 2166, 2159, 2175, 2183, 2178, 2193, 2202,
     2210, 2213, 2223, 2231, 2235, 2243, 2238, 2251, 2259, 2254,
     2267, 2271, 2279, 2283, 2287, 2295, 2299, 2307, 2302, 2315,
     2323, 2319, 2331, 2335, 2343, 2347, 2359, 2350, 2368, 2376,

     2355, 2384, 2395, 2371, 2404, 2412, 2407, 2420, 2424, 2435,
     2438, 2448, 2441, 2457, 2465, 2460, 2475, 2484, 2492, 2495,
     2505, 2513, 2517, 2525, 2520, 2533, 2541, 2536,  224, 2549,
     2560, 2565, 2576, 2582, 2590, 2593, 2601, 2605, 2616, 2623,
     2633, 2636, 2641, 2645, 2648, 2651,   49, 2656, 2659, 2663,
     2666, 2669, 2676, 2681, 2691, 2699, 2709, 2712, 2716, 2721,
     2724, 2727, 2731, 2734, 2739, 2742, 2745, 2752, 2756, 2767,
     2774, 2785, 2788, 2792, 2796, 2799, 2802, 2807, 2810, 2814,
     2817, 2820, 2828, 2832, 2842, 2850, 2860, 2863, 2868, 2872,
     2875, 2878, 2882, 2885, 2890, 2893, 2896, 2903, 2908, 2918,

     2925, 2936, 2939, 2943, 2948, 2951, 2954, 2958, 2961, 2965,
     2968, 2971, 2979, 2983, 2994, 3001, 3011, 3014, 3019, 3023,
     3026, 3029, 3034, 3733, 3076, 3091, 3106, 3121, 3136, 3151,
     3166, 3181, 3196, 3211, 3226, 3241, 3256, 3271, 3286, 3301,
     3316, 3331, 3346,  647,  816, 3361, 3376, 3389, 3403, 3417,
     3432, 3445, 3457, 3469,  835, 3483, 3498, 3513, 3528, 3543,
     3558,  889,  892, 3573,  937, 3588, 3603, 3618, 3633, 3648,
     3662, 3677, 3692, 3706, 3718,  952
    } ;

static yyconst short int yy_def[877] =
    {   0,
      825,  825,  825,  826,  824,    5,  824,    7,  827,  827,
      824,   11,  828,  828,  829,  829,  824,   17,   17,   19,
      824,   21,  824,   23,  830,  831,  825,  825,  825,  825,
      832,  832,  833,  833,  832,  832,  834,  834,  835,  835,
      836,  836,  837,  837,  824,   45,   45,   47,  838,  838,
      839,  839,   19,   53,  840,  840,  841,  841,  842,  842,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  843,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  844,  844,  844,  844,  844,  824,  824,  824,  824,
      824,  824,  845,  845,  845,  824,  846,  846,  824,  846,

      824,  846,  824,  824,  824,  824,  824,  847,  824,  848,
      848,  824,  824,  824,  849,  849,  824,  849,  850,  849,
      851,  851,  851,  851,  851,  852,  853,  824,  824,  824,
      824,  854,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  855,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  856,  824,  824,  824,  824,  824,  857,  824,
      824,  857,  824,  824,  857,  857,  858,  858,  858,  858,
      824,  858,  858,  824,  824,  857,  859,  824,  824,  859,
      859,  859,  860,  824,  824,  860,  824,  860,  860,  861,
      824,  861,  861,  861,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  862,  824,  824,
      824,  863,  824,  824,  824,  824,  824,  864,  824,  824,
      824,  824,  824,  824,  864,  824,  865,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  866,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  867,
      824,  824,  824,  824,  843,  824,  824,  824,  868,  824,
      844,  844,  844,  844,  844,  844,  844,  824,  824,  845,
      845,  845,  845,  846,  824,  869,  824,  824,  111,  111,
      849,  849,  849,  824,  851,  824,  851,  851,  824,  824,
      852,  824,  824,  824,  853,  824,  824,  824,  824,  824,

      824,  824,  854,  824,  824,  824,  824,  824,  855,  824,
      824,  824,  856,  824,  857,  824,  824,  824,  857,  858,
      824,  858,  857,  859,  859,  859,  860,  824,  824,  860,
      861,  861,  861,  824,  824,  824,  862,  824,  863,  824,
      824,  824,  865,  824,  824,  870,  871,  824,  824,  824,
      872,  868,  824,  844,  844,  844,  844,  824,  844,  844,
      844,  844,  845,  845,  845,  824,  845,  845,  824,  824,
      824,  824,  824,  111,  824,  824,  857,  857,  824,  873,
      824,  824,  824,  872,  824,  824,  824,  824,  824,  844,
      844,  824,  844,  844,  844,  844,  844,  845,  845,  845,

      845,  824,  824,  824,  824,  111,  824,  857,  857,  824,
      874,  824,  824,  824,  824,  824,  824,  824,  844,  824,
      824,  824,  844,  824,  844,  844,  844,  844,  824,  824,
      845,  845,  273,  824,  824,  824,  111,  857,  857,  824,
      824,  824,  824,  824,  824,  844,  824,  824,  824,  824,
      824,  844,  844,  824,  824,  824,  111,  857,  857,  824,
      824,  824,  824,  824,  824,  824,  824,  844,  824,  824,
      824,  824,  824,  857,  857,  824,  824,  824,  824,  875,
      824,  824,  824,  824,  857,  857,  824,  824,  824,  824,
      824,  876,  824,  824,  824,  857,  857,  824,  824,  824,

      876,  824,  824,  824,  857,  824,  857,  824,  824,  824,
      824,  824,  824,  857,  824,  824,  824,  824,  824,  824,
      857,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,

      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,    0,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824
    } ;

static yyconst short int yy_nxt[3778] =
    {   0,
      824,   63,  296,   64,   65,   63,  824,   64,   65,   63,
      297,   64,   65,  252,   66,  301,  253,   98,   66,   99,
      100,   98,   66,   99,  100,  147,  302,   64,  148,   63,
      101,   64,   65,   63,  101,   64,   65,   63,  149,   64,
       65,  252,   66,   67,  253,  252,   66,   67,  253,  301,
       66,   67,   69,   70,   71,   72,  265,  255,   73,  102,
      302,  266,  256,  102,  263,   74,  264,  150,  271,  304,
      272,   67,   75,   75,  305,   67,  257,  257,  268,   67,
      268,  269,  252,  269,  289,  253,  277,  277,  277,  282,
      473,  290,  283,  278,   76,   77,   78,   77,   79,   80,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   81,
       77,   77,   77,   77,   77,   77,   82,   82,   77,   82,
       82,   82,   83,   84,   82,   82,   85,   82,   82,   82,
       82,   82,   82,   86,   82,   82,   77,   77,   87,   88,
       89,   88,   90,   91,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   92,   88,   88,   88,   88,   88,   88,
       93,   93,   88,   93,   93,   93,   93,   94,   93,   93,
       95,   93,   93,   93,   93,   93,   93,   93,   93,   93,
       88,   88,   96,  103,  104,  103,  105,  106,  103,  107,
      103,  108,  103,  103,  103,  103,  103,  109,  103,  103,

      103,  103,  103,  103,  110,  110,  103,  110,  110,  110,
      110,  111,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  112,  113,  114,  116,  286,   64,
       65,  296,  117,  278,   63,  307,   64,   65,  308,  297,
      118,  286,  168,  521,  169,  170,  258,   66,  168,  119,
      169,  170,  171,  259,  178,  172,  179,  180,  171,  260,
      260,  172,  310,  311,  286,  260,  260,  181,  268,  120,
      116,  269,   64,   65,  313,  117,   67,  286,  178,  314,
      179,  180,  514,  118,  173,  184,  507,  185,  186,  286,
      173,  181,  119,  334,  335,  187,  182,  184,  188,  185,

      186,  191,  286,  179,  192,  497,  191,  187,  179,  192,
      188,  406,  120,  122,  193,   64,  123,  286,   62,  193,
      182,  258,  229,  279,   79,  230,  124,  189,  351,  286,
      286,   62,  496,  268,  287,  231,  269,  288,  229,  189,
       79,  230,  286,  194,  232,  277,  277,  277,  194,  495,
      317,  231,  278,  318,  252,  125,  122,  322,   64,  123,
      232,   62,  344,  345,  233,  292,  293,  252,  325,  124,
      253,  326,  294,  329,   62,  332,  330,  486,  333,  252,
      233,  252,  253,  280,  253,  340,  252,  252,  341,  253,
      253,  252,  348,  374,  253,  349,  279,  485,  125,   62,

       63,   62,   64,   65,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   66,   62,   62,   62,   62,   62,   62,
      126,  126,   62,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
       62,   62,   67,  127,  127,  484,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,   62,   63,  128,   64,   65,   62,   62,
       62,   62,  129,  130,   62,  131,   62,   66,   62,   62,
       62,   62,   62,   62,  132,  132,   62,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,

      132,  132,  132,  132,   62,   62,   67,  133,  134,  135,
      136,  137,  133,  138,  139,  140,  133,  133,  133,  133,
      133,  141,  133,  133,  133,  133,  133,  142,  143,  143,
      144,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  133,  133,
      145,  152,  153,  154,  155,  255,  355,  156,  258,  464,
      256,  356,  363,  371,  157,  259,  258,  364,  292,  293,
      372,  260,  260,  259,  257,  257,  286,  260,  260,  260,
      260,  373,  373,  373,  289,  260,  260,  286,  278,  286,
      286,  290,  358,  158,  160,  358,  161,  162,  366,  358,

      286,  366,  289,  286,  163,  366,  476,  164,  301,  290,
      304,  292,  293,  165,  403,  305,  165,  359,  294,  302,
      313,  404,  412,  367,  360,  314,  386,  387,  388,  413,
      368,  405,  405,  405,  414,  415,  166,  160,  278,  161,
      162,  389,  416,  417,  418,  430,  475,  163,  420,  447,
      164,  420,  418,  418,  418,  420,  165,  389,  261,  165,
      261,  418,  418,  418,  434,  389,  429,  389,  474,  429,
      437,  435,  469,  429,  431,  279,  389,  381,  448,  166,
      160,  389,  161,  162,  442,  436,  436,  436,  414,  415,
      174,  389,  278,  175,  450,  443,  444,  445,  454,  176,

      389,  451,  176,  430,  445,  445,  445,  468,  270,  450,
      389,  457,  445,  445,  445,  270,  451,  279,  465,  389,
      447,  464,  166,  160,  466,  161,  162,  389,  456,  456,
      456,  467,  455,  174,  389,  278,  175,  461,  462,  463,
      381,  381,  176,  389,  460,  176,  463,  463,  463,  448,
      459,  389,  389,  458,  434,  463,  463,  463,  471,  471,
      471,  389,  472,  398,  454,  166,  196,  466,  197,  198,
      389,  470,  470,  470,  467,  453,  389,  487,  278,  199,
      477,  478,  479,  452,  488,  389,  487,  391,  200,  479,
      479,  479,  201,  488,  389,  389,  279,  473,  479,  479,

      479,  480,  446,  420,  389,  481,  420,  381,  202,  196,
      420,  197,  198,  389,  505,  506,  505,  481,  429,  389,
      480,  429,  199,  440,  481,  429,  439,  270,  389,  270,
      438,  200,  482,  482,  482,  201,  481,  389,  433,  278,
      493,  493,  493,  502,  502,  502,  309,  278,  309,  432,
      278,  202,  203,  204,  203,  205,  206,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  207,  203,  203,  203,
      203,  203,  203,  208,  208,  209,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  203,  203,  210,  211,  483,  483,  483,

      337,  472,  337,  339,  278,  339,  428,  212,  212,  427,
      212,  212,  212,  212,  212,  212,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  214,  426,   64,
      215,  425,  216,  505,  506,  505,  473,  489,  490,  491,
      217,  491,  491,  491,  424,  491,  491,  491,  343,  218,
      343,  419,  389,  506,  506,  506,  389,  494,  494,  494,
      389,  472,  385,  501,  278,  501,  498,  499,  500,  219,
      214,  381,   64,  215,  381,  216,  389,  410,  409,  408,
      389,  389,  376,  217,  389,  500,  500,  500,  500,  500,
      500,  407,  218,  402,  402,  367,  473,  503,  503,  503,

      389,  472,  401,  389,  278,  389,  504,  504,  504,  400,
      472,  399,  219,  221,  398,   64,  222,  397,  396,  395,
      223,  513,  513,  513,  389,  394,  224,  389,  508,  509,
      510,  510,  510,  510,  393,  225,  473,  510,  510,  510,
      511,  511,  511,  389,  392,  473,  389,  278,  520,  520,
      520,  391,  389,  390,  353,  226,  221,  385,   64,  222,
      473,  383,  381,  223,  518,  518,  518,  389,  344,  224,
      389,  278,  525,  525,  525,  379,  389,  334,  225,  278,
      378,  512,  512,  512,  377,  472,  316,  473,  278,  528,
      528,  528,  310,  376,  306,  375,  278,  300,  226,  227,

      227,  299,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  235,
      473,  236,  237,  298,  238,  299,  239,  240,  241,  515,
      516,  517,  242,  517,  517,  517,  279,  369,  243,  517,
      517,  517,  365,  362,  389,  519,  519,  519,  389,  472,
      361,  357,  278,  354,  389,  353,  347,  338,  522,  523,
      524,  244,  235,  336,  236,  237,  328,  238,  389,  239,
      240,  241,  389,  389,  323,  242,  321,  319,  389,  316,
      306,  243,  300,  299,  473,  524,  524,  524,  298,  276,
      273,  524,  524,  524,  526,  526,  526,  389,  472,  267,

      389,  278,  262,  824,  244,  246,  389,   64,  247,  824,
      248,  824,  824,  527,  527,  527,  824,  824,  249,  522,
      523,  524,  824,  824,  389,  824,  824,  250,  824,  824,
      389,  824,  824,  473,  389,  530,  530,  530,  824,  524,
      524,  524,  524,  524,  524,  824,  824,  251,  246,  824,
       64,  247,  473,  248,  389,  824,  824,  389,  389,  824,
      824,  249,  531,  531,  531,  534,  534,  534,  824,  278,
      250,  824,  278,  824,  473,  537,  537,  537,  389,  824,
      824,  389,  278,  824,  824,  824,  824,  824,  824,  824,
      251,  421,  421,  422,  421,  421,  421,  421,  421,  421,

      421,  421,  421,  421,  421,  421,  261,  261,  421,  421,
      421,  421,  261,  261,  421,  261,  261,  261,  261,  261,
      261,  261,  423,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  421,  421,  421,  449,  449,  449,  449,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      261,  261,  449,  449,  449,  449,  261,  261,  449,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  449,  449,  449,  529,
      529,  529,  824,  472,  824,  824,  278,  532,  532,  532,
      824,  472,  824,  824,  278,  533,  533,  533,  535,  535,

      535,  824,  472,  824,  824,  278,  536,  536,  536,  538,
      538,  538,  824,  472,  824,  824,  278,  824,  473,  539,
      539,  539,  540,  540,  540,  824,  473,  824,  824,  278,
      824,  541,  541,  541,  473,  472,  824,  473,  278,  542,
      542,  542,  543,  543,  543,  473,  824,  824,  473,  278,
      544,  544,  544,  824,  472,  824,  824,  278,  473,  545,
      545,  545,  546,  546,  546,  548,  548,  548,  824,  278,
      473,  824,  547,  547,  547,  824,  472,  824,  473,  278,
      549,  549,  549,  824,  550,  550,  550,  278,  472,  473,
      824,  278,  551,  551,  551,  552,  552,  552,  473,  553,

      553,  553,  278,  472,  473,  824,  278,  554,  554,  554,
      824,  473,  555,  555,  555,  557,  557,  557,  824,  278,
      556,  556,  556,  473,  472,  824,  824,  278,  558,  558,
      558,  473,  559,  559,  559,  278,  472,  824,  473,  278,
      560,  560,  560,  561,  561,  561,  473,  563,  563,  563,
      278,  562,  562,  562,  473,  472,  824,  824,  278,  473,
      564,  564,  564,  566,  566,  566,  824,  278,  565,  565,
      565,  473,  472,  824,  824,  278,  567,  567,  567,  473,
      568,  568,  568,  278,  472,  824,  473,  278,  824,  824,
      473,  569,  569,  569,  570,  570,  570,  572,  572,  572,

      824,  278,  473,  824,  571,  571,  571,  473,  472,  824,
      824,  278,  824,  573,  573,  573,  575,  575,  575,  473,
      278,  574,  574,  574,  824,  472,  824,  824,  278,  824,
      473,  576,  576,  576,  824,  824,  473,  824,  278,  824,
      577,  577,  577,  473,  472,  824,  824,  278,  578,  578,
      578,  579,  579,  579,  824,  473,  824,  824,  278,  824,
      473,  580,  580,  580,  824,  472,  824,  824,  278,  581,
      581,  581,  824,  582,  582,  582,  584,  584,  584,  473,
      278,  583,  583,  583,  824,  472,  824,  473,  278,  585,
      585,  585,  587,  587,  587,  824,  278,  586,  586,  586,

      473,  472,  824,  824,  278,  588,  588,  588,  473,  589,
      589,  589,  278,  472,  824,  473,  278,  590,  590,  590,
      473,  591,  591,  591,  824,  592,  592,  592,  278,  472,
      824,  473,  278,  593,  593,  593,  473,  594,  594,  594,
      596,  596,  596,  824,  278,  595,  595,  595,  473,  472,
      824,  824,  278,  597,  597,  597,  473,  599,  599,  599,
      278,  598,  598,  598,  473,  472,  824,  824,  278,  600,
      600,  600,  473,  601,  601,  601,  278,  472,  824,  473,
      278,  602,  602,  602,  473,  603,  603,  603,  605,  605,
      605,  824,  278,  608,  608,  608,  473,  604,  604,  604,

      473,  472,  824,  824,  278,  824,  606,  606,  606,  611,
      611,  611,  473,  278,  607,  607,  607,  824,  472,  824,
      473,  278,  609,  609,  609,  824,  824,  473,  824,  278,
      824,  824,  473,  610,  610,  610,  473,  472,  824,  824,
      278,  824,  612,  612,  612,  614,  614,  614,  473,  278,
      613,  613,  613,  473,  472,  824,  824,  278,  615,  615,
      615,  824,  616,  616,  616,  278,  472,  824,  824,  278,
      824,  824,  473,  617,  617,  617,  618,  618,  618,  620,
      620,  620,  824,  278,  473,  824,  619,  619,  619,  473,
      472,  824,  824,  278,  824,  621,  621,  621,  623,  623,

      623,  473,  278,  622,  622,  622,  824,  472,  824,  824,
      278,  824,  473,  624,  624,  624,  824,  824,  473,  824,
      278,  824,  625,  625,  625,  473,  472,  824,  824,  278,
      626,  626,  626,  627,  627,  627,  824,  473,  824,  824,
      278,  824,  473,  628,  628,  628,  824,  472,  824,  824,
      278,  629,  629,  629,  824,  630,  630,  630,  632,  632,
      632,  473,  278,  631,  631,  631,  824,  472,  824,  473,
      278,  633,  633,  633,  635,  635,  635,  824,  278,  634,
      634,  634,  473,  472,  824,  824,  278,  636,  636,  636,
      473,  637,  637,  637,  278,  472,  824,  473,  278,  638,

      638,  638,  473,  639,  639,  639,  824,  640,  640,  640,
      278,  472,  824,  473,  278,  641,  641,  641,  473,  642,
      642,  642,  644,  644,  644,  824,  278,  643,  643,  643,
      473,  472,  824,  824,  278,  645,  645,  645,  473,  647,
      647,  647,  278,  646,  646,  646,  473,  472,  824,  824,
      278,  648,  648,  648,  473,  649,  649,  649,  278,  472,
      824,  473,  278,  650,  650,  650,  473,  651,  651,  651,
      653,  653,  653,  824,  278,  656,  656,  656,  473,  652,
      652,  652,  473,  472,  824,  824,  278,  824,  654,  654,
      654,  659,  659,  659,  473,  278,  655,  655,  655,  824,

      472,  824,  473,  278,  657,  657,  657,  824,  824,  473,
      824,  278,  824,  824,  473,  658,  658,  658,  473,  472,
      824,  824,  278,  824,  660,  660,  660,  662,  662,  662,
      473,  278,  661,  661,  661,  473,  472,  824,  824,  278,
      663,  663,  663,  824,  664,  664,  664,  278,  472,  824,
      824,  278,  824,  824,  473,  665,  665,  665,  666,  666,
      666,  668,  668,  668,  824,  278,  473,  824,  667,  667,
      667,  473,  472,  824,  824,  278,  824,  669,  669,  669,
      671,  671,  671,  473,  278,  670,  670,  670,  824,  472,
      824,  824,  278,  824,  473,  672,  672,  672,  824,  824,

      473,  824,  278,  824,  673,  673,  673,  473,  472,  824,
      824,  278,  674,  674,  674,  675,  675,  675,  824,  473,
      824,  824,  278,  824,  473,  676,  676,  676,  824,  472,
      824,  824,  278,  677,  677,  677,  824,  678,  678,  678,
      680,  680,  680,  473,  278,  679,  679,  679,  824,  472,
      824,  473,  278,  681,  681,  681,  683,  683,  683,  824,
      278,  682,  682,  682,  473,  472,  824,  824,  278,  684,
      684,  684,  473,  685,  685,  685,  278,  472,  824,  473,
      278,  686,  686,  686,  473,  687,  687,  687,  824,  688,
      688,  688,  278,  472,  824,  473,  278,  689,  689,  689,

      473,  690,  690,  690,  692,  692,  692,  824,  278,  691,
      691,  691,  473,  472,  824,  824,  278,  693,  693,  693,
      473,  695,  695,  695,  278,  694,  694,  694,  473,  472,
      824,  824,  278,  696,  696,  696,  473,  697,  697,  697,
      278,  472,  824,  473,  278,  698,  698,  698,  473,  699,
      699,  699,  701,  701,  701,  824,  278,  704,  704,  704,
      473,  700,  700,  700,  473,  472,  824,  824,  278,  824,
      702,  702,  702,  707,  707,  707,  473,  278,  703,  703,
      703,  824,  472,  824,  473,  278,  705,  705,  705,  824,
      824,  473,  824,  278,  824,  824,  473,  706,  706,  706,

      473,  472,  824,  824,  278,  824,  708,  708,  708,  710,
      710,  710,  473,  278,  709,  709,  709,  473,  472,  824,
      824,  278,  711,  711,  711,  824,  712,  712,  712,  278,
      472,  824,  824,  278,  824,  824,  473,  713,  713,  713,
      714,  714,  714,  716,  716,  716,  824,  278,  473,  824,
      715,  715,  715,  473,  472,  824,  824,  278,  824,  717,
      717,  717,  719,  719,  719,  473,  278,  718,  718,  718,
      824,  472,  824,  824,  278,  824,  473,  720,  720,  720,
      824,  824,  473,  824,  278,  824,  721,  721,  721,  473,
      472,  824,  824,  278,  722,  722,  722,  723,  723,  723,

      824,  473,  824,  824,  278,  824,  473,  724,  724,  724,
      824,  472,  824,  824,  278,  725,  725,  725,  824,  726,
      726,  726,  728,  728,  728,  473,  278,  727,  727,  727,
      824,  472,  824,  473,  278,  729,  729,  729,  731,  731,
      731,  824,  278,  730,  730,  730,  473,  472,  824,  824,
      278,  732,  732,  732,  473,  472,  824,  824,  278,  824,
      824,  473,  733,  733,  733,  824,  473,  734,  734,  734,
      824,  472,  824,  824,  278,  824,  824,  473,  735,  735,
      735,  824,  473,  824,  736,  736,  736,  824,  472,  824,
      473,  278,  737,  737,  737,  738,  738,  738,  824,  472,

      824,  473,  278,  739,  739,  739,  473,  740,  740,  740,
      824,  472,  824,  824,  278,  824,  824,  473,  741,  741,
      741,  824,  824,  473,  824,  742,  742,  742,  824,  472,
      824,  473,  278,  824,  473,  743,  743,  743,  744,  744,
      744,  824,  473,  745,  745,  745,  473,  746,  746,  746,
      747,  747,  747,  748,  748,  748,  824,  473,  749,  749,
      749,  750,  750,  750,  473,  751,  751,  751,  752,  752,
      752,  753,  753,  753,  473,  824,  824,  473,  754,  754,
      754,  824,  473,  755,  755,  755,  473,  824,  824,  473,
      824,  824,  473,  756,  756,  756,  824,  473,  824,  824,

      473,  757,  757,  757,  473,  824,  824,  473,  824,  824,
      473,  758,  758,  758,  759,  759,  759,  473,  760,  760,
      760,  824,  473,  761,  761,  761,  762,  762,  762,  763,
      763,  763,  473,  764,  764,  764,  765,  765,  765,  824,
      473,  766,  766,  766,  767,  767,  767,  768,  768,  768,
      473,  824,  824,  473,  769,  769,  769,  473,  770,  770,
      770,  824,  473,  824,  824,  473,  824,  824,  473,  771,
      771,  771,  473,  824,  824,  473,  772,  772,  772,  824,
      473,  824,  824,  473,  824,  824,  473,  773,  773,  773,
      774,  774,  774,  473,  775,  775,  775,  473,  776,  776,

      776,  777,  777,  777,  778,  778,  778,  824,  473,  779,
      779,  779,  780,  780,  780,  473,  781,  781,  781,  782,
      782,  782,  783,  783,  783,  824,  473,  824,  824,  473,
      784,  784,  784,  473,  785,  785,  785,  473,  824,  824,
      473,  824,  824,  473,  786,  786,  786,  824,  473,  824,
      824,  473,  787,  787,  787,  473,  824,  824,  473,  824,
      824,  473,  788,  788,  788,  789,  789,  789,  824,  473,
      790,  790,  790,  473,  791,  791,  791,  792,  792,  792,
      793,  793,  793,  473,  794,  794,  794,  795,  795,  795,
      824,  473,  796,  796,  796,  797,  797,  797,  798,  798,

      798,  473,  824,  824,  473,  799,  799,  799,  824,  473,
      800,  800,  800,  473,  824,  824,  473,  824,  824,  473,
      801,  801,  801,  473,  824,  824,  473,  802,  802,  802,
      824,  473,  824,  824,  473,  824,  824,  473,  803,  803,
      803,  804,  804,  804,  473,  805,  805,  805,  824,  473,
      806,  806,  806,  807,  807,  807,  808,  808,  808,  473,
      809,  809,  809,  810,  810,  810,  473,  811,  811,  811,
      812,  812,  812,  813,  813,  813,  824,  473,  824,  824,
      473,  814,  814,  814,  473,  815,  815,  815,  824,  473,
      824,  824,  473,  824,  824,  473,  816,  816,  816,  473,

      824,  824,  473,  817,  817,  817,  473,  824,  824,  473,
      824,  824,  473,  818,  818,  818,  819,  819,  819,  824,
      473,  820,  820,  820,  473,  821,  821,  821,  822,  822,
      822,  823,  823,  823,  824,  473,  747,  747,  747,  824,
      824,  824,  473,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  473,  824,  824,  473,  824,  824,  824,  824,
      473,  824,  824,  824,  473,  824,  824,  473,  824,  824,
      473,  824,  824,  824,  824,  473,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  151,  151,  151,  151,
      151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  159,  159,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  183,  183,  183,  183,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,

      220,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  274,  274,  274,  824,  274,  274,  274,  274,  274,
      274,  824,  274,  274,  274,  274,  275,  275,  275,  824,
      275,  275,  275,  275,  275,  275,  275,  275,  275,  275,
      275,  279,  279,  279,  824,  824,  279,  824,  824,  824,

      279,  824,  279,  281,  281,  281,  824,  824,  824,  281,
      281,  281,  281,  281,  281,  281,  281,  284,  284,  284,
      824,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  285,  285,  285,  824,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  291,  824,  824,
      824,  824,  291,  824,  824,  824,  291,  824,  291,  295,
      295,  824,  824,  824,  295,  824,  824,  824,  295,  824,
      295,  303,  824,  824,  824,  824,  824,  824,  303,  824,
      303,  824,  303,  312,  312,  312,  312,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  312,  312,  315,  824,

      315,  824,  315,  315,  315,  315,  824,  315,  824,  315,
      315,  315,  315,  320,  320,  320,  320,  320,  320,  320,
      320,  824,  320,  320,  320,  320,  320,  320,  324,  824,
      324,  824,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  327,  824,  327,  824,  327,  327,  327,
      327,  824,  327,  327,  327,  327,  327,  327,  331,  824,
      331,  824,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  342,  342,  342,  824,  342,  342,  342,
      342,  342,  342,  342,  342,  342,  342,  342,  346,  346,
      346,  824,  346,  346,  824,  346,  346,  346,  346,  346,

      346,  346,  346,  350,  350,  350,  824,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  352,  352,
      352,  824,  352,  352,  352,  352,  352,  352,  352,  352,
      352,  352,  352,  370,  370,  370,  824,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  380,  380,
      380,  824,  380,  380,  380,  380,  380,  380,  380,  380,
      380,  380,  382,  382,  382,  824,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  384,  384,  384,
      824,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  411,  411,  411,  824,  411,  411,  411,  411,

      411,  411,  411,  411,  411,  411,  441,  441,  441,  824,
      441,  441,  441,  441,  441,  441,  441,  441,  441,  441,
      492,  824,  824,  492,  824,  824,  824,  824,  824,  824,
      492,  492,   61,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824
    } ;

static yyconst short int yy_chk[3778] =
    {   0,
        0,    1,  128,    1,    1,    2,    0,    2,    2,    3,
      128,    3,    3,   66,    1,  132,   66,    9,    2,    9,
        9,   10,    3,   10,   10,   25,  132,   25,   25,   27,
        9,   27,   27,   28,   10,   28,   28,   29,   25,   29,
       29,   74,   27,    1,   74,   81,   28,    2,   81,  301,
       29,    3,    4,    4,    4,    4,   85,   70,    4,    9,
      301,   85,   70,   10,   84,    4,   84,   25,   94,  135,
       94,   27,    4,    4,  135,   28,   70,   70,   92,   29,
      101,   92,  109,  101,  126,  109,  110,  110,  110,  118,
      747,  126,  118,  110,    4,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   13,  121,   13,
       13,  296,   13,  729,   30,  141,   30,   30,  141,  296,
       13,  121,   33,  514,   33,   33,   75,   30,   34,   13,
       34,   34,   33,   75,   37,   33,   37,   37,   34,   75,
       75,   34,  144,  144,  122,   75,   75,   37,  149,   13,
       14,  149,   14,   14,  153,   14,   30,  122,   38,  153,
       38,   38,  507,   14,   33,   39,  497,   39,   39,  123,
       34,   38,   14,  200,  200,   39,   37,   40,   39,   40,

       40,   41,  123,   41,   41,  486,   42,   40,   42,   42,
       40,  374,   14,   15,   41,   15,   15,  125,   15,   42,
       38,  258,   55,  374,   55,   55,   15,   39,  258,  124,
      125,   15,  485,  157,  124,   55,  157,  124,   56,   40,
       56,   56,  124,   41,   55,  111,  111,  111,   42,  484,
      164,   56,  111,  164,  172,   15,   16,  172,   16,   16,
       56,   16,  232,  232,   55,  127,  127,  175,  181,   16,
      175,  181,  127,  188,   16,  193,  188,  475,  193,  199,
       56,  207,  199,  111,  207,  217,  224,  231,  217,  224,
      231,  242,  249,  280,  242,  249,  280,  474,   16,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   19,   19,  472,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   26,   26,   26,   26,  255,  263,   26,  257,  464,
      255,  263,  271,  276,   26,  257,  260,  271,  292,  292,
      276,  257,  257,  260,  255,  255,  285,  257,  257,  260,
      260,  277,  277,  277,  289,  260,  260,  287,  277,  285,
      288,  289,  265,   26,   31,  265,   31,   31,  273,  265,

      287,  273,  291,  288,   31,  273,  460,   31,  303,  291,
      304,  295,  295,   31,  372,  304,   31,  265,  295,  303,
      313,  372,  383,  273,  265,  313,  353,  353,  353,  383,
      273,  373,  373,  373,  385,  385,   31,   32,  373,   32,
       32,  353,  386,  386,  386,  399,  459,   32,  391,  422,
       32,  391,  387,  387,  387,  391,   32,  386,  844,   32,
      844,  388,  388,  388,  404,  353,  398,  387,  458,  398,
      406,  404,  455,  398,  399,  406,  388,  413,  422,   32,
       35,  386,   35,   35,  413,  405,  405,  405,  414,  414,
       35,  387,  405,   35,  425,  416,  416,  416,  454,   35,

      388,  425,   35,  430,  417,  417,  417,  453,  433,  450,
      416,  437,  418,  418,  418,  433,  450,  437,  448,  417,
      447,  446,   35,   36,  452,   36,   36,  418,  436,  436,
      436,  452,  430,   36,  416,  436,   36,  443,  443,  443,
      442,  441,   36,  417,  440,   36,  444,  444,  444,  447,
      439,  418,  443,  438,  435,  445,  445,  445,  457,  457,
      457,  444,  457,  431,  428,   36,   43,  466,   43,   43,
      445,  456,  456,  456,  466,  427,  443,  476,  456,   43,
      461,  461,  461,  426,  476,  444,  487,  423,   43,  462,
      462,  462,   43,  487,  445,  461,  457,  457,  463,  463,

      463,  468,  419,  465,  462,  468,  465,  411,   43,   44,
      465,   44,   44,  463,  496,  496,  496,  468,  469,  461,
      480,  469,   44,  410,  480,  469,  409,  845,  462,  845,
      408,   44,  470,  470,  470,   44,  480,  463,  401,  470,
      482,  482,  482,  493,  493,  493,  855,  482,  855,  400,
      493,   44,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   47,  471,  471,  471,

      862,  471,  862,  863,  471,  863,  397,   47,   47,  396,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   49,  395,   49,
       49,  394,   49,  505,  505,  505,  471,  477,  477,  477,
       49,  478,  478,  478,  393,  479,  479,  479,  865,   49,
      865,  390,  477,  506,  506,  506,  478,  483,  483,  483,
      479,  483,  384,  876,  483,  876,  489,  489,  489,   49,
       50,  382,   50,   50,  380,   50,  477,  379,  378,  377,
      478,  489,  376,   50,  479,  490,  490,  490,  491,  491,
      491,  375,   50,  371,  370,  368,  483,  494,  494,  494,

      490,  494,  367,  491,  494,  489,  495,  495,  495,  365,
      495,  364,   50,   51,  363,   51,   51,  362,  361,  360,
       51,  504,  504,  504,  490,  359,   51,  491,  498,  498,
      498,  499,  499,  499,  357,   51,  494,  500,  500,  500,
      502,  502,  502,  498,  356,  495,  499,  502,  513,  513,
      513,  355,  500,  354,  352,   51,   52,  351,   52,   52,
      504,  347,  346,   52,  511,  511,  511,  498,  345,   52,
      499,  511,  518,  518,  518,  336,  500,  335,   52,  518,
      323,  503,  503,  503,  319,  503,  317,  513,  503,  525,
      525,  525,  311,  306,  305,  302,  525,  300,   52,   53,

       53,  299,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   57,
      503,   57,   57,  298,   57,  297,   57,   57,   57,  508,
      508,  508,   57,  509,  509,  509,  279,  275,   57,  510,
      510,  510,  272,  267,  508,  512,  512,  512,  509,  512,
      266,  264,  512,  262,  510,  259,  239,  209,  515,  515,
      515,   57,   58,  201,   58,   58,  187,   58,  508,   58,
       58,   58,  509,  515,  176,   58,  171,  165,  510,  163,
      139,   58,  131,  130,  512,  516,  516,  516,  129,  108,
       95,  517,  517,  517,  519,  519,  519,  515,  519,   86,

      516,  519,   83,   61,   58,   59,  517,   59,   59,    0,
       59,    0,    0,  520,  520,  520,    0,    0,   59,  522,
      522,  522,    0,    0,  516,    0,    0,   59,    0,    0,
      517,    0,    0,  519,  522,  527,  527,  527,    0,  523,
      523,  523,  524,  524,  524,    0,    0,   59,   60,    0,
       60,   60,  520,   60,  523,    0,    0,  524,  522,    0,
        0,   60,  528,  528,  528,  531,  531,  531,    0,  528,
       60,    0,  531,    0,  527,  534,  534,  534,  523,    0,
        0,  524,  534,    0,    0,    0,    0,    0,    0,    0,
       60,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  424,  424,  424,  424,  526,
      526,  526,    0,  526,    0,    0,  526,  529,  529,  529,
        0,  529,    0,    0,  529,  530,  530,  530,  532,  532,

      532,    0,  532,    0,    0,  532,  533,  533,  533,  535,
      535,  535,    0,  535,    0,    0,  535,    0,  526,  536,
      536,  536,  537,  537,  537,    0,  529,    0,    0,  537,
        0,  538,  538,  538,  530,  538,    0,  532,  538,  539,
      539,  539,  540,  540,  540,  533,    0,    0,  535,  540,
      541,  541,  541,    0,  541,    0,    0,  541,  536,  542,
      542,  542,  543,  543,  543,  545,  545,  545,    0,  543,
      538,    0,  544,  544,  544,    0,  544,    0,  539,  544,
      546,  546,  546,    0,  547,  547,  547,  546,  547,  541,
        0,  547,  548,  548,  548,  549,  549,  549,  542,  550,

      550,  550,  549,  550,  545,    0,  550,  551,  551,  551,
        0,  544,  552,  552,  552,  554,  554,  554,    0,  552,
      553,  553,  553,  547,  553,    0,    0,  553,  555,  555,
      555,  548,  556,  556,  556,  555,  556,    0,  550,  556,
      557,  557,  557,  558,  558,  558,  551,  560,  560,  560,
      558,  559,  559,  559,  554,  559,    0,    0,  559,  553,
      561,  561,  561,  563,  563,  563,    0,  561,  562,  562,
      562,  556,  562,    0,    0,  562,  564,  564,  564,  557,
      565,  565,  565,  564,  565,    0,  560,  565,    0,    0,
      559,  566,  566,  566,  567,  567,  567,  569,  569,  569,

        0,  567,  563,    0,  568,  568,  568,  562,  568,    0,
        0,  568,    0,  570,  570,  570,  572,  572,  572,  565,
      570,  571,  571,  571,    0,  571,    0,    0,  571,    0,
      566,  573,  573,  573,    0,    0,  569,    0,  573,    0,
      574,  574,  574,  568,  574,    0,    0,  574,  575,  575,
      575,  576,  576,  576,    0,  572,    0,    0,  576,    0,
      571,  577,  577,  577,    0,  577,    0,    0,  577,  578,
      578,  578,    0,  579,  579,  579,  581,  581,  581,  574,
      579,  580,  580,  580,    0,  580,    0,  575,  580,  582,
      582,  582,  584,  584,  584,    0,  582,  583,  583,  583,

      577,  583,    0,    0,  583,  585,  585,  585,  578,  586,
      586,  586,  585,  586,    0,  581,  586,  587,  587,  587,
      580,  588,  588,  588,    0,  589,  589,  589,  588,  589,
        0,  584,  589,  590,  590,  590,  583,  591,  591,  591,
      593,  593,  593,    0,  591,  592,  592,  592,  586,  592,
        0,    0,  592,  594,  594,  594,  587,  596,  596,  596,
      594,  595,  595,  595,  589,  595,    0,    0,  595,  597,
      597,  597,  590,  598,  598,  598,  597,  598,    0,  593,
      598,  599,  599,  599,  592,  600,  600,  600,  602,  602,
      602,    0,  600,  605,  605,  605,  596,  601,  601,  601,

      595,  601,    0,    0,  601,    0,  603,  603,  603,  608,
      608,  608,  598,  603,  604,  604,  604,    0,  604,    0,
      599,  604,  606,  606,  606,    0,    0,  602,    0,  606,
        0,    0,  605,  607,  607,  607,  601,  607,    0,    0,
      607,    0,  609,  609,  609,  611,  611,  611,  608,  609,
      610,  610,  610,  604,  610,    0,    0,  610,  612,  612,
      612,    0,  613,  613,  613,  612,  613,    0,    0,  613,
        0,    0,  607,  614,  614,  614,  615,  615,  615,  617,
      617,  617,    0,  615,  611,    0,  616,  616,  616,  610,
      616,    0,    0,  616,    0,  618,  618,  618,  620,  620,

      620,  613,  618,  619,  619,  619,    0,  619,    0,    0,
      619,    0,  614,  621,  621,  621,    0,    0,  617,    0,
      621,    0,  622,  622,  622,  616,  622,    0,    0,  622,
      623,  623,  623,  624,  624,  624,    0,  620,    0,    0,
      624,    0,  619,  625,  625,  625,    0,  625,    0,    0,
      625,  626,  626,  626,    0,  627,  627,  627,  629,  629,
      629,  622,  627,  628,  628,  628,    0,  628,    0,  623,
      628,  630,  630,  630,  632,  632,  632,    0,  630,  631,
      631,  631,  625,  631,    0,    0,  631,  633,  633,  633,
      626,  634,  634,  634,  633,  634,    0,  629,  634,  635,

      635,  635,  628,  636,  636,  636,    0,  637,  637,  637,
      636,  637,    0,  632,  637,  638,  638,  638,  631,  639,
      639,  639,  641,  641,  641,    0,  639,  640,  640,  640,
      634,  640,    0,    0,  640,  642,  642,  642,  635,  644,
      644,  644,  642,  643,  643,  643,  637,  643,    0,    0,
      643,  645,  645,  645,  638,  646,  646,  646,  645,  646,
        0,  641,  646,  647,  647,  647,  640,  648,  648,  648,
      650,  650,  650,    0,  648,  653,  653,  653,  644,  649,
      649,  649,  643,  649,    0,    0,  649,    0,  651,  651,
      651,  656,  656,  656,  646,  651,  652,  652,  652,    0,

      652,    0,  647,  652,  654,  654,  654,    0,    0,  650,
        0,  654,    0,    0,  653,  655,  655,  655,  649,  655,
        0,    0,  655,    0,  657,  657,  657,  659,  659,  659,
      656,  657,  658,  658,  658,  652,  658,    0,    0,  658,
      660,  660,  660,    0,  661,  661,  661,  660,  661,    0,
        0,  661,    0,    0,  655,  662,  662,  662,  663,  663,
      663,  665,  665,  665,    0,  663,  659,    0,  664,  664,
      664,  658,  664,    0,    0,  664,    0,  666,  666,  666,
      668,  668,  668,  661,  666,  667,  667,  667,    0,  667,
        0,    0,  667,    0,  662,  669,  669,  669,    0,    0,

      665,    0,  669,    0,  670,  670,  670,  664,  670,    0,
        0,  670,  671,  671,  671,  672,  672,  672,    0,  668,
        0,    0,  672,    0,  667,  673,  673,  673,    0,  673,
        0,    0,  673,  674,  674,  674,    0,  675,  675,  675,
      677,  677,  677,  670,  675,  676,  676,  676,    0,  676,
        0,  671,  676,  678,  678,  678,  680,  680,  680,    0,
      678,  679,  679,  679,  673,  679,    0,    0,  679,  681,
      681,  681,  674,  682,  682,  682,  681,  682,    0,  677,
      682,  683,  683,  683,  676,  684,  684,  684,    0,  685,
      685,  685,  684,  685,    0,  680,  685,  686,  686,  686,

      679,  687,  687,  687,  689,  689,  689,    0,  687,  688,
      688,  688,  682,  688,    0,    0,  688,  690,  690,  690,
      683,  692,  692,  692,  690,  691,  691,  691,  685,  691,
        0,    0,  691,  693,  693,  693,  686,  694,  694,  694,
      693,  694,    0,  689,  694,  695,  695,  695,  688,  696,
      696,  696,  698,  698,  698,    0,  696,  701,  701,  701,
      692,  697,  697,  697,  691,  697,    0,    0,  697,    0,
      699,  699,  699,  704,  704,  704,  694,  699,  700,  700,
      700,    0,  700,    0,  695,  700,  702,  702,  702,    0,
        0,  698,    0,  702,    0,    0,  701,  703,  703,  703,

      697,  703,    0,    0,  703,    0,  705,  705,  705,  707,
      707,  707,  704,  705,  706,  706,  706,  700,  706,    0,
        0,  706,  708,  708,  708,    0,  709,  709,  709,  708,
      709,    0,    0,  709,    0,    0,  703,  710,  710,  710,
      711,  711,  711,  713,  713,  713,    0,  711,  707,    0,
      712,  712,  712,  706,  712,    0,    0,  712,    0,  714,
      714,  714,  716,  716,  716,  709,  714,  715,  715,  715,
        0,  715,    0,    0,  715,    0,  710,  717,  717,  717,
        0,    0,  713,    0,  717,    0,  718,  718,  718,  712,
      718,    0,    0,  718,  719,  719,  719,  720,  720,  720,

        0,  716,    0,    0,  720,    0,  715,  721,  721,  721,
        0,  721,    0,    0,  721,  722,  722,  722,    0,  723,
      723,  723,  725,  725,  725,  718,  723,  724,  724,  724,
        0,  724,    0,  719,  724,  726,  726,  726,  728,  728,
      728,    0,  726,  727,  727,  727,  721,  727,    0,    0,
      727,  730,  730,  730,  722,  730,    0,    0,  730,    0,
        0,  725,  731,  731,  731,    0,  724,  732,  732,  732,
        0,  732,    0,    0,  732,    0,    0,  728,  733,  733,
      733,    0,  727,    0,  734,  734,  734,    0,  734,    0,
      730,  734,  735,  735,  735,  736,  736,  736,    0,  736,

        0,  731,  736,  737,  737,  737,  732,  738,  738,  738,
        0,  738,    0,    0,  738,    0,    0,  733,  739,  739,
      739,    0,    0,  734,    0,  740,  740,  740,    0,  740,
        0,  735,  740,    0,  736,  741,  741,  741,  742,  742,
      742,    0,  737,  743,  743,  743,  738,  744,  744,  744,
      745,  745,  745,  746,  746,  746,    0,  739,  748,  748,
      748,  749,  749,  749,  740,  750,  750,  750,  751,  751,
      751,  752,  752,  752,  741,    0,    0,  742,  753,  753,
      753,    0,  743,  754,  754,  754,  744,    0,    0,  745,
        0,    0,  746,  755,  755,  755,    0,  748,    0,    0,

      749,  756,  756,  756,  750,    0,    0,  751,    0,    0,
      752,  757,  757,  757,  758,  758,  758,  753,  759,  759,
      759,    0,  754,  760,  760,  760,  761,  761,  761,  762,
      762,  762,  755,  763,  763,  763,  764,  764,  764,    0,
      756,  765,  765,  765,  766,  766,  766,  767,  767,  767,
      757,    0,    0,  758,  768,  768,  768,  759,  769,  769,
      769,    0,  760,    0,    0,  761,    0,    0,  762,  770,
      770,  770,  763,    0,    0,  764,  771,  771,  771,    0,
      765,    0,    0,  766,    0,    0,  767,  772,  772,  772,
      773,  773,  773,  768,  774,  774,  774,  769,  775,  775,

      775,  776,  776,  776,  777,  777,  777,    0,  770,  778,
      778,  778,  779,  779,  779,  771,  780,  780,  780,  781,
      781,  781,  782,  782,  782,    0,  772,    0,    0,  773,
      783,  783,  783,  774,  784,  784,  784,  775,    0,    0,
      776,    0,    0,  777,  785,  785,  785,    0,  778,    0,
        0,  779,  786,  786,  786,  780,    0,    0,  781,    0,
        0,  782,  787,  787,  787,  788,  788,  788,    0,  783,
      789,  789,  789,  784,  790,  790,  790,  791,  791,  791,
      792,  792,  792,  785,  793,  793,  793,  794,  794,  794,
        0,  786,  795,  795,  795,  796,  796,  796,  797,  797,

      797,  787,    0,    0,  788,  798,  798,  798,    0,  789,
      799,  799,  799,  790,    0,    0,  791,    0,    0,  792,
      800,  800,  800,  793,    0,    0,  794,  801,  801,  801,
        0,  795,    0,    0,  796,    0,    0,  797,  802,  802,
      802,  803,  803,  803,  798,  804,  804,  804,    0,  799,
      805,  805,  805,  806,  806,  806,  807,  807,  807,  800,
      808,  808,  808,  809,  809,  809,  801,  810,  810,  810,
      811,  811,  811,  812,  812,  812,    0,  802,    0,    0,
      803,  813,  813,  813,  804,  814,  814,  814,    0,  805,
        0,    0,  806,    0,    0,  807,  815,  815,  815,  808,

        0,    0,  809,  816,  816,  816,  810,    0,    0,  811,
        0,    0,  812,  817,  817,  817,  818,  818,  818,    0,
      813,  819,  819,  819,  814,  820,  820,  820,  821,  821,
      821,  822,  822,  822,    0,  815,  823,  823,  823,    0,
        0,    0,  816,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  817,    0,    0,  818,    0,    0,    0,    0,
      819,    0,    0,    0,  820,    0,    0,  821,    0,    0,
      822,    0,    0,    0,    0,  823,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  826,  826,  826,  826,  826,  826,  826,  826,  826,

      826,  826,  826,  826,  826,  826,  827,  827,  827,  827,
      827,  827,  827,  827,  827,  827,  827,  827,  827,  827,
      827,  828,  828,  828,  828,  828,  828,  828,  828,  828,
      828,  828,  828,  828,  828,  828,  829,  829,  829,  829,
      829,  829,  829,  829,  829,  829,  829,  829,  829,  829,
      829,  830,  830,  830,  830,  830,  830,  830,  830,  830,
      830,  830,  830,  830,  830,  830,  831,  831,  831,  831,
      831,  831,  831,  831,  831,  831,  831,  831,  831,  831,
      831,  832,  832,  832,  832,  832,  832,  832,  832,  832,
      832,  832,  832,  832,  832,  832,  833,  833,  833,  833,

      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  834,  834,  834,  834,  834,  834,  834,  834,  834,
      834,  834,  834,  834,  834,  834,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  836,  836,  836,  836,  836,  836,  836,  836,  836,
      836,  836,  836,  836,  836,  836,  837,  837,  837,  837,
      837,  837,  837,  837,  837,  837,  837,  837,  837,  837,
      837,  838,  838,  838,  838,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  838,  838,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  839,

      839,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  841,  841,  841,  841,
      841,  841,  841,  841,  841,  841,  841,  841,  841,  841,
      841,  842,  842,  842,  842,  842,  842,  842,  842,  842,
      842,  842,  842,  842,  842,  842,  843,  843,  843,  843,
      843,  843,  843,  843,  843,  843,  843,  843,  843,  843,
      843,  846,  846,  846,    0,  846,  846,  846,  846,  846,
      846,    0,  846,  846,  846,  846,  847,  847,  847,    0,
      847,  847,  847,  847,  847,  847,  847,  847,  847,  847,
      847,  848,  848,  848,    0,    0,  848,    0,    0,    0,

      848,    0,  848,  849,  849,  849,    0,    0,    0,  849,
      849,  849,  849,  849,  849,  849,  849,  850,  850,  850,
        0,  850,  850,  850,  850,  850,  850,  850,  850,  850,
      850,  850,  851,  851,  851,    0,  851,  851,  851,  851,
      851,  851,  851,  851,  851,  851,  851,  852,    0,    0,
        0,    0,  852,    0,    0,    0,  852,    0,  852,  853,
      853,    0,    0,    0,  853,    0,    0,    0,  853,    0,
      853,  854,    0,    0,    0,    0,    0,    0,  854,    0,
      854,    0,  854,  856,  856,  856,  856,  856,  856,  856,
      856,  856,  856,  856,  856,  856,  856,  856,  857,    0,

      857,    0,  857,  857,  857,  857,    0,  857,    0,  857,
      857,  857,  857,  858,  858,  858,  858,  858,  858,  858,
      858,    0,  858,  858,  858,  858,  858,  858,  859,    0,
      859,    0,  859,  859,  859,  859,  859,  859,  859,  859,
      859,  859,  859,  860,    0,  860,    0,  860,  860,  860,
      860,    0,  860,  860,  860,  860,  860,  860,  861,    0,
      861,    0,  861,  861,  861,  861,  861,  861,  861,  861,
      861,  861,  861,  864,  864,  864,    0,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  866,  866,
      866,    0,  866,  866,    0,  866,  866,  866,  866,  866,

      866,  866,  866,  867,  867,  867,    0,  867,  867,  867,
      867,  867,  867,  867,  867,  867,  867,  867,  868,  868,
      868,    0,  868,  868,  868,  868,  868,  868,  868,  868,
      868,  868,  868,  869,  869,  869,    0,  869,  869,  869,
      869,  869,  869,  869,  869,  869,  869,  869,  870,  870,
      870,    0,  870,  870,  870,  870,  870,  870,  870,  870,
      870,  870,  871,  871,  871,    0,  871,  871,  871,  871,
      871,  871,  871,  871,  871,  871,  871,  872,  872,  872,
        0,  872,  872,  872,  872,  872,  872,  872,  872,  872,
      872,  872,  873,  873,  873,    0,  873,  873,  873,  873,

      873,  873,  873,  873,  873,  873,  874,  874,  874,    0,
      874,  874,  874,  874,  874,  874,  874,  874,  874,  874,
      875,    0,    0,  875,    0,    0,    0,    0,    0,    0,
      875,  875,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pre.l"
#define INITIAL 0
/******************************************************************************
 *
 * 
 *
 * Copyright (C) 1997-2004 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "pre.l"

/*
 *	includes
 */

#include <stdio.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qfile.h>
#include <qstrlist.h>
#include <qdict.h>
#include <qregexp.h>
#include <qfileinfo.h>
#include <qdir.h>
  
#include "pre.h"
#include "constexp.h"
#include "define.h"
#include "doxygen.h"
#include "message.h"
#include "util.h"
#include "defargs.h"
#include "debug.h"
#include "bufstr.h"

#if defined(_MSC_VER) || defined(__BORLANDC__)
#define popen _popen
#define pclose _pclose
#endif

#define YY_NEVER_INTERACTIVE 1
  

struct FileState
{
  int lineNr;
  FILE *filePtr;
  YY_BUFFER_STATE bufState;
  QCString fileName;
};  

/* -----------------------------------------------------------------
 *
 *	scanner's state
 */

static int                g_yyLineNr   = 1;
static QCString           g_yyFileName;
static FileDef           *g_yyFileDef;
static int                g_ifcount    = 0;
static QStrList          *g_pathList = 0;  
static QStack<FileState>  g_includeStack;
static QDict<int>        *g_argDict;
static int                g_defArgs = -1;
static QCString           g_defName;
static QCString           g_defText;
static QCString           g_defLitText;
static QCString           g_defArgsStr;
static bool               g_defVarArgs;
static int                g_level;
static int                g_lastCContext;
static int                g_lastCPPContext;
static QArray<int>        g_levelGuard;
static BufStr            *g_outputBuf;
static int                g_roundCount;
static bool               g_quoteArg;
static DefineDict        *g_fileDefineDict;
static DefineDict        *g_expandedDict;
static int                g_findDefArgContext;
static QCString           g_lastGuardName;
static QCString           g_incName;
static QCString           g_guardExpr;
static int                g_curlyCount;
static bool               g_nospaces; // add extra spaces during macro expansion

static bool               g_macroExpansion; // from the configuration
static bool               g_expandOnlyPredef; // from the configuration
static int                g_commentCount;
static bool               g_insideComment;


static void setFileName(const char *name)
{
  bool ambig;
  g_yyFileName=name;
  g_yyFileDef=findFileDef(Doxygen::inputNameDict,g_yyFileName,ambig);
  if (g_yyFileDef && g_yyFileDef->isReference()) g_yyFileDef=0;
}

static void incrLevel()
{
  g_level++;
  g_levelGuard.resize(g_level);
  g_levelGuard[g_level-1]=FALSE;
  //printf("%s line %d: incrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
}

static void decrLevel()
{
  //printf("%s line %d: decrLevel %d\n",g_yyFileName.data(),g_yyLineNr,g_level);
  if (g_level > 0)
  {
    g_level--;
    g_levelGuard.resize(g_level);
  }
  else
  {
    err("%s:%d: Error: More #endif's than #if's found.\n",
	g_yyFileName.data(),g_yyLineNr);
  }
}

static bool otherCaseDone()
{
  if (g_level==0)
  {
    err("%s:%d: Error: Found an #else without a preceding #if.\n",
	g_yyFileName.data(),g_yyLineNr);
    return TRUE;
  }
  else
  {
    return g_levelGuard[g_level-1];
  }
}

static void setCaseDone(bool value)
{
  g_levelGuard[g_level-1]=value;
}

static Define *isDefined(const char *name)
{
  if (name)
  {
    Define *def;
    //if ((def=fileDefineCache->findDefine(g_yyFileName,name)) && !def->undef) 
    //	return def;
    if ((def=g_fileDefineDict->find(name)) && !def->undef) return def; 
  }
  return 0;
}

static FILE *checkAndOpenFile(const QCString &absName)
{
  FILE *f = 0;
  //printf("checkAndOpenFile(%s)\n",absName.data());
  QFileInfo fi(absName);
  if (fi.exists() && fi.isFile())
  {
    // check include stack for absFileName

    QStack<FileState> tmpStack;
    g_includeStack.setAutoDelete(FALSE);
    FileState *fs;
    bool alreadyIncluded=FALSE;
    while ((fs=g_includeStack.pop()))
    {
      if (fs->fileName==absName) alreadyIncluded=TRUE;
      tmpStack.push(fs);
    }
    while ((fs=tmpStack.pop()))
    {
      g_includeStack.push(fs);
    }
    g_includeStack.setAutoDelete(TRUE);

    if (alreadyIncluded) return 0; 

    
    QCString filterName = getFileFilter(absName);
    if (!filterName.isEmpty())
    {
      QCString cmd = filterName+" "+absName;
      f=popen(cmd,"r");
      if (!f) err("Error: could not execute filter %s\n",cmd.data());
    }
    else
    {
      f=fopen(absName,"r");
      if (!f) err("Error: could not open file %s for reading\n",absName.data());
    }
  }
  return f;
}

static FILE *findFile(const char *fileName,bool localInclude)
{
  if (localInclude && g_yyFileDef)
  {
    QCString absName = g_yyFileDef->getPath()+"/"+fileName;
    FILE *f = checkAndOpenFile(absName);
    if (f)
    {
      setFileName(absName);
      g_yyLineNr=1;
      return f;
    }
  }
  if (g_pathList==0) 
  {
    return 0;
  }
  char *s=g_pathList->first();
  while (s)
  {
    QCString absName = (QCString)s+"/"+fileName;
    FILE *f = checkAndOpenFile(absName);
    if (f)
    {
      setFileName(absName);
      g_yyLineNr=1;
      return f;
    }

    s=g_pathList->next();
  } 
  return 0;
}

static QCString extractTrailingComment(const char *s)
{
  if (s==0) return "";
  int i=strlen(s)-1;
  while (i>=0)
  {
    char c=s[i];
    switch (c)
    {
      case '/':
	{
	  i--;
	  if (i>=0 && s[i]=='*') // end of a comment block
	  {
	    i--;
	    while (i>0 && !(s[i-1]=='/' && s[i]=='*')) i--;
	    if (i==0) return s; else return &s[i-1];
	  }
	  else
	  {
	    return "";
	  }
	} 
	break;
	// whitespace or line-continuation
      case ' ':
      case '\t': 
      case '\r':
      case '\n':
      case '\\':
	break;
      default:
	return "";
    }
    i--;
  }
  return "";
}

static int getNextChar(const QCString &expr,QCString *rest,uint &pos);
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos);
static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c);
static void expandExpression(QCString &expr,QCString *rest,int pos);

static QCString stringize(const QCString &s)
{
  QCString result;
  uint i=0;
  bool inString=FALSE;
  bool inChar=FALSE;
  char c,pc;
  while (i<s.length())
  {
    if (!inString && !inChar)
    {
      while (i<s.length() && !inString && !inChar)
      {
	c=s.at(i++);
	if (c=='"')
	{
	  result+="\\\"";
	  inString=TRUE;
	}
	else if (c=='\'')
	{
	  result+=c;
	  inChar=TRUE;
	}
	else
	{
	  result+=c;
	}
      }
    }
    else if (inChar)
    {
      while (i<s.length() && inChar)
      {
	c=s.at(i++);
	if (c=='\'')
	{
	  result+='\'';
	  inChar=FALSE;
	}
	else if (c=='\\')
	{
	  result+="\\\\";
	}
	else
	{
	  result+=c;
	}
      }
    }
    else
    {
      pc=0;
      while (i<s.length() && inString)
      {
	char c=s.at(i++);
	if (c=='"') 
	{
	  result+="\\\"";
	  inString= pc=='\\';
	}
	else if (c=='\\')
	  result+="\\\\";
	else
	  result+=c;
	pc=c;
      }
    }
  }
  //printf("stringize `%s'->`%s'\n",s.data(),result.data());
  return result;
}

/*! Execute all ## operators in expr. 
 * If the macro name before or after the operator contains a no-rescan 
 * marker (@-) then this is removed (before the concatenated macro name
 * may be expanded again.
 */
static void processConcatOperators(QCString &expr)
{
  //printf("processConcatOperators: in=`%s'\n",expr.data());
  QRegExp r("[ \\t\\n]*##[ \\t\\n]*"); 
  int l,n,i=0;
  if (expr.isEmpty()) return;
  while ((n=r.match(expr,i,&l))!=-1)
  {
    //printf("Match: `%s'\n",expr.data()+i);
    if (n+l+1<(int)expr.length() && expr.at(n+l)=='@' && expr.at(n+l+1)=='-')
    {
      // remove no-rescan marker after ID
      l+=2;
    }
    //printf("found `%s'\n",expr.mid(n,l).data());
    // remove the ## operator and the surrounding whitespace
    expr=expr.left(n)+expr.right(expr.length()-n-l);
    int k=n-1;
    while (k>=0 && isId(expr.at(k))) k--; 
    if (k>0 && expr.at(k)=='-' && expr.at(k-1)=='@')
    {
      // remove no-rescan marker before ID
      expr=expr.left(k-1)+expr.right(expr.length()-k-1);
      n-=2;
    }
    i=n;
  }
  //printf("processConcatOperators: out=`%s'\n",expr.data());
}

static void yyunput (int c,char *buf_ptr  );
static void returnCharToStream(char c)
{
  unput(c);
}

static inline void addTillEndOfString(const QCString &expr,QCString *rest,
                                       uint &pos,char term,QCString &arg)
{
  char cc;
  while ((cc=getNextChar(expr,rest,pos))!=EOF)
  {
    if (cc=='\\') arg+=cc,cc=getNextChar(expr,rest,pos);
    else if (cc==term) return;
    arg+=cc;
  }
}

/*! replaces the function macro \a def whose argument list starts at
 * \a pos in expression \a expr. 
 * Notice that this routine may scan beyond the \a expr string if needed.
 * In that case the characters will be read from the input file.
 * The replacement string will be returned in \a result and the 
 * length of the (unexpanded) argument list is stored in \a len.
 */ 
static bool replaceFunctionMacro(const QCString &expr,QCString *rest,int pos,int &len,const Define *def,QCString &result)
{
  //printf("replaceFunctionMacro(expr=%s,rest=%s,pos=%d,def=%s) level=%d\n",expr.data(),rest ? rest->data() : 0,pos,def->name.data(),g_level);
  uint j=pos;
  len=0;
  result.resize(0);
  int cc;
  while ((cc=getCurrentChar(expr,rest,j))!=EOF && cc==' ') 
  { 
    len++; 
    getNextChar(expr,rest,j); 
  }
  if (cc!='(') 
  { 
    unputChar(expr,rest,j,' '); 
    return FALSE; 
  }
  getNextChar(expr,rest,j); // eat the `(' character

  QDict<QCString> argTable;  // list of arguments
  argTable.setAutoDelete(TRUE);
  QCString arg;
  int argCount=0;
  bool done=FALSE;
  
  // PHASE 1: read the macro arguments
  if (def->nargs==0)
  {
    while ((cc=getNextChar(expr,rest,j))!=EOF)
    {
      char c = (char)cc;
      if (c==')') break;
    }
  }
  else
  {
    while (!done && (argCount<def->nargs || def->varArgs) && 
	((cc=getNextChar(expr,rest,j))!=EOF)
	  )
    {
      char c=(char)cc;
      if (c=='(') // argument is a function => search for matching )
      {
	int level=1;
	arg+=c;
	//char term='\0';
	while ((cc=getNextChar(expr,rest,j))!=EOF)
	{
	  char c=(char)cc;
	  //printf("processing %c: term=%c (%d)\n",c,term,term);
	  if (c=='\'' || c=='\"') // skip ('s and )'s inside strings
	  {
	    arg+=c;
	    addTillEndOfString(expr,rest,j,c,arg);
	  }
	  if (c==')')
	  {
	    level--;
	    arg+=c;
	    if (level==0) break;
	  }
	  else if (c=='(')
	  {
	    level++;
	    arg+=c;
	  }
	  else
	    arg+=c;
	}
      }
      else if (c==')' || c==',') // last or next argument found
      {
	if (c==',' && argCount==def->nargs-1 && def->varArgs)
	{
	  arg=arg.stripWhiteSpace();
	  arg+=',';
	}
	else
	{
	  QCString argKey;
	  argKey.sprintf("@%d",argCount++); // key name
	  arg=arg.stripWhiteSpace();
	  // add argument to the lookup table
	  argTable.insert(argKey, new QCString(arg));
	  arg.resize(0);
	  if (c==')') // end of the argument list
	  {
	    done=TRUE;
	  }
	}
      } 
      else if (c=='\"') // append literal strings
      {
	arg+=c; 
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='"';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;	  
	  arg+=c;
	}
      }
      else if (c=='\'') // append literal characters
      {
	arg+=c;
	bool found=FALSE;
	while (!found && (cc=getNextChar(expr,rest,j))!=EOF)
	{
	  found = cc=='\'';
	  if (cc=='\\')
	  {
	    c=(char)cc;	  
	    arg+=c;
	    if ((cc=getNextChar(expr,rest,j))==EOF) break;
	  }
	  c=(char)cc;
	  arg+=c;
	}
      }	    
      else // append other characters
      {
	arg+=c;
      }
    }
  }

  // PHASE 2: apply the macro function
  if (argCount==def->nargs || 
      (argCount>def->nargs && def->varArgs)) // matching parameters lists
  {
    uint k=0;
    // substitution of all formal arguments
    QCString resExpr;
    const QCString d=def->definition.stripWhiteSpace();
    bool inString=FALSE;
    while (k<d.length())
    {
      if (d.at(k)=='@') // maybe a marker, otherwise an escaped @
      {
	if (d.at(k+1)=='@') // escaped @ => copy it (is unescaped later)
	{
	  k+=2;
	  resExpr+="@@"; // we unescape these later
	}
	else if (d.at(k+1)=='-') // no-rescan marker
	{
	  k+=2;
	  resExpr+="@-";
	}
	else // argument marker => read the argument number
	{
	  QCString key="@";
	  QCString *subst=0;
	  bool hash=FALSE;
	  int l=k-1;
	  // search for ## backward
	  if (l>=0 && d.at(l)=='"') l--;
	  while (l>=0 && d.at(l)==' ') l--;
	  if (l>0 && d.at(l)=='#' && d.at(l-1)=='#') hash=TRUE;
	  k++;
	  // scan the number
	  while (k<d.length() && d.at(k)>='0' && d.at(k)<='9') key+=d.at(k++);
	  if (!hash) 
	  {
	    // search for ## forward
	    l=k;
	    if (l<(int)d.length() && d.at(l)=='"') l++;
	    while (l<(int)d.length() && d.at(l)==' ') l++;
	    if (l<(int)d.length()-1 && d.at(l)=='#' && d.at(l+1)=='#') hash=TRUE;
	  }
	  //printf("request key %s result %s\n",key.data(),argTable[key]->data());
	  if (key.length()>1 && (subst=argTable[key])) 
	  {
	    QCString substArg=*subst;
	    //printf("substArg=`%s'\n",substArg.data());
	    // only if no ## operator is before or after the argument
	    // marker we do macro expansion.
	    if (!hash) expandExpression(substArg,0,0);
	    if (inString)
	    {
	      //printf("`%s'=stringize(`%s')\n",stringize(*subst).data(),subst->data());

	      // if the marker is inside a string (because a # was put 
	      // before the macro name) we must escape " and \ characters
	      resExpr+=stringize(substArg);
	    }
	    else
	    {
	      if (hash && substArg.isEmpty())
	      {
		resExpr+="@E"; // empty argument will be remove later on
	      }
	      else if (g_nospaces)
	      {
	        resExpr+=substArg;
	      }
	      else
	      {
	        resExpr+=" "+substArg+" ";
	      }
	    }
	  }
	}
      }
      else // no marker, just copy
      {
	if (!inString && d.at(k)=='\"') 
	{
	  inString=TRUE; // entering a literal string
	}
	else if (inString && d.at(k)=='\"' && (d.at(k-1)!='\\' || d.at(k-2)=='\\'))
	{
	  inString=FALSE; // leaving a literal string
	}
	resExpr+=d.at(k++);
      }
    }
    len=j-pos;
    result=resExpr;
    //printf("result after substitution `%s' expr=`%s'\n",
    //       result.data(),expr.mid(pos,len).data());
    return TRUE;
  }
  else
  {
    return FALSE;
  }
}


/*! returns the next identifier in string \a expr by starting at position \a p.
 * The position of the identifier is returned (or -1 if nothing is found)
 * and \a l is its length. Any quoted strings are skipping during the search.
 */
static int getNextId(const QCString &expr,int p,int *l)
{
  int n;
  while (p<(int)expr.length())
  {
    char c=expr.at(p++);
    if (isalpha(c) || c=='_') // read id
    {
      n=p-1;
      while (p<(int)expr.length() && isId(expr.at(p))
	    ) p++;
      *l=p-n;
      return n; 
    }
    else if (c=='"') // skip string
    {
      char ppc=0,pc=c;
      if (p<(int)expr.length()) c=expr.at(p);
      while (p<(int)expr.length() && (c!='"' || (pc=='\\' && ppc!='\\'))) 
	// continue as long as no " is found, but ignoring \", but not \\"
      {
	ppc=pc;
	pc=c;
	c=expr.at(p);
	p++;
      }
    }
    else if (c=='/') // skip C Comment
    {
      char pc=c;
      if (p<(int)expr.length()) 
      {
	c=expr.at(++p);
        if (c=='*')  // Start of C comment
        { 
  	  while (p<(int)expr.length() && !(pc=='*' && c=='/'))
	  {
	    pc=c;
	    c=expr.at(++p);
	  }
	  p++;
        }
      }
    }
  }
  return -1;
}

/*! preforms recursive macro expansion on the string \a expr
 *  starting at position \a pos.
 *  May read additional characters from the input while re-scanning!
 *  If \a expandAll is \c TRUE then all macros in the expression are
 *  expanded, otherwise only the first is expanded.
 */
static void expandExpression(QCString &expr,QCString *rest,int pos)
{
  //printf("expandExpression(%s,%s)\n",expr.data(),rest ? rest->data() : 0);
  QCString macroName;
  QCString expMacro;
  int i=pos,l,p,len;
  while ((p=getNextId(expr,i,&l))!=-1) // search for an macro name
  {
    bool replaced=FALSE;
    macroName=expr.mid(p,l);
    //printf("macroName %s found\n",macroName.data());
    if (p<2 || !(expr.at(p-2)=='@' && expr.at(p-1)=='-')) // no-rescan marker?
    {
      if (g_expandedDict->find(macroName)==0) // expand macro
      {
	Define *def=isDefined(macroName);
	if (def && def->nargs==-1) // simple macro
	{
	  // substitute the definition of the macro
	  //printf("macro `%s'->`%s'\n",macroName.data(),def->definition.data());
	  if (g_nospaces)
	  {
	    expMacro=def->definition.stripWhiteSpace();
	  }
	  else
	  {
	    expMacro=" "+def->definition.stripWhiteSpace()+" ";
	  }
	  //expMacro=def->definition.stripWhiteSpace();
	  replaced=TRUE;
	  len=l;
	  //printf("simple macro expansion=`%s'->`%s'\n",macroName.data(),expMacro.data());
	}
	else if (def && def->nargs>=0) // function macro
	{
	  replaced=replaceFunctionMacro(expr,rest,p+l,len,def,expMacro);
	  len+=l;
	}

	if (replaced) // expand the macro and rescan the expression
	{
	    
	  //printf("replacing `%s'->`%s'\n",expr.mid(p,len).data(),expMacro.data());
	  QCString resultExpr=expMacro;
	  QCString restExpr=expr.right(expr.length()-len-p);
	  processConcatOperators(resultExpr);
	  if (!def->nonRecursive)
	  {
	    g_expandedDict->insert(macroName,def);
	    expandExpression(resultExpr,&restExpr,0);
	    g_expandedDict->remove(macroName);
	  }
	  expr=expr.left(p)+resultExpr+restExpr;
	  i=p;
	  //printf("new expression: %s\n",expr.data());
	}
	else // move to the next macro name
	{
	  //printf("moving to the next macro old=%d new=%d\n",i,p+l);
	  i=p+l;
	}
      }
      else // move to the next macro name
      {
	expr=expr.left(p)+"@-"+expr.right(expr.length()-p);
	//printf("macro already expanded, moving to the next macro expr=%s\n",expr.data());
	i=p+l+2;
	//i=p+l;
      }
    }
    else // no re-scan marker found, skip the macro name
    {
      //printf("skipping marked macro\n");
      i=p+l;
    }
  }
}

/*! replaces all occurrences of @@@@ in \a s by @@
 *  and removes all occurrences of @@E.
 *  All identifiers found are replaced by 0L
 */
QCString removeIdsAndMarkers(const char *s)
{
  //printf("removeIdsAndMarkers(%s)\n",s);
  const char *p=s;
  char c;
  bool inNum=FALSE;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @ and remove @E
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	else if (*(p+1)=='E')
	{
	  // skip
	}
	p+=2;
      }
      else if (isdigit(c)) // number
      {
	result+=c;
	p++;
        inNum=TRUE;	
      }
      else if (c=='d' && !inNum) // identifier starting with a `d'
      {
	if (strncmp(p,"defined ",8)==0 || strncmp(p,"defined(",8)==0) 
	           // defined keyword
	{
	  p+=7; // skip defined
	}
	else
	{
	  result+="0L";
	  p++;
	  while ((c=*p) && isId(c)) p++;
	}
      }
      else if ((isalpha(c) || c=='_') && !inNum) // replace identifier with 0L
      {
	result+="0L";
	p++;
	while ((c=*p) && isId(c)) p++;
      }
      else if (c=='/') // skip C comments
      {
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    pc=c;
	    c=*++p;
	  }
	  p++;
	}
      }
      else 
      {
	result+=c;
	char lc=tolower(c);
	if (!isId(lc) && lc!='.' && lc!='-' && lc!='+') inNum=FALSE;
	p++;
      }
    }
  }
  //printf("removeIdsAndMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! replaces all occurrences of @@ in \a s by @
 *  \par assumption: 
 *   \a s only contains pairs of @@'s
 */
QCString removeMarkers(const char *s)
{
  const char *p=s;
  char c;
  QCString result;
  if (p)
  {
    while ((c=*p))
    {
      if (c=='@') // replace @@ with @
      {
	if (*(p+1)=='@')
	{
	  result+=c; 
	}
	p+=2;
      }
      else if (c=='/') // skip C comments
      {
	result+=c;
	char pc=c;
	c=*++p;
	if (c=='*') // start of C comment
	{ 
	  while (*p && !(pc=='*' && c=='/')) // search end of comment
	  {
	    result+=c;
	    pc=c;
	    c=*++p;
	  }
	  result+=c;
	  p++;
	}
      }
      else
      {
	result+=c;
	p++;
      }
    }
  }
  //printf("RemoveMarkers(%s)=%s\n",s,result.data());
  return result;
}

/*! compute the value of the expression in string \a expr.
 *  If needed the function may read additional characters from the input.
 */

bool computeExpression(const QCString &expr)
{
  QCString e=expr;
  expandExpression(e,0,0);
  //printf("after expansion `%s'\n",e.data());
  e = removeIdsAndMarkers(e);
  if (e.isEmpty()) return FALSE;
  //printf("parsing `%s'\n",e.data());
  return parseCppExpression(g_yyFileName,g_yyLineNr,e);
}

/*! expands the macro definition in \a name
 *  If needed the function may read additional characters from the input
 */

QCString expandMacro(const QCString &name)
{
  QCString n=name;
  expandExpression(n,0,0);
  n=removeMarkers(n);
  //printf("expandMacro `%s'->`%s'\n",name.data(),n.data());
  return n;
}

Define *newDefine()
{
  Define *def=new Define;
  def->name = g_defName;
  def->definition = g_defText.stripWhiteSpace();
  def->nargs = g_defArgs;
  def->fileName = g_yyFileName; 
  def->lineNr = g_yyLineNr;
  def->varArgs = g_defVarArgs;
  //printf("newDefine: `%s'->`%s'\n",def->name.data(),def->definition.data());
  if (!def->name.isEmpty() && Doxygen::expandAsDefinedDict[def->name])
  {
    def->isPredefined=TRUE;
  }
  return def;
}

void addDefine()
{
  //printf("addDefine %s %s\n",g_defName.data(),g_defArgsStr.data());
  //ArgumentList *al = new ArgumentList;
  //stringToArgumentList(g_defArgsStr,al);
  MemberDef *md=new MemberDef(
      g_yyFileName,g_yyLineNr,
      "#define",g_defName,g_defArgsStr,0,
      Public,Normal,FALSE,FALSE,MemberDef::Define,0,0);
  if (!g_defArgsStr.isEmpty())
  {
    ArgumentList *argList = new ArgumentList;
    //printf("addDefine() g_defName=`%s' g_defArgsStr=`%s'\n",g_defName.data(),g_defArgsStr.data());
    stringToArgumentList(g_defArgsStr,argList);
    md->setArgumentList(argList);
  }
  //printf("Setting initializer for `%s' to `%s'\n",g_defName.data(),g_defText.data());
  int l=g_defLitText.find('\n');
  if (l>0 && g_defLitText.left(l).stripWhiteSpace()=="\\")
  {
    // strip first line if it only contains a slash 
    g_defLitText = g_defLitText.right(g_defLitText.length()-l-1);
  }
  else if (l>0) 
  {
    // align the items on the first line with the items on the second line
    int k=l+1;
    const char *p=g_defLitText.data()+k;
    char c;
    while ((c=*p++) && (c==' ' || c=='\t')) k++;
    g_defLitText=g_defLitText.mid(l+1,k-l-1)+g_defLitText.stripWhiteSpace();
  }
  md->setInitializer(g_defLitText.stripWhiteSpace());
  
  //md->setDefFile(g_yyFileName);
  //md->setDefLine(g_yyLineNr);
  md->setFileDef(g_yyFileDef);
  md->setDefinition("#define "+g_defName);

  MemberName *mn=Doxygen::functionNameSDict[g_defName];
  if (mn==0)
  {
    mn = new MemberName(g_defName);
    //Doxygen::functionNameList.append(mn);
    //Doxygen::functionNameDict.insert(g_defName,mn);
    Doxygen::functionNameSDict.append(g_defName,mn);
  }
  mn->append(md);
  if (g_yyFileDef) g_yyFileDef->insertMember(md);
  
  //Define *d;
  //if ((d=defineDict[g_defName])==0) defineDict.insert(g_defName,newDefine()); 
}

static inline void outputChar(char c)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addChar(c);
} 

static inline void outputArray(const char *a,int len)
{
  if (g_includeStack.isEmpty() || g_curlyCount>0) g_outputBuf->addArray(a,len);
}

static void readIncludeFile(const QCString &inc)
{
  if (!Config_getBool("SEARCH_INCLUDES")) return; // do not read include files
  uint i=0;
  
  // find the start of the include file name
  while (i<inc.length() && 
         (inc.at(i)==' ' || inc.at(i)=='"' || inc.at(i)=='<')
	) i++;
  uint s=i;
  
  // was it a local include?
  bool localInclude = s>0 && inc.at(s-1)=='"';
  
  // find the end of the include file name
  while (i<inc.length() && inc.at(i)!='"' && inc.at(i)!='>') i++; 

  if (s<inc.length() && i>s) // valid include file name found
  {
    // extract include path+name
    QCString incFileName=inc.mid(s,i-s).stripWhiteSpace(); 

    FILE *f;
    QCString oldFileName = g_yyFileName.copy();
    FileDef *oldFileDef  = g_yyFileDef;
    int oldLineNr        = g_yyLineNr;
    //printf("Searching for `%s'\n",incFileName.data());
    if ((f=findFile(incFileName,localInclude))) // see if the include file can be found
    {
      //printf("Found include file!\n");
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        for (i=0;i<g_includeStack.count();i++) msg("  ");
        msg("#include %s: parsing...\n",incFileName.data());
      }
      if (oldFileDef) 
      {
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(g_yyFileDef,incFileName,localInclude);
	// add included by dependency
        if (g_yyFileDef)
        {
	  //printf("Adding include dependency %s->%s\n",oldFileDef->name().data(),incFileName.data());
  	  g_yyFileDef->addIncludedByDependency(oldFileDef,oldFileDef->name(),localInclude);
        }
      }
      FileState *fs=new FileState;
      fs->bufState=YY_CURRENT_BUFFER;
      fs->lineNr=oldLineNr;
      fs->fileName=oldFileName;
      fs->filePtr=f;
      // push the state on the stack
      g_includeStack.push(fs);
      // set the scanner to the include file

      // Deal with file changes due to 
      // #include's within { .. } blocks
      QCString lineStr;
      lineStr.sprintf("# 1 \"%s\" 1\n",g_yyFileName.data());
      outputArray(lineStr.data(),lineStr.length());
      
      //fprintf(stderr,"Switching to include file %s\n",incFileName.data());
      preYYin=f;
      yy_switch_to_buffer(yy_create_buffer(preYYin, YY_BUF_SIZE));
    } 
    else
    {
      if (oldFileDef) 
      {
	bool ambig;
	FileDef *fd = findFileDef(Doxygen::inputNameDict,incFileName,ambig);
	//printf("findFileDef(%s)=%p\n",incFileName.data(),fd);
	// add include dependency to the file in which the #include was found
	oldFileDef->addIncludeDependency(fd,incFileName,localInclude);
	// add included by dependency
        if (fd)
        {
          //printf("Adding include dependency (2) %s->%s ambig=%d\n",oldFileDef->name().data(),fd->name().data(),ambig);
  	  fd->addIncludedByDependency(oldFileDef,oldFileDef->name(),localInclude);
        }
      }
      if (Debug::isFlagSet(Debug::Preprocessor))
      {
        msg("#include %s: not found or already included! skipping...\n",incFileName.data());
        //printf("Error: include file %s not found\n",yytext);
      }
    }
  }
}

/* ----------------------------------------------------------------- */

#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
  int len = fread( buf, 1, max_size, yyin );
  if (len==0 && ferror( yyin ))
  {
    yy_fatal_error( "input in flex scanner failed" );
    return len;
  }
  return filterCRLF(buf,len);
}

/* ----------------------------------------------------------------- */

#define Start 1

#define Command 2

#define SkipCommand 3

#define SkipLine 4

#define CopyLine 5

#define CopyString 6

#define Include 7

#define IncludeID 8

#define DefName 9

#define DefineArg 10

#define DefineText 11

#define SkipCPPBlock 12

#define Ifdef 13

#define Ifndef 14

#define SkipCComment 15

#define CopyCComment 16

#define SkipVerbatim 17

#define SkipCPPComment 18

#define RemoveCComment 19

#define RemoveCPPComment 20

#define Guard 21

#define DefinedExpr1 22

#define DefinedExpr2 23

#define SkipDoubleQuote 24

#define SkipSingleQuote 25

#define UndefName 26

#define IgnoreLine 27

#define FindDefineArgs 28

#define ReadString 29


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 1177 "pre.l"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 825 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3733 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 1179 "pre.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 1180 "pre.l"

	YY_BREAK
case 3:
YY_RULE_SETUP
#line 1181 "pre.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1182 "pre.l"
{ BEGIN(Command); }
	YY_BREAK
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1183 "pre.l"
{
 					  outputArray(yytext,yyleng); 
  					  BEGIN(CopyLine); 
					}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 1187 "pre.l"
{ // constructors?
					  int i;
					  for (i=yyleng-1;i>=0;i--)
					  {
					    unput(yytext[i]);
					  }
					  BEGIN(CopyLine);
                                        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 1195 "pre.l"
{ // function like macro
  					  static bool skipFuncMacros = Config_getBool("SKIP_FUNCTION_MACROS");
					  QCString name(yytext);
					  name=name.left(name.find('(')).stripWhiteSpace();

					  Define *def=0;
					  if (skipFuncMacros && 
					      name!="Q_PROPERTY" &&
					      !(
					         (g_includeStack.isEmpty() || g_curlyCount>0) &&
					         g_macroExpansion &&
					         (def=g_fileDefineDict->find(name)) &&
					         (!g_expandOnlyPredef || def->isPredefined)
					       )
					     )
					  {
					    outputChar('\n');
					    g_yyLineNr++;
					  }
					  else // don't skip
					  {
					    int i;
					    for (i=yyleng-1;i>=0;i--)
					    {
					      unput(yytext[i]);
					    }
					    BEGIN(CopyLine);
					  }
  					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1224 "pre.l"
{
                                          QCString text=yytext;
  					  g_yyLineNr+=text.contains('\n');
					  outputArray(yytext,yyleng);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1229 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty()) 
					  {
					    g_curlyCount++;
					  }
					  outputChar(*yytext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1236 "pre.l"
{ // count brackets inside the main file
  					  if (g_includeStack.isEmpty() && g_curlyCount>0) 
					  {
					    g_curlyCount--;
					  }
					  outputChar(*yytext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1243 "pre.l"
{ 
  					  outputArray(yytext,yyleng);
					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1246 "pre.l"
{ 
  					  outputArray(yytext,yyleng);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1249 "pre.l"
{ 
  					  outputArray(yytext,yyleng);
					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1252 "pre.l"
{
					  outputChar(*yytext);
					  BEGIN( CopyString );
					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1256 "pre.l"
{
  					  outputArray(yytext,yyleng);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1259 "pre.l"
{
					  outputArray(yytext,yyleng);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1262 "pre.l"
{
					  outputChar(*yytext);
					  BEGIN( CopyLine );
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1266 "pre.l"
{
  					  Define *def=0;
					  //def=g_fileDefineDict->find(yytext);
					  //printf("Search for define %s found=%d g_includeStack.isEmpty()=%d "
					  //       "g_curlyCount=%d g_macroExpansion=%d g_expandOnlyPredef=%d "
					  //	 "isPreDefined=%d\n",yytext,def ? 1 : 0,
					  //	 g_includeStack.isEmpty(),g_curlyCount,g_macroExpansion,g_expandOnlyPredef,
					  //	 def ? def->isPredefined : -1
					  //	);
					  if ((g_includeStack.isEmpty() || g_curlyCount>0) &&
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(yytext)) &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it!\n");
					    g_roundCount=0;
					    g_defArgsStr=yytext;
					    if (def->nargs==-1) // no function macro
					    {
					      QCString result = expandMacro(g_defArgsStr);
					      //printf("result=`%s'\n",result.data());
					      outputArray(result,result.length());
					    }
					    else // zero or more arguments
					    {
					      g_findDefArgContext = CopyLine;
					      BEGIN(FindDefineArgs);
					    }
					  }
					  else
					  {
					    outputArray(yytext,yyleng);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1301 "pre.l"
{
                                          Define *def=0;
					  //printf("Search for define %s\n",yytext);
  					  if ((g_includeStack.isEmpty() || g_curlyCount>0) && 
					      g_macroExpansion &&
					      (def=g_fileDefineDict->find(yytext)) &&
					      def->nargs==-1 &&
					      (!g_expandOnlyPredef || def->isPredefined)
					     )
					  {
					    //printf("Found it!\n");
                                            QCString name=yytext;
					    QCString result=expandMacro(name); 
					    //printf("result=`%s'\n",result.data());
					    outputArray(result,result.length());
					  }
					  else
					  {
					    outputArray(yytext,yyleng);
					  }
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1322 "pre.l"
{
  					  outputChar(*yytext);
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1325 "pre.l"
{
  					  outputChar('\n');
					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1330 "pre.l"
{
  					  g_defArgsStr+='(';
  					  g_roundCount++;
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1334 "pre.l"
{
  					  g_defArgsStr+=')';
					  g_roundCount--;
					  if (g_roundCount==0)
					  {
					    QCString result=expandMacro(g_defArgsStr);
					    //printf("g_defArgsStr=`%s'->`%s'\n",g_defArgsStr.data(),result.data());
					    if (g_findDefArgContext==CopyLine)
					    {
					      outputArray(result,result.length());
					      BEGIN(g_findDefArgContext);
					    }
					    else // g_findDefArgContext==IncludeID
					    {
					      readIncludeFile(result);
					      g_nospaces=FALSE;
					      BEGIN(Start);
					    }
					  }
  					}
	YY_BREAK
/*
<FindDefineArgs>")"{B}*"("		{
  					  g_defArgsStr+=yytext;
  					}
  */
case 24:
YY_RULE_SETUP
#line 1359 "pre.l"
{
  					  g_defArgsStr+=yytext;
  					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1362 "pre.l"
{
  					  g_defArgsStr+=*yytext;
  					  BEGIN(ReadString);
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1366 "pre.l"
{
  					  g_yyLineNr++;
					  outputChar('\n');
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1370 "pre.l"
{
  					  g_defArgsStr+="@@";
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1373 "pre.l"
{
  					  g_defArgsStr+=*yytext;
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1376 "pre.l"
{
  					  g_defArgsStr+=*yytext;
					  BEGIN(FindDefineArgs);
  					}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 1380 "pre.l"
{
  					  g_defArgsStr+=yytext;
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1383 "pre.l"
{
  					  g_defArgsStr+=yytext;
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1386 "pre.l"
{
  					  g_defArgsStr+=*yytext;
  					}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1389 "pre.l"
{
  					  if (g_macroExpansion) 
					    BEGIN(IncludeID);
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1393 "pre.l"
{ 
					  char c[2];
					  c[0]=yytext[yyleng-1];c[1]='\0';
					  g_incName=c;
  					  BEGIN(Include); 
					}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1399 "pre.l"
{ 
  			                  //printf("!!!DefName\n"); 
  					  BEGIN(DefName); 
					}
	YY_BREAK
case 36:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1403 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr2);
  					}
	YY_BREAK
case 37:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1408 "pre.l"
{
  					  //printf("Pre.l: ifdef\n");
  					  incrLevel();
					  g_guardExpr.resize(0);
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 38:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1414 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr2);
					}
	YY_BREAK
case 39:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1419 "pre.l"
{
  					  incrLevel();
					  g_guardExpr="! ";
  					  BEGIN(DefinedExpr1);
  					}
	YY_BREAK
case 40:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 2;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1424 "pre.l"
{
  					  incrLevel();
					  g_guardExpr.resize(0);
					  BEGIN(Guard);
					}
	YY_BREAK
case 41:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1429 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
					    BEGIN(Guard);  
					  }
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 42:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1441 "pre.l"
{
					  //printf("else g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
  					  if (otherCaseDone())
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
					  else
					  {
					    setCaseDone(TRUE);
					    //g_levelGuard[g_level-1]=TRUE;
					  } 
  					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 1454 "pre.l"
{
  					  BEGIN(UndefName);
  					}
	YY_BREAK
case 44:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1457 "pre.l"
{
  					  if (!otherCaseDone())
					  {
					    g_guardExpr.resize(0);
  					    BEGIN(Guard);
					  }
  					}
	YY_BREAK
case 45:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1464 "pre.l"
{
  					  //printf("Pre.l: #endif\n");
  					  decrLevel();
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1468 "pre.l"
{
  					  outputChar('\n');
  					  BEGIN(Start);
					  g_yyLineNr++;
  					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 1473 "pre.l"
{ // unknown directive
					  BEGIN(IgnoreLine);
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1476 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1480 "pre.l"

	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1481 "pre.l"

	YY_BREAK
case 51:
YY_RULE_SETUP
#line 1482 "pre.l"
{
  					  Define *def;
  					  if ((def=isDefined(yytext)) 
					      /*&& !def->isPredefined*/
					     )
					  {
					    //printf("undefining %s\n",yytext);
					    def->undef=TRUE;
					  }
					  BEGIN(Start);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1493 "pre.l"
{
  					  outputChar('\n');
  					  g_guardExpr+=' ';
					  g_yyLineNr++;
  					}
	YY_BREAK
case 53:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1498 "pre.l"
{
    					  BEGIN(DefinedExpr2);
    					}
	YY_BREAK
case 54:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1501 "pre.l"
{
    					  BEGIN(DefinedExpr1);
    					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 1504 "pre.l"
{ g_guardExpr+=*yytext; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1505 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;
  					  //printf("Guard: `%s'\n",
					  //    g_guardExpr.data());
					  bool guard=computeExpression(g_guardExpr);
					  setCaseDone(guard);
					  //printf("if g_levelGuard[%d]=%d\n",g_level-1,g_levelGuard[g_level-1]);
					  if (guard)
					  {
					    BEGIN(Start);
					  } 
					  else
					  {
					    g_ifcount=0;
					    BEGIN(SkipCPPBlock);
					  }
  					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 1523 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 1524 "pre.l"
{
  					  if (isDefined(yytext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName=yytext;
					  BEGIN(Guard);
  					}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 1532 "pre.l"
{
  					  if (isDefined(yytext))
					    g_guardExpr+=" 1L ";
					  else
					    g_guardExpr+=" 0L ";
					  g_lastGuardName.resize(0);
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1539 "pre.l"
{ // should not happen, handle anyway
  					  g_ifcount=0;
 					  BEGIN(SkipCPPBlock); 
					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1543 "pre.l"
{
  					  BEGIN(Guard);
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1546 "pre.l"

	YY_BREAK
case 63:
YY_RULE_SETUP
#line 1547 "pre.l"
{ BEGIN(SkipCommand); }
	YY_BREAK
case 64:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1548 "pre.l"
{ BEGIN(SkipLine); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1549 "pre.l"

	YY_BREAK
case 66:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1550 "pre.l"
{ 
  					  incrLevel();
                                          g_ifcount++; 
  					  //printf("#if... depth=%d\n",g_ifcount);
					}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 1555 "pre.l"
{
					  //printf("Else! g_ifcount=%d otherCaseDone=%d\n",g_ifcount,otherCaseDone());
  					  if (g_ifcount==0 && !otherCaseDone())
					  {
					    setCaseDone(TRUE);
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 68:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1564 "pre.l"
{
  					  if (g_ifcount==0) 
					  {
  					    if (!otherCaseDone())
					    {
					      g_guardExpr.resize(0);
					      g_lastGuardName.resize(0);
  					      BEGIN(Guard);
					    }
					    else
					    {
					      BEGIN(SkipCPPBlock);
					    }
					  }
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1579 "pre.l"
{ 
  					  decrLevel();
  				          if (--g_ifcount<0)
  					  {
  					    //outputChar('\n');
					    BEGIN(Start);
					  }
					}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 1587 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 1592 "pre.l"
{ // unknown directive 
  					  BEGIN(SkipLine); 
					}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 1595 "pre.l"

	YY_BREAK
case 73:
YY_RULE_SETUP
#line 1596 "pre.l"

	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1597 "pre.l"

	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1598 "pre.l"
{
  					  g_lastCPPContext=YY_START;
  					  BEGIN(RemoveCPPComment);
					}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 1602 "pre.l"
{
					  g_lastCContext=YY_START;
  					  BEGIN(RemoveCComment);
  					}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 1606 "pre.l"
{
  					  outputChar('\n');
					  g_yyLineNr++;  
					  BEGIN(SkipCPPBlock);
					}
	YY_BREAK
case 78:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1611 "pre.l"
{
  					  g_nospaces=TRUE;
				          g_roundCount=0;
					  g_defArgsStr=yytext;
					  g_findDefArgContext = IncludeID;
					  BEGIN(FindDefineArgs);
					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1618 "pre.l"
{
  					  g_nospaces=TRUE;
                                          readIncludeFile(expandMacro(yytext));
					  BEGIN(Start);
  					}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 1623 "pre.l"
{ 
					  g_incName+=yytext;
					  readIncludeFile(g_incName);
					  
					  BEGIN(Start);
  					}
	YY_BREAK
case 81:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 1629 "pre.l"
{
  					  //printf("Define() `%s'\n",yytext);
					  g_argDict = new QDict<int>(31);
					  g_argDict->setAutoDelete(TRUE);
					  g_defArgs = 0; 
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = yytext;
					  g_defVarArgs = FALSE;
					  BEGIN(DefineArg);
  					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1641 "pre.l"
{
  					  //printf("Define `%s'\n",yytext);
  					  g_argDict = 0;
					  g_defArgs = -1;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defName = yytext;
					  g_defVarArgs = FALSE;
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
					  BEGIN(DefineText); 
  					}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 1656 "pre.l"
{
  					  g_argDict = 0;
					  g_defArgs = -1;
					  g_defName = yytext;
                                          g_defArgsStr.resize(0);
					  g_defText.resize(0);
					  g_defLitText.resize(0);
					  g_defVarArgs = FALSE;
					  if ( g_defName!=g_lastGuardName )
					  { // define may appear in the output
					    QCString tmp=(QCString)"#define "+g_defName;
					    outputArray(tmp.data(),tmp.length());
					    g_quoteArg=FALSE;
					    g_insideComment=FALSE;
					    BEGIN(DefineText);
					  }
					  else // define is a guard => hide
					  {
					    //printf("Found a guard %s\n",yytext);
  					    Define *def=g_fileDefineDict->find(g_defName);
					    //if (g_includeStack.isEmpty()) 
					    //{
					    //  addDefine();
					    //}
					    if (def==0) // new define name for this file
					    {
					      g_fileDefineDict->insert(g_defName,newDefine());
					    }
					    else // name already exists
					    {
					      if (def->undef) // undefined name
					      {
					        def->undef = FALSE;
					        def->name = g_defName;
					        def->definition = g_defText.stripWhiteSpace();
					        def->nargs = g_defArgs;
					        def->fileName = g_yyFileName.copy(); 
					        def->lineNr = g_yyLineNr;
					      }
					      else
					      {
					        //printf("Error: define %s is defined more than once!\n",g_defName.data());
					      }
					    }
					    g_lastGuardName.resize(0);
					    BEGIN(Start);
					  }
  					}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1704 "pre.l"
{ g_defArgsStr+=yytext; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 1705 "pre.l"
{ g_defArgsStr+=yytext; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 1706 "pre.l"
{
                                          g_defArgsStr+=yytext; 
					  QCString tmp=(QCString)"#define "+g_defName+g_defArgsStr;
					  outputArray(tmp.data(),tmp.length());
					  g_quoteArg=FALSE;
					  g_insideComment=FALSE;
  					  BEGIN(DefineText);
  					}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1714 "pre.l"
{
  					  //printf("Define addArg(%s)\n",yytext);
  					  QCString argName=yytext;
  					  g_defVarArgs = yytext[yyleng-1]=='.';
					  if (g_defVarArgs) // strip ellipsis
					  {
					    argName=argName.left(argName.length()-3);
					  }
					  argName = argName.stripWhiteSpace();
                                          g_defArgsStr+=yytext;
					  g_argDict->insert(argName,new int(g_defArgs)); 
					  g_defArgs++;
  					}
	YY_BREAK
/*
<DefineText>"/ **"|"/ *!"			{
  					  g_defText+=yytext;
					  g_defLitText+=yytext;
					  g_insideComment=TRUE;
  					}
<DefineText>"* /"			{
  					  g_defText+=yytext;
					  g_defLitText+=yytext;
					  g_insideComment=FALSE;
  					}
  */
case 88:
YY_RULE_SETUP
#line 1739 "pre.l"
{
					  g_defText+=yytext;
					  g_defLitText+=yytext;
					  g_lastCContext=YY_START;
					  g_commentCount=1;
  					  BEGIN(CopyCComment);
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1746 "pre.l"
{
  				          outputChar('/');outputChar('/');
  					  g_lastCPPContext=YY_START;
					  g_defLitText+=' ';
  					  BEGIN(SkipCPPComment);
  					}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 1752 "pre.l"
{
  					  if (yytext[0]=='/') outputChar('/');
  					  outputChar('*');outputChar('/');
					  if (--g_commentCount<=0)
					  {
  					    BEGIN(g_lastCContext);  
					  }
  					}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 1760 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1763 "pre.l"
{
  					  outputChar('/');outputChar('*');
					  //g_commentCount++;
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1767 "pre.l"
{
  					  outputArray(yytext,yyleng);
					  BEGIN(SkipVerbatim);
  					}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 1771 "pre.l"
{
  					  outputArray(yytext,yyleng);
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1775 "pre.l"
{
  					  outputArray(yytext,yyleng);
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1778 "pre.l"
{ 
  					  g_yyLineNr++;
  					  outputChar('\n');
  					}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1782 "pre.l"
{
  					  outputChar(*yytext);
  					}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 1785 "pre.l"
{
					  g_defLitText+=yytext;
					  g_defText+=yytext;
  					}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 1789 "pre.l"
{
					  g_defLitText+=yytext;
					  g_defText+=yytext;
  					  BEGIN(g_lastCContext);
  					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1794 "pre.l"
{ 
  					  g_yyLineNr++;
					  g_defLitText+=yytext;
					  g_defText+=yytext;
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1799 "pre.l"
{
					  g_defLitText+=yytext;
					  g_defText+=yytext;
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1803 "pre.l"
{ BEGIN(g_lastCContext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1804 "pre.l"

	YY_BREAK
case 104:
YY_RULE_SETUP
#line 1805 "pre.l"

	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1806 "pre.l"

	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1807 "pre.l"
{ g_yyLineNr++; outputChar('\n'); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 1808 "pre.l"

	YY_BREAK
case 108:
YY_RULE_SETUP
#line 1809 "pre.l"
{
  					  unput(*yytext);
  					  BEGIN(g_lastCPPContext);
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1813 "pre.l"
{
  					  outputChar('/');outputChar('*');
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1816 "pre.l"
{
  					  outputChar('/');outputChar('/');
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1819 "pre.l"
{
  					  outputArray(yytext,yyleng);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1822 "pre.l"
{
  					  outputChar(*yytext);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1825 "pre.l"

	YY_BREAK
case 114:
YY_RULE_SETUP
#line 1826 "pre.l"

	YY_BREAK
case 115:
YY_RULE_SETUP
#line 1827 "pre.l"

	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1828 "pre.l"

	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1829 "pre.l"
{
  					  g_quoteArg=TRUE;
					  g_defLitText+=yytext;
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1833 "pre.l"
{
					  g_defLitText+=yytext;
  					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  if (g_defArgs>0)
					  {
					    int *n;
					    if ((n=(*g_argDict)[yytext]))
					    {
					      //if (!g_quoteArg) g_defText+=' ';
					      g_defText+='@';
					      QCString numStr;
					      numStr.sprintf("%d",*n);
					      g_defText+=numStr;
					      //if (!g_quoteArg) g_defText+=' ';
					    }
					    else
					    {
					      g_defText+=yytext;
					    }
					  }
					  else
					  {
					    g_defText+=yytext;
					  }
					  if (g_quoteArg)
					  {
					    g_defText+="\"";
					  }
					  g_quoteArg=FALSE;
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1866 "pre.l"
{ 
					  g_defLitText+=yytext;
					  outputChar('\n');
  					  g_defText += ' '; g_yyLineNr++; 
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 1871 "pre.l"
{
					  QCString comment=extractTrailingComment(g_defLitText);
					  g_defLitText+=yytext;
					  if (!comment.isEmpty())
					  {
					    outputArray(comment,comment.length());
					    g_defLitText=g_defLitText.left(g_defLitText.length()-comment.length()-1);
					  }
  					  outputChar('\n');
  					  Define *def=0;
					  //printf("Define name=`%s' text=`%s' litTexti=`%s'\n",g_defName.data(),g_defText.data(),g_defLitText.data());
					  if (g_includeStack.isEmpty() || g_curlyCount>0) 
					  {
					    addDefine();
					  }
					  def=g_fileDefineDict->find(g_defName);
					  if (def==0) // new define
					  {
					    //printf("new define!\n");
					    g_fileDefineDict->insert(g_defName,newDefine());
					  }
					  else if (def)// name already exists
					  {
					    //printf("existing define!\n");
					    //printf("define found\n");
					    if (def->undef) // undefined name
					    {
					      def->undef = FALSE;
					      def->name = g_defName;
					      def->definition = g_defText.stripWhiteSpace();
					      def->nargs = g_defArgs;
					      def->fileName = g_yyFileName.copy(); 
					      def->lineNr = g_yyLineNr;
					    }
					    else
					    {
					      //printf("Error: define %s is defined more than once!\n",g_defName.data());
					    }
					  }
					  delete g_argDict; g_argDict=0;
					  g_yyLineNr++;
					  g_lastGuardName.resize(0);
					  BEGIN(Start);
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1915 "pre.l"
{ g_defText += ' '; g_defLitText+=yytext; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 1916 "pre.l"
{ g_defText += "##"; g_defLitText+=yytext; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1917 "pre.l"
{ g_defText += "@@"; g_defLitText+=yytext; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1918 "pre.l"
{ 
                                          g_defText += *yytext; 
  					  g_defLitText+=yytext; 
					  if (!g_insideComment)
					  {
					    BEGIN(SkipDoubleQuote);
					  }
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1926 "pre.l"
{ g_defText += *yytext;
  					  g_defLitText+=yytext; 
					  if (!g_insideComment)
					  {
  					    BEGIN(SkipSingleQuote);
					  }
					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1933 "pre.l"
{ g_defText += yytext; g_defLitText+=yytext; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1934 "pre.l"
{ g_defText += yytext; g_defLitText+=yytext; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 1935 "pre.l"
{
  					  g_defText += *yytext; g_defLitText+=yytext; 
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 1939 "pre.l"
{
  					  g_defText += yytext; g_defLitText+=yytext;
					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1942 "pre.l"
{
  					  g_defText += *yytext; g_defLitText+=yytext;
					  BEGIN(DefineText);
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1946 "pre.l"
{ g_defText += *yytext; g_defLitText+=yytext; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 1947 "pre.l"
{ g_defText += *yytext; g_defLitText+=yytext; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1948 "pre.l"
{ g_defText += *yytext; g_defLitText+=yytext; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(Command):
case YY_STATE_EOF(SkipCommand):
case YY_STATE_EOF(SkipLine):
case YY_STATE_EOF(CopyLine):
case YY_STATE_EOF(CopyString):
case YY_STATE_EOF(Include):
case YY_STATE_EOF(IncludeID):
case YY_STATE_EOF(DefName):
case YY_STATE_EOF(DefineArg):
case YY_STATE_EOF(DefineText):
case YY_STATE_EOF(SkipCPPBlock):
case YY_STATE_EOF(Ifdef):
case YY_STATE_EOF(Ifndef):
case YY_STATE_EOF(SkipCComment):
case YY_STATE_EOF(CopyCComment):
case YY_STATE_EOF(SkipVerbatim):
case YY_STATE_EOF(SkipCPPComment):
case YY_STATE_EOF(RemoveCComment):
case YY_STATE_EOF(RemoveCPPComment):
case YY_STATE_EOF(Guard):
case YY_STATE_EOF(DefinedExpr1):
case YY_STATE_EOF(DefinedExpr2):
case YY_STATE_EOF(SkipDoubleQuote):
case YY_STATE_EOF(SkipSingleQuote):
case YY_STATE_EOF(UndefName):
case YY_STATE_EOF(IgnoreLine):
case YY_STATE_EOF(FindDefineArgs):
case YY_STATE_EOF(ReadString):
#line 1949 "pre.l"
{
                                          //fprintf(stderr,"End of include file\n");
					  //printf("Include stack depth=%d\n",g_includeStack.count());
  					  if (g_includeStack.isEmpty())
					  {
					    //fprintf(stderr,"Terminating scanner!\n");
					    yyterminate();
					  }
					  else
					  {
					    FileState *fs=g_includeStack.pop();
					    //fileDefineCache->merge(g_yyFileName,fs->fileName);
					    if (getFileFilter(fs->fileName.data()).isEmpty())
					      fclose(fs->filePtr);
					    else
					      pclose(fs->filePtr);
					    YY_BUFFER_STATE oldBuf = YY_CURRENT_BUFFER;
					    yy_switch_to_buffer( fs->bufState );
					    yy_delete_buffer( oldBuf );
					    g_yyLineNr=fs->lineNr;
					    setFileName(fs->fileName.copy());
					    //fprintf(stderr,"######## FileName %s\n",g_yyFileName.data());
					    
                                            // Deal with file changes due to 
                                            // #include's within { .. } blocks
                                            QCString lineStr;
                                            lineStr.sprintf("# %d \"%s\" 2",g_yyLineNr,g_yyFileName.data());
                                            outputArray(lineStr.data(),lineStr.length());
					    
					    delete fs; fs=0;
					  }
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1981 "pre.l"
{
					  outputChar('/');outputChar('*');
  					  g_lastCContext=YY_START;
					  g_commentCount=1;
					  BEGIN(SkipCComment);
  					}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 1987 "pre.l"
{
					  outputChar('/');outputChar('/');
  					  g_lastCPPContext=YY_START;
					  BEGIN(SkipCPPComment);
					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1992 "pre.l"
{ 
  					  outputChar('\n');
  					  g_yyLineNr++; 
					}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1996 "pre.l"
{
  					  outputChar(*yytext);
  					}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 2000 "pre.l"
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 44);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 825 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 44;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 825 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 824);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 2000 "pre.l"


/*@ ----------------------------------------------------------------------------
 */

static int getNextChar(const QCString &expr,QCString *rest,uint &pos)
{
  //printf("getNextChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos++);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    *rest=rest->right(rest->length()-1);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}
 
static int getCurrentChar(const QCString &expr,QCString *rest,uint pos)
{
  //printf("getCurrentChar(%s,%s,%d)\n",expr.data(),rest ? rest->data() : 0,pos);
  if (pos<expr.length())
  {
    //printf("%c=expr()\n",expr.at(pos));
    return expr.at(pos);
  }
  else if (rest && !rest->isEmpty())
  {
    int cc=rest->at(0);
    //printf("%c=rest\n",cc);
    return cc;
  }
  else
  {
    int cc=yyinput();
    returnCharToStream(cc);
    //unput((char)cc);
    //printf("%c=yyinput()\n",cc);
    return cc;
  }
}

static void unputChar(const QCString &expr,QCString *rest,uint &pos,char c)
{
  //printf("unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
  if (pos<expr.length())
  {
    pos++;
  }
  else if (rest)
  {
    //printf("Prepending to rest!\n");
    char cs[2];cs[0]=c;cs[1]='\0';
    rest->prepend(cs);
  }
  else
  {
    //unput(c);
    returnCharToStream(c);
  }
  //printf("result: unputChar(%s,%s,%d,%c)\n",expr.data(),rest ? rest->data() : 0,pos,c);
}

void addSearchDir(const char *dir)
{
  QFileInfo fi(dir);
  if (fi.isDir()) g_pathList->append(fi.absFilePath());
} 

void initPreprocessor()
{
  g_pathList = new QStrList;
  addSearchDir(".");
  //defineNameList.setAutoDelete(TRUE);
  //defineNameList.clear();
  //defineDict.clear();
  //fileDefineCache = new DefineCache(1009);
  g_expandedDict = new DefineDict(17);
  g_fileDefineDict = new DefineDict(1009);
}

void cleanUpPreprocessor()
{
  //delete fileDefineCache;
  delete g_fileDefineDict; g_fileDefineDict=0;
  delete g_expandedDict; g_expandedDict=0;
  delete g_pathList; g_pathList=0;
}


void preprocessFile(const char *fileName,BufStr &output)
{
  uint orgOffset=output.curPos();

  g_macroExpansion = Config_getBool("MACRO_EXPANSION");
  g_expandOnlyPredef = Config_getBool("EXPAND_ONLY_PREDEF");
  g_curlyCount=0;
  g_nospaces=FALSE;
  g_outputBuf=&output;
  g_includeStack.setAutoDelete(TRUE);
  g_includeStack.clear();
  g_fileDefineDict->setAutoDelete(TRUE);
  g_fileDefineDict->clear();
  g_expandedDict->setAutoDelete(FALSE);
  g_expandedDict->clear();
  
  // add predefined macros
  char *defStr;
  QStrList &predefList = Config_getList("PREDEFINED");
  QStrListIterator sli(predefList);
  for (sli.toFirst();(defStr=sli.current());++sli)
  {
    QCString ds = defStr;
    int i_equals=ds.find('=');
    int i_obrace=ds.find('(');
    int i_cbrace=ds.find(')');
    bool nonRecursive = i_equals>0 && ds.at(i_equals-1)==':';
    
    if (i_obrace==0) continue; // no define name
    
    if (i_obrace<i_equals && i_cbrace<i_equals && 
	i_obrace!=-1      && i_cbrace!=-1      && 
	i_obrace<i_cbrace
       ) // predefined function macro definition
    {
      QRegExp reId("[a-z_A-Z][a-z_A-Z0-9]*"); // regexp matching an id
      QDict<int> argDict(17);
      argDict.setAutoDelete(TRUE);
      int i=i_obrace+1,p,l,count=0;
      // gather the formal arguments in a dictionary 
      while (i<i_cbrace && (p=reId.match(ds,i,&l)))
      {
        argDict.insert(ds.mid(p,l),new int(count++));
	i=p+l;
      }
      // strip definition part
      QCString tmp=ds.right(ds.length()-i_equals-1);
      QCString definition;
      i=0;
      // substitute all occurrences of formal arguments by their 
      // corresponding markers
      while ((p=reId.match(tmp,i,&l))!=-1)
      {
        if (p>i) definition+=tmp.mid(i,p-i);
	int *argIndex;
	if ((argIndex=argDict[tmp.mid(p,l)])!=0)
	{
	  QCString marker;
	  marker.sprintf(" @%d ",*argIndex);
	  definition+=marker;
	}
	else
	{
	  definition+=tmp.mid(p,l);
	}
	i=p+l;
      }
      if (i<(int)tmp.length()) definition+=tmp.mid(i,tmp.length()-i);
      
      // add define definition to the dictionary of defines for this file
      Define *def = new Define;
      def->name = ds.left(i_obrace);
      def->definition = definition; 
      def->nargs = count;
      def->isPredefined = TRUE;
      def->nonRecursive = nonRecursive;
      g_fileDefineDict->insert(def->name,def);

      //printf("#define `%s' `%s' #nargs=%d\n",
      //  def->name.data(),def->definition.data(),def->nargs);
    }
    else if ((i_obrace==-1 || i_obrace>i_equals) &&
	     (i_cbrace==-1 || i_cbrace>i_equals) &&
	     !ds.isEmpty() && (int)ds.length()>i_equals
	    ) // predefined non-function macro definition
    {
      Define *def = new Define;
      if (i_equals==-1) // simple define without argument
      {
        def->name = ds;
        def->definition = "1"; // substitute occurrences by 1 (true)
      }
      else // simple define with argument
      {
	int ine=i_equals - (nonRecursive ? 1 : 0);
	def->name = ds.left(ine);
	def->definition = ds.right(ds.length()-i_equals-1);
      }
      def->nargs = -1;
      def->isPredefined = TRUE;
      def->nonRecursive = nonRecursive;
      g_fileDefineDict->insert(def->name,def);

      //printf("#define `%s' `%s' #nargs=%d\n",
      //  def->name.data(),def->definition.data(),def->nargs);
    }
    
  }
 
  QCString inputFilter = getFileFilter(fileName);
  if (inputFilter.isEmpty())
  {
    preYYin = fopen(fileName,"r");
    if (!preYYin)
    {
      err("Error: could not open file %s\n",fileName);
      return;
    }
  }
  else
  {
    QCString cmd = inputFilter+" \""+fileName+"\"";
    preYYin = popen(cmd,"r");
    if (!preYYin)
    {
      err("Error: could not execute filter %s\n",cmd.data());
      return;
    }
  }
  g_yyLineNr = 1;
  g_level    = 0;
  g_ifcount  = 0;
  setFileName(fileName);
  BEGIN( Start );
  
  g_lastGuardName.resize(0);
  g_guardExpr.resize(0);
  
  preYYlex();
  if (inputFilter.isEmpty())
    fclose(preYYin);
  else
    pclose(preYYin);
  
  if (Debug::isFlagSet(Debug::Preprocessor))
  {
    char *orgPos=output.data()+orgOffset;
    char *newPos=output.data()+output.curPos();
    msg("Preprocessor output (size: %d bytes):\n",newPos-orgPos);
    int line=1;
    msg("---------\n00001 ");
    while (orgPos<newPos) 
    {
      putchar(*orgPos);
      if (*orgPos=='\n') printf("%05d ",++line);
      orgPos++;
    }
    msg("\n---------\n");
  }
}

#if !defined(YY_FLEX_SUBMINOR_VERSION) 
extern "C" { // some bogus code to keep the compiler happy
//  int  preYYwrap() { return 1 ; }
  void preYYdummy() { yy_flex_realloc(0,0); } 
}
#endif

