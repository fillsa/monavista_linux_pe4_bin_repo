#define yy_create_buffer tagYY_create_buffer
#define yy_delete_buffer tagYY_delete_buffer
#define yy_scan_buffer tagYY_scan_buffer
#define yy_scan_string tagYY_scan_string
#define yy_scan_bytes tagYY_scan_bytes
#define yy_flex_debug tagYY_flex_debug
#define yy_init_buffer tagYY_init_buffer
#define yy_flush_buffer tagYY_flush_buffer
#define yy_load_buffer_state tagYY_load_buffer_state
#define yy_switch_to_buffer tagYY_switch_to_buffer
#define yyin tagYYin
#define yyleng tagYYleng
#define yylex tagYYlex
#define yyout tagYYout
#define yyrestart tagYYrestart
#define yytext tagYYtext
#define yywrap tagYYwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/root/flex/flex/skel.c,v 1.1.1.1 1999/04/23 00:46:30 wsanchez Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 54
#define YY_END_OF_BUFFER 55
static yyconst short int yy_accept[367] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   55,   52,   53,   52,    9,   11,    9,   11,
       52,   31,   30,   29,   29,   29,   26,   32,   52,   34,
       42,   42,   36,   36,   41,   52,   52,   22,   52,   23,
       52,   20,   20,   20,   52,   49,   48,   49,   48,   15,
       50,   51,   14,   13,   52,   11,    0,    0,    0,   11,
        0,    0,    0,   11,    0,   30,   29,   29,   29,   26,

       32,    0,    0,   42,   42,    0,    0,    0,    0,    0,
       23,    0,    0,   20,   20,   20,   20,    0,    0,    0,
        0,    0,   15,   51,   14,   13,    0,   11,   10,    0,
        0,    0,    0,    0,    0,    0,   11,    0,   29,   29,
       33,    0,   42,    0,    0,    0,   39,    0,    0,    0,
       20,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        4,    0,    0,    1,    0,    0,   11,    0,    0,   29,
       29,    0,   42,   38,   37,    0,    0,    0,    0,   20,
       43,    0,   46,   45,    0,    0,    0,    7,    0,    0,
        0,    0,   11,    0,    0,   29,    0,    0,   42,    0,

       21,    0,    0,   20,   44,    0,    0,    0,    0,    0,
        0,    0,   11,    0,    0,    0,    0,    0,   42,   40,
        0,   18,   20,   47,   12,    0,    0,    0,    0,    0,
       11,    0,    0,    0,    0,    0,   42,    0,    0,   20,
        0,    0,    0,    0,   11,    0,    0,    0,    0,   35,
        0,   17,   20,    8,    0,    0,    0,    5,    0,   25,
        0,    0,    0,    0,   19,    0,    0,   19,   19,   19,
       20,   20,   19,    0,    0,    0,    0,    0,    0,    0,
       19,    0,    0,    0,    0,    0,   19,    0,   20,   20,
       19,    0,    0,    0,    0,    0,    0,   16,    0,    0,

        0,    0,    0,    0,   20,    0,    0,    0,    0,    0,
        0,    0,    0,   19,   19,    0,   20,    0,    0,    0,
        0,    0,    0,    0,   19,    0,   19,    0,   19,   19,
       20,    0,    0,    0,    0,    0,   28,    0,    0,   19,
        0,    0,   19,    0,    0,    0,    0,   27,    0,    0,
        0,    0,    6,    0,    0,    0,    3,    0,    0,    0,
        0,    0,    0,    2,   24,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    5,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   17,
       19,   17,   17,   17,   17,   17,   17,   20,   21,   22,
       23,   24,    1,   25,   26,   26,   27,   26,   26,   28,
       26,   26,   29,   26,   26,   26,   26,   26,   26,   26,
       26,   30,   26,   26,   26,   26,   26,   26,   26,   26,
        9,    1,   10,    5,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   26,   26,   41,   42,   43,
       44,   45,   26,   46,   47,   48,   26,   26,   49,   50,
       51,   26,    1,   52,    1,   53,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[54] =
    {   0,
        1,    1,    2,    3,    1,    3,    1,    1,    1,    1,
        1,    4,    1,    4,    4,    3,    5,    5,    5,    6,
        1,    7,    3,    1,    3,    8,    8,    8,    8,    8,
        5,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    1,    9
    } ;

static yyconst short int yy_base[389] =
    {   0,
     1195, 1194,    0,   32,   52,   53,   75,  128,  181,    0,
      234,  287,   55,   56,  340,    0,  393,    0,  446,    0,
      497,    0,   65,   67,  550,    0,   54,   61,  603,  656,
       68,   70,   98,   99,  709,    0,  762,    0,  815,    0,
      868,    0, 1194, 1249, 1249,    0,   71,    0,   78, 1150,
     1158, 1249,    0,    0, 1148, 1146,    0,    0,   61, 1249,
        0, 1136, 1249,   28, 1249, 1144, 1141, 1249, 1144,    0,
       89,   61,  101,    0, 1156, 1249, 1249,  123, 1249,    0,
     1249,    0,    0,    0, 1155,  921, 1101, 1117, 1074,    0,
      124, 1079, 1083, 1078, 1112,    0,    0, 1082, 1072,    0,

        0, 1088, 1063,    0, 1074, 1061, 1060, 1066, 1057, 1101,
        0, 1069, 1081,   65,  112,    0,  123, 1070, 1059, 1052,
     1051, 1065,    0,    0,    0,    0, 1052,    0, 1249, 1053,
     1059,  100, 1089, 1068, 1066, 1067, 1052,  124, 1040, 1050,
     1249, 1038, 1036, 1059, 1055, 1039, 1249,    0, 1030, 1057,
      116, 1048, 1026, 1049, 1048, 1020, 1020, 1033, 1040, 1031,
     1249, 1027, 1037, 1249, 1036,  224, 1011, 1015, 1009, 1007,
     1048, 1006, 1014, 1249, 1249,  997, 1018,  982,  999,  216,
     1249, 1007, 1249, 1249,  979,  987,  980, 1249,  980,  979,
      980,   93,  978,  983,  977, 1008,  980,  966,  959,  970,

     1249,  953,  975,  124, 1249,  976,  971,  958,  953,  960,
      973,  118,  942,  941,  946,  950,  943,  938,  899, 1249,
      876,  685,  208, 1249, 1249,  683,  667,  657,  679,  232,
      655,  654,  676,  662,  660,  672,  649,  662,  661,  221,
      686,  648,  643,  227,  685,  665,  681,  649,  649,    0,
      646, 1249,  973, 1249,  660,  659,  231, 1249,  670, 1249,
      639,  627,  647, 1025,  619,  238,  622,  991, 1249, 1071,
      263,  269,  988,  634,  648,  240,  617,  606,  615,  644,
     1039,  613,  612,  604,  596,  595,  228,  603,  273,  231,
        0,  604,  602,  261,  597,  601,  592, 1249,  589,  574,

      577,  600,  599,  570,  279,  574,  572,  151,  542,  504,
      512,  509,  523,  298,  310,  522,  229,  494,  535,  297,
      535,  504,  501,  488,  312,  496,  493,  492,  495,  520,
      468,  494,  504,  302,  488,  490, 1249,  488,  491,  502,
      474,  469,  326,  290,    0,  492,  288, 1249,  287,  304,
      281,  261, 1249,  279,  215,  134, 1249,  493,  141,  125,
      152,  306,  119,   90, 1249, 1249, 1124, 1133, 1142, 1151,
     1160,   64, 1165, 1170, 1174, 1179, 1183, 1187, 1191, 1196,
     1202, 1207,   57, 1211, 1220, 1229, 1236, 1240
    } ;

static yyconst short int yy_def[389] =
    {   0,
      367,  367,  366,    3,  367,  367,  368,  368,  366,    9,
      369,  369,  367,  367,  366,   15,  366,   17,  366,   19,
      367,   21,  367,  367,  366,   25,  367,  367,  370,  370,
      367,  367,  371,  371,  366,   35,  366,   37,  366,   39,
      366,   41,  366,  366,  366,  372,  366,  373,  366,  373,
      366,  366,  374,  375,  375,  375,  376,  377,  366,  366,
      378,  378,  366,  366,  366,  366,  366,  366,  366,  379,
      366,  380,  380,  381,  366,  366,  366,  366,  366,  382,
      366,  383,  384,  385,  366,  366,  372,  366,  366,  373,
      366,  366,  366,  373,  366,  374,  375,  375,  375,  376,

      377,  366,  366,  378,  378,  366,  366,  366,  366,  366,
      379,  366,  366,  380,  380,  381,  380,  366,  366,  366,
      366,  366,  382,  383,  384,  385,  366,   86,  366,  366,
      366,  366,  366,  366,  366,  386,  373,  366,  375,  375,
      366,  366,  378,  366,  366,  366,  366,  387,  366,  366,
      380,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  386,  386,  373,  366,  366,  375,
      375,  366,  378,  366,  366,  366,  387,  366,  366,  380,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  386,  373,  366,  366,  375,  366,  366,  378,  366,

      366,  366,  366,  380,  366,  366,  366,  366,  366,  366,
      366,  386,  373,  366,  366,  366,  366,  366,  378,  366,
      366,  366,  380,  366,  366,  366,  366,  366,  366,  386,
      373,  366,  366,  366,  366,  366,  378,  366,  366,  380,
      366,  366,  366,  386,  373,  366,  366,  366,  366,  378,
      366,  366,  380,  366,  366,  366,  386,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  380,  366,  380,
      380,  380,  381,  366,  366,  386,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  380,  366,  380,  380,
      381,  366,  366,  386,  366,  366,  366,  366,  366,  366,

      366,  366,  366,  366,  380,  366,  366,  386,  366,  366,
      366,  366,  366,  366,  366,  366,  380,  366,  366,  386,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      380,  366,  366,  386,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  388,  386,  366,  366,  366,  366,
      366,  366,  366,  386,  366,  366,  366,  386,  366,  386,
      366,  386,  366,  386,  366,    0,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366
    } ;

static yyconst short int yy_nxt[1303] =
    {   0,
       44,   44,   45,   44,   44,   44,   44,   46,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   47,   44,   44,   44,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   44,   44,   49,   45,   45,   45,   45,   45,   71,
       50,   52,   52,   45,  124,  106,   71,   68,  107,   68,
       45,   87,   45,   51,   51,   44,   44,   45,   44,   44,
       44,   52,   44,   44,   44,   44,   69,   44,   69,   75,
       44,   75,  112,  102,   44,   44,   44,   44,   44,   44,

       77,   77,   88,  160,  115,   78,   78,  103,  115,   88,
      212,  166,  113,  116,  166,   89,   91,  116,   92,   79,
       79,  230,   89,  161,  365,   93,   44,   44,   44,   44,
       45,   44,   44,   44,   52,   44,   44,   44,   44,  166,
       44,  132,  133,   44,  115,  117,  166,   44,   44,   44,
       44,   44,   44,  116,  119,  115,  117,  168,  151,  115,
      120,  180,  169,  121,  116,  122,  115,  115,  116,  134,
      362,  223,  166,  320,  363,  116,  116,  361,  340,   44,
       44,   44,   44,   45,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   54,   54,   54,

       44,   44,   44,   44,   44,   44,   54,   55,   56,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   44,   44,   44,   44,   45,   44,   44,   44,
       44,   44,   44,   44,   44,  166,   44,  204,  166,   44,
      359,  240,  166,  166,   44,   44,   44,   44,   44,  115,
      116,  166,  192,  244,  115,  117,  253,  257,  116,  284,
      276,  115,  115,  116,  115,  285,  331,  294,  286,  287,
      116,  116,  166,  116,  357,   44,   44,   44,   44,   45,
       44,   44,   44,   44,   44,   44,   44,   44,  289,   44,

      166,  329,   44,  308,  290,  326,  115,   44,   44,   44,
       44,   44,  115,  305,  317,  116,  115,  328,  166,  339,
      327,  116,  115,  166,  327,  116,  358,  166,  356,  364,
      334,  116,  329,  355,  340,  352,  343,  346,   44,   44,
       44,   44,   45,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   58,   58,   58,   44,
       44,   44,   44,   44,   44,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   44,   44,   44,   44,   45,   44,   44,   44,   44,

       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   59,   44,   44,   44,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   44,   60,   44,   44,   45,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   61,   61,   61,   44,   44,   44,   44,   44,
       44,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   62,
       61,   61,   61,   61,   61,   61,   61,   44,   44,   45,

      326,   63,  328,  287,   64,   63,   63,   63,   63,  339,
       63,  115,   63,  166,  166,  327,  351,  329,   65,   63,
      116,  350,  349,  269,  340,  348,  347,  345,  360,  344,
      343,   66,  342,  341,  354,  338,  337,  336,  335,   67,
      333,  332,  330,  325,  324,  323,  322,  321,   63,   63,
       44,   44,   45,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   70,   70,   70,   44,
       44,   44,   44,   44,   44,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   44,   44,   44,   44,   45,   44,   44,   44,   44,
       44,   44,   44,   44,  319,   44,  318,  316,   44,  315,
      314,  313,  269,   44,   44,   44,   44,   44,  269,  312,
      269,  269,  269,  269,  311,  269,  310,  309,  307,  306,
      304,  269,  303,  302,  269,  301,   73,  300,  299,  298,
      297,  296,  295,  293,   44,   74,   44,   44,   45,   44,
       44,   44,   44,   44,   44,   44,   44,  292,   44,  280,
      269,   44,  279,  269,  278,  277,   44,   44,   44,   44,
       44,  275,  274,  263,  262,  261,  260,  259,  258,  256,
      255,  254,  252,  251,  250,  141,  249,  248,  247,   73,

      246,  245,  161,  243,  242,  241,  239,   44,   74,   44,
       44,   45,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   80,   80,   80,   44,   44,
       44,   44,   44,   44,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       44,   44,   44,   44,   45,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   81,   44,   82,   82,   82,
       82,   82,   44,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   44,   44,   44,   44,   45,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   83,   83,   83,   83,   44,   44,   44,   44,   44,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   44,   83,   84,   84,
       45,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   85,
       84,   84,   84,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   84,
       84,  126,  126,  238,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  128,  128,  128,
      126,  126,  237,  126,  126,  126,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  126,  126,  264,  236,  264,  265,  235,  234,
      266,  267,  233,  265,  268,  269,  270,  232,  265,  231,
      229,  228,  227,  226,  225,  265,  224,  269,  222,  291,

      269,  291,  287,  221,  287,  220,  219,  271,  218,  217,
      269,  216,  215,  269,  214,  272,  115,  213,  211,  210,
      209,  208,  207,  206,  265,  273,  264,  205,  264,  265,
      203,  202,  266,  267,  115,  265,  265,  269,  281,  269,
      265,  201,  269,  116,  200,  199,  288,  265,  269,  198,
      269,  197,  269,  196,  195,  194,  193,  166,  191,  282,
      190,  269,  189,  188,  187,  186,  185,  283,  184,  183,
      182,  181,  179,  178,  176,  175,  265,  265,  288,  174,
      269,  173,  287,  172,  287,  171,  170,  167,  166,  164,
      269,  163,  162,  269,  159,  158,  157,  156,  155,  154,

      153,  152,  150,  149,  148,  147,  146,  145,  144,  143,
      142,  141,  140,  139,  115,  138,  137,  136,  135,  131,
      130,  129,  269,  116,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   90,
      127,  118,   90,   96,   96,  110,  109,   96,   97,  108,
      105,   97,  100,  100,  100,   99,  100,  101,   98,   95,
      101,  104,   94,  366,  104,  111,   45,   45,  111,  114,

      114,  114,  366,  114,  114,  116,  116,  116,  366,  116,
      116,  123,  366,  366,  123,  125,  125,  366,  125,  125,
      126,  366,  126,  126,  126,  126,  366,  126,  126,  165,
      366,  165,  165,  165,  165,  165,  165,  165,  177,  177,
      177,  177,  366,  177,  353,  366,  366,  353,   43,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366
    } ;

static yyconst short int yy_chk[1303] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    5,    6,   27,   13,   14,   27,
        4,   13,   14,   28,  383,   64,   28,   23,   64,   24,
       31,  372,   32,    5,    6,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,   23,    7,   24,   31,
        7,   32,   71,   59,    7,    7,    7,    7,    7,    7,

       33,   34,   47,  132,   72,   33,   34,   59,  114,   49,
      192,  364,   71,   72,  192,   47,   49,  114,   49,   33,
       34,  212,   49,  132,  363,   49,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,  212,
        8,   91,   91,    8,   73,   73,  360,    8,    8,    8,
        8,    8,    8,   73,   78,  115,  115,  138,  117,  151,
       78,  151,  138,   78,  115,   78,  117,  204,  151,   91,
      360,  204,  308,  308,  361,  117,  204,  359,  356,    8,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,  166,   11,  180,  244,   11,
      355,  223,  257,  230,   11,   11,   11,   11,   11,  180,
      223,  276,  166,  230,  240,  240,  240,  244,  180,  266,
      257,  287,  317,  240,  290,  266,  317,  276,  266,  290,
      287,  317,  294,  290,  352,   11,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,  271,   12,

      354,  351,   12,  294,  272,  314,  271,   12,   12,   12,
       12,   12,  272,  289,  305,  271,  289,  315,  320,  325,
      314,  272,  305,  334,  350,  289,  354,  362,  349,  362,
      320,  305,  315,  347,  325,  344,  343,  334,   12,   12,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   21,

      327,   21,  329,  331,   21,   21,   21,   21,   21,  340,
       21,  331,   21,  346,  358,  327,  342,  329,   21,   21,
      331,  341,  339,  338,  340,  336,  335,  333,  358,  332,
      330,   21,  328,  326,  346,  324,  323,  322,  321,   21,
      319,  318,  316,  313,  312,  311,  310,  309,   21,   21,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,  307,   29,  306,  304,   29,  303,
      302,  301,  300,   29,   29,   29,   29,   29,  265,  299,
      265,  267,  265,  267,  297,  267,  296,  295,  293,  292,
      288,  265,  286,  285,  267,  284,   29,  283,  282,  280,
      279,  278,  277,  275,   29,   29,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,  274,   30,  263,
      265,   30,  262,  267,  261,  259,   30,   30,   30,   30,
       30,  256,  255,  251,  249,  248,  247,  246,  245,  243,
      242,  241,  239,  238,  237,  236,  235,  234,  233,   30,

      232,  231,  229,  228,  227,  226,  222,   30,   30,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   86,   86,  221,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  219,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,  253,  218,  253,  253,  217,  216,
      253,  253,  215,  253,  253,  253,  253,  214,  253,  213,
      211,  210,  209,  208,  207,  253,  206,  273,  203,  273,

      268,  273,  268,  202,  268,  200,  199,  253,  198,  197,
      273,  196,  195,  268,  194,  253,  253,  193,  191,  190,
      189,  187,  186,  185,  253,  253,  264,  182,  264,  264,
      179,  178,  264,  264,  268,  264,  264,  264,  264,  273,
      264,  177,  268,  268,  176,  173,  281,  264,  281,  172,
      281,  171,  281,  170,  169,  168,  167,  165,  163,  264,
      162,  281,  160,  159,  158,  157,  156,  264,  155,  154,
      153,  152,  150,  149,  146,  145,  264,  264,  270,  144,
      270,  143,  270,  142,  270,  140,  139,  137,  136,  135,
      281,  134,  133,  270,  131,  130,  127,  122,  121,  120,

      119,  118,  113,  112,  110,  109,  108,  107,  106,  105,
      103,  102,   99,   98,  270,   95,   94,   93,   92,   89,
       88,   87,  270,  270,  367,  367,  367,  367,  367,  367,
      367,  367,  367,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  373,
       85,   75,  373,  374,  374,   69,   67,  374,  375,   66,
       62,  375,  376,  376,  376,   56,  376,  377,   55,   51,
      377,  378,   50,   43,  378,  379,    2,    1,  379,  380,

      380,  380,    0,  380,  380,  381,  381,  381,    0,  381,
      381,  382,    0,    0,  382,  384,  384,    0,  384,  384,
      385,    0,  385,  385,  385,  385,    0,  385,  385,  386,
        0,  386,  386,  386,  386,  386,  386,  386,  387,  387,
      387,  387,    0,  387,  388,    0,    0,  388,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  366,  366,  366,  366,  366,  366,

      366,  366
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "doxytag.l"
#define INITIAL 0
/******************************************************************************
 *
 * $Id: doxytag.l,v 1.27 2001/03/19 19:27:40 root Exp $
 *
 * Copyright (C) 1997-2004 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 19 "doxytag.l"
/*
 *	includes
 */
#include <stdio.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qstrlist.h>
#include <qfileinfo.h>
#include <qfile.h>
#include <qdict.h>
#include <qtextstream.h>
#include <qdir.h>
  
#include "version.h"
//#include "suffixtree.h"
//#include "searchindex.h"
#include "logos.h"

static QCString convertToXML(const char *s)
{ 
  QCString result;
  if (s==0) return result;
  const char *p=s;
  char c;
  while ((c=*p++))
  {     
    switch (c)
    {   
      case '<':  result+="&lt;";   break;
      case '>':  result+="&gt;";   break;
      case '&':  result+="&amp;";  break;
      case '\'': result+="&apos;"; break; 
      case '"':  result+="&quot;"; break;
      default:   result+=c;        break;         
    }
  }
  return result;
}
  
struct MemberDef
{
  QCString name;
  QCString anchor;
  QCString args;
};  
  
struct ClassDef
{
  QCString  name;
  QStrList bases;
  QCString  fileName;
  bool isFile;
  QList<MemberDef> memberList;
};  

QList<ClassDef> classList;
QDict<ClassDef> classDict(1009);
QList<ClassDef> fileList;
QDict<ClassDef> fileDict(1009);

static bool genTag;
static bool genIndex;

static QStrList  bases;
static QCString  inputString;
static int       inputPosition;
static QCString  yyFileName;
static int       yyLineNr;
static QCString  classFile;
static QCString  memberRef;
static QCString  memberName;
static QCString  memberArgs;
static QCString  className;
static QCString  docBaseLink;
static QCString  docAnchor;
static QCString  docRefName;
static bool      nameBug;
//static SearchIndex searchIndex;

#define YY_NEVER_INTERACTIVE 1

/* -----------------------------------------------------------------
 */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int yyread(char *buf,int max_size)
{
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	c++; buf++;
    }
    return c;
}

static void addClass(const char *clName)
{
  if (classDict[clName]==0)
  {
    ClassDef *cd=new ClassDef;
    cd->name=clName;
    cd->fileName=yyFileName;
    cd->isFile=FALSE;
    classList.append(cd);
    classDict.insert(clName,cd);
  }
}

static void addFile(const char *fName)
{
  if (classDict[fName]==0)
  {
    ClassDef *fd=new ClassDef;
    fd->name=fName;
    fd->fileName=yyFileName;
    fd->isFile=TRUE;
    classList.append(fd);
    classDict.insert(fName,fd);
  }
}

static void addBases(const char *clName)
{
  ClassDef *cd=0;
  if (clName && (cd=classDict[clName])) cd->bases=bases;
}

static void addMember(const char *memName,const char *memRef,const char *memArgs)
{
  ClassDef *cd=classList.last();
  MemberDef *md;
  md=new MemberDef;
  md->name=memName;
  md->anchor=memRef; 
  md->args=memArgs;
  cd->memberList.append(md);
}

static void addReference()
{
  //printf("addReference() key: %s ref:%s\n",
  //  docRefName.data(),(docBaseLink+"#"+docAnchor).data());
  //if (genIndex && !docRefName.isEmpty() && !docBaseLink.isEmpty())
  //{
  //  if (docAnchor.isEmpty())
  //    searchIndex.addReference(docRefName,docBaseLink);
  //  else
  //    searchIndex.addReference(docRefName,docBaseLink+"#"+docAnchor);
  //  searchIndex.addWord(docRefName,docRefName,TRUE);
  //}
}

QCString unhtmlify(const char *str)
{
  QCString result;
  const char *p=str;
  char c;
  while ((c=*p)!='\0')
  {
    if (c!='&') { result+=c; p++; }
    else
    {
      if (strncmp(p,"&amp;",5)==0)     { result+='&'; p+=5; }	
      else if (strncmp(p,"&lt;",4)==0) { result+='<'; p+=4; }
      else if (strncmp(p,"&gt;",4)==0) { result+='>'; p+=4; }
	else /* should not happen */     { result+='&'; p++; }
    }
  }
  return result;
}

#define Start 1

#define SearchClassFile 2

#define ReadClassFile 3

#define CheckClassName 4

#define ReadClassName 5

#define SearchMemberRef 6

#define ReadMemberRef 7

#define SearchMemberName 8

#define ReadMemberName 9

#define ReadOperator 10

#define SearchBaseClasses 11

#define ReadBaseClass 12

#define SearchRefName 13

#define ReadRefName 14

#define SearchArgs 15

#define ReadArgs 16

#define SearchWords 17

#define SkipHTMLTag 18

#define CheckConstructor 19

#define SkipPreformated 20


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 217 "doxytag.l"



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 367 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1249 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 219 "doxytag.l"
{ 
				     BEGIN( SearchClassFile );
				   } 
	YY_BREAK
case 2:
#line 223 "doxytag.l"
case 3:
YY_RULE_SETUP
#line 223 "doxytag.l"
{ // Qt variant
  				     BEGIN( ReadClassName );
			           }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 226 "doxytag.l"
{ // Doxygen variant
  				     BEGIN( ReadClassName );
			           }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 229 "doxytag.l"
{
  				     //printf("Inherits found\n");
  				     BEGIN( SearchBaseClasses );
  				   }
	YY_BREAK
case 6:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 15;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 233 "doxytag.l"
{ // needed due to inconsistency in the Qt docs
  				     BEGIN( CheckConstructor );
				   }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 236 "doxytag.l"
{ 
  				     BEGIN( SkipPreformated );
				   }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 239 "doxytag.l"
{
  				     BEGIN( SearchWords );
  				   }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 242 "doxytag.l"
{ 
  				     BEGIN( SkipHTMLTag ); 
				   }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 245 "doxytag.l"

	YY_BREAK
case 11:
YY_RULE_SETUP
#line 246 "doxytag.l"
{
  				     //printf("tag: %s#%s ref: %s word: `%s'\n",
				     // docBaseLink.data(),docAnchor.data(),
				     // docRefName.data(),yytext);
  				     //if (genIndex && !docRefName.isEmpty() && yyleng>2)
				     //  searchIndex.addWord(docRefName,
				     //	                   yytext,FALSE
				     //			  );
  				   }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 255 "doxytag.l"
{
  				     BEGIN( Start );
  				   }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 258 "doxytag.l"

	YY_BREAK
case 14:
YY_RULE_SETUP
#line 259 "doxytag.l"
{
  				     QCString s=yytext;
				     if (s.find("::")!=-1)
				     {
				       docRefName=yytext;
				       addReference();
				       nameBug=TRUE;
				     }
				     else
				     {
				       nameBug=FALSE;
				     }
				     BEGIN( Start );
  				   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 273 "doxytag.l"
{
  				     docAnchor = yytext;
				     if (docAnchor=="details" || 
					 docAnchor=="_details")
				     {
				       docRefName=className.copy();
				       addReference();
  				       BEGIN( Start );
				     }
				     else
				     {
				       BEGIN( SearchRefName );
				     }
  				   }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 287 "doxytag.l"
{
  				     BEGIN( ReadRefName ); 
  				   }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 290 "doxytag.l"
{ // HACK: avoid finding links in code fragments
  				     BEGIN( Start );
  				   }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 293 "doxytag.l"
{ // HACK: deal with Qt code
  				     if (nameBug)
				       BEGIN( Start );
				     else
				       BEGIN( ReadRefName );
  				   }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 300 "doxytag.l"
{ // hmm, looks impressive :-)
  				     docRefName=unhtmlify(yytext);
				     addReference();
				     BEGIN( Start );
  				   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 305 "doxytag.l"
{
  				     //printf("ReadRef=%s\n",yytext);
  				     docRefName=yytext;
				     addReference();
				     BEGIN( Start );
  				   }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 311 "doxytag.l"
{
  				     //printf("Search %s\n",yytext);
  				     BEGIN( ReadBaseClass );
				   }  
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 315 "doxytag.l"
{
  				     addBases(className);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 319 "doxytag.l"
{
  				     bases.append(yytext);
				     BEGIN( SearchBaseClasses );
  				   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 323 "doxytag.l"
{
  				     BEGIN( ReadClassFile ); 
  				   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 326 "doxytag.l"
{
  				     BEGIN( ReadClassFile ); 
  				   }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 329 "doxytag.l"
{
  				     className=yytext;
				     BEGIN( CheckClassName);
  				   }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 333 "doxytag.l"
{
  				     //printf("className=%s\n",className.data());
				     addClass(className);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 338 "doxytag.l"
{
  				     //printf("className=%s\n",className.data());
				     addFile(className);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 343 "doxytag.l"
{ // not a class file
  				     className.resize(0);
				     BEGIN( Start );
  				   }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 347 "doxytag.l"
{
  			             classFile=yytext;
				     BEGIN( SearchMemberRef );
  				   }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 351 "doxytag.l"
{
  				     if (YY_START==ReadClassFile)
				     {
				       classFile=yyFileName;
				     }
				     BEGIN( ReadMemberRef );
				   }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 358 "doxytag.l"
{
				     memberRef=yytext;
				     BEGIN( SearchMemberName );
				   }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 362 "doxytag.l"
{ // <strong> is for qt-1.44, <b> is for qt-2.00  
			             BEGIN( ReadMemberName );
				   }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 365 "doxytag.l"
{
  			             unput(*yytext);
				     BEGIN( ReadMemberName );
  				   }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 369 "doxytag.l"
{ 
  				     memberName="operator";
  				     BEGIN( ReadOperator );
				   }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 373 "doxytag.l"
{ memberName+=*yytext; } 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 374 "doxytag.l"
{ memberName+="<"; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 375 "doxytag.l"
{ memberName+=">"; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 376 "doxytag.l"
{ memberName+=" new"; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 377 "doxytag.l"
{ memberName+=" delete"; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 378 "doxytag.l"
{ BEGIN( SearchArgs ); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 379 "doxytag.l"
{
				     memberName=yytext;
  			             BEGIN( SearchArgs );
			           }  
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 383 "doxytag.l"
{ 
  				     //printf("SearchArg className=%s memberName=%s\n",className.data(),memberName.data());
				     if (!className.isEmpty() && !memberName.isEmpty())
				       BEGIN( ReadArgs ); 
				     else
				       BEGIN( Start );
				   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 390 "doxytag.l"
{ memberArgs+="&"; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 391 "doxytag.l"
{ memberArgs+="<"; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 392 "doxytag.l"
{ memberArgs+=">"; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 393 "doxytag.l"
{ memberArgs+=" "; }
	YY_BREAK
/*
<ReadArgs>[{}]			   { // handle enums
  				     memberArgs.resize(0);
				     addMember(memberName,memberRef,memberArgs);
				     if (*yytext=='}')
				       BEGIN( Start );
				     else
				       BEGIN( SearchClassFile );
  				   }
  */
case 48:
YY_RULE_SETUP
#line 404 "doxytag.l"
{
                                     //printf("adding member %s\n",memberName.data());
				     memberArgs=memberArgs.stripWhiteSpace();
				     //if (newClass)
				     //{
				     //  newClass=FALSE;
				     //  addClass(className);
				     //}
				     addMember(memberName,memberRef,memberArgs);
				     memberArgs.resize(0);
				     if (*yytext=='<')
				       BEGIN( SkipHTMLTag);
				     else
				       BEGIN( Start );
  				   }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 419 "doxytag.l"
{ memberArgs+=(*yytext)&0x7f; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 420 "doxytag.l"
{ BEGIN( Start ); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 421 "doxytag.l"

	YY_BREAK
case 52:
YY_RULE_SETUP
#line 422 "doxytag.l"

	YY_BREAK
case 53:
YY_RULE_SETUP
#line 423 "doxytag.l"
{ yyLineNr++; 
  				     if (YY_START!=SkipHTMLTag) BEGIN( Start ); 
				   }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 427 "doxytag.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(SearchClassFile):
case YY_STATE_EOF(ReadClassFile):
case YY_STATE_EOF(CheckClassName):
case YY_STATE_EOF(ReadClassName):
case YY_STATE_EOF(SearchMemberRef):
case YY_STATE_EOF(ReadMemberRef):
case YY_STATE_EOF(SearchMemberName):
case YY_STATE_EOF(ReadMemberName):
case YY_STATE_EOF(ReadOperator):
case YY_STATE_EOF(SearchBaseClasses):
case YY_STATE_EOF(ReadBaseClass):
case YY_STATE_EOF(SearchRefName):
case YY_STATE_EOF(ReadRefName):
case YY_STATE_EOF(SearchArgs):
case YY_STATE_EOF(ReadArgs):
case YY_STATE_EOF(SearchWords):
case YY_STATE_EOF(SkipHTMLTag):
case YY_STATE_EOF(CheckConstructor):
case YY_STATE_EOF(SkipPreformated):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 367 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 367 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 366);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 427 "doxytag.l"


/*@ ----------------------------------------------------------------------------
 */


void parse(QCString &s)
{
  bases.clear();
  nameBug       = FALSE;
  //newClass      = TRUE;
  inputString   = s;
  inputPosition = 0;
  yyLineNr      = 0;
  tagYYrestart( tagYYin );
  BEGIN( Start );
  tagYYlex();
  //printf("Number of lines scanned: %d\n",yyLineNr);
}

void parseFile(QFileInfo &fi)
{
  fprintf(stderr,"Parsing file %s...\n",fi.fileName().data());
  QFile f;
  f.setName(fi.absFilePath());
  if (f.open(IO_ReadOnly))
  {
    yyFileName = fi.fileName();
    className.resize(0);
    memberName.resize(0);
    //printf("Parsing file %s...\n",fi.fileName().data());
    QCString input(fi.size()+1);
    docBaseLink=fi.fileName();
    docRefName=fi.fileName().copy();
    //searchIndex.addReference(docRefName,docBaseLink);
    //searchIndex.addWord(docRefName,docRefName,TRUE);
    f.readBlock(input.data(),fi.size());
    input.at(fi.size())='\0';
    parse(input);
  }
  else
  {
    fprintf(stderr,"Warning: Cannot open file %s\n",fi.fileName().data());
  }
}

void parseFileOrDir(const char *fileName)
{
  QFileInfo fi(fileName);
  if (fi.exists())
  {
    if (fi.isFile())
    {
      parseFile(fi);
    }
    else if (fi.isDir())
    {
      QDir dir(fileName);
      dir.setFilter( QDir::Files );
      dir.setNameFilter( "*.html" );
      const QFileInfoList *list = dir.entryInfoList();
      QFileInfoListIterator it( *list );
      QFileInfo *cfi;
      for ( it.toFirst() ; (cfi=it.current()) ; ++it)
      {
	if (cfi->isFile())
	{
	  parseFile(*cfi);
	}
      }
    }
  }
  else
  {
    fprintf(stderr,"Warning: File %s does not exist\n",fileName);
  }
}

void usage(const char *name)
{
  fprintf(stderr,"Doxytag version %s\nCopyright Dimitri van Heesch 1997-2004\n\n",
      versionString);
  fprintf(stderr,"  Generates a tag file and/or a search index for a set of HTML files\n\n");
  fprintf(stderr,"Usage: %s [-t tag_file] [ html_file [html_file...] ]\n",name);
  fprintf(stderr,"Options:\n");
  fprintf(stderr,"  -t <tag_file>   Generate tag file <tag_file>.\n");
  fprintf(stderr,"If no HTML files are given all files in the current dir that\n"
                 "have a .html extension are parsed.\n\n");
  exit(1);
}

const char *getArg(int argc,char **argv,int &optind,const char c)
{
  char *s=0;
  if (strlen(&argv[optind][2])>0)
    s=&argv[optind][2];
  else if (optind+1<argc)
    s=argv[++optind];
  else
  {
    fprintf(stderr,"option -%c requires an argument\n",c);
    exit(1);
  }
  return s;
}

int main(int argc,char **argv)
{
  QCString tagName;
  QCString indexName;
  
  int optind=1;
  const char *arg;
  while (optind<argc && argv[optind][0]=='-')
  {
    switch(argv[optind][1])
    {
      case 't':
	arg=getArg(argc,argv,optind,'t');
	tagName=arg;
	break;
      case 's':
	arg=getArg(argc,argv,optind,'s');
	indexName=arg;
	break;
      case 'h':
      case '?':
        usage(argv[0]);
        break;
      default:
	fprintf(stderr,"Unknown option -%c\n",argv[optind][1]);
	usage(argv[0]);
    }
    optind++;
  }
  
  genTag   = !tagName.isEmpty();
  genIndex = !indexName.isEmpty();

  if (!genTag && !genIndex)
  {
    fprintf(stderr,"Nothing to do !\n\n");
    usage(argv[0]);
  }
  
  int i;
  if (optind>=argc)
  {
    parseFileOrDir(".");
  }
  else
  {
    for (i=optind;i<argc;i++)
    {
      parseFileOrDir(argv[i]);
    }
  }
  if (genIndex)
  {
    fprintf(stderr,"Error: doxytag cannot be used to generate a search index anymore.\n"
	           "This functionality has been integrated into doxygen.\n");
//    printf("Writing search index\n");
//    if (!searchIndex.saveIndex(indexName))
//    {
//      fprintf(stderr,"Error: Could not write search index\n");
//    }
//    QFileInfo fi(indexName);
//    if (fi.exists())
//    {
//      QCString dir=convertToQCString(fi.dir().absPath());
//      fi.setFile(dir+"/search.png");
//      if (!fi.exists()) writeSearchButton(dir);
//      fi.setFile(dir+"/doxygen.png");
//      if (!fi.exists()) writeLogo(dir);
//      fi.setFile(dir+"/search.cgi");
//      if (!fi.exists())
//      {
//        QFile f;
//	f.setName(dir+"/search.cgi");
//	if (f.open(IO_WriteOnly))
//	{
//	  QTextStream t(&f);
//	  t << "#!/bin/sh" << endl 
//	    << "DOXYSEARCH=" << endl 
//	    << "DOXYPATH=" << endl
//	    << "if [ -f $DOXYSEARCH ]" << endl
//	    << "then" << endl
//	    << "  $DOXYSEARCH $DOXYPATH" << endl 
//	    << "else" << endl
//	    << "  echo \"Content-Type: text/html\"" << endl
//	    << "  echo \"\"" << endl
//	    << "  echo \"<H1>Error: $DOXYSEARCH not found. Check cgi script!\"" << endl
//	    << "fi" << endl;
//          f.close();
//	}	  
//	else
//	{
//	  fprintf(stderr,"Error: could not open file %s for writing\n",(dir+"/search.cgi").data());
//	}
//      }
//    }
  }
  if (genTag)
  {
    QFile f;
    f.setName(tagName);
    if (f.open(IO_WriteOnly))
    {
      QTextStream t(&f);
      t << "<tagfile>" << endl;
      ClassDef *cd=classList.first();
      while (cd)
      {
	t << "  <compound kind=\"";
	if (cd->isFile) t << "file"; else t << "class";  
	t << "\">" << endl;
	t << "    <name>" << convertToXML(cd->name) << "</name>" << endl; 
        char *base=cd->bases.first();
        while (base)
	{
	  t << "    <base>" << convertToXML(base) << "</base>" << endl;
	  base=cd->bases.next();
	}
	t << "    <filename>" << convertToXML(cd->fileName) << "</filename>" << endl;
	MemberDef *md=cd->memberList.first();
	while (md)
	{
	  t << "    <member kind=\"function\">" << endl;
	  t << "      <name>" << convertToXML(md->name) << "</name>" << endl;
	  t << "      <anchor>" << convertToXML(md->anchor) << "</anchor>" << endl;
	  t << "      <arglist>" << convertToXML(md->args) << "</arglist>" << endl;
	  t << "    </member>" << endl;
	  md=cd->memberList.next();
	}
	t << "  </compound>" << endl;
	cd=classList.next();
      }
      t << "</tagfile>" << endl;
    }
    else
    {
      fprintf(stderr,"Error: Could not write tag file %s\n",tagName.data());
    }
  }
  return 0;
}

extern "C" {
int	tagYYwrap()	{ return 1 ; }
};
